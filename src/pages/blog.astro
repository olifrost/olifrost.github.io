---
import Layout from '../layouts/Layout.astro';
import ProjectSummary from '../components/ProjectSummary.astro';
import { getCollection } from 'astro:content';
import { getBlogUrl } from '../utils/urls';
import TagChip from '../components/TagChip.astro';
import { Image } from 'astro:assets';

// Get all projects and sort them chronologically by date
const allProjects = await getCollection('blog');
const sortedProjects = [...allProjects].sort((a, b) => {
  // Sort by date in descending order (newest first)
  return new Date(b.data.date || '').getTime() - new Date(a.data.date || '').getTime();
});

// Extract all unique tags from posts
const allTags = [...new Set(sortedProjects.flatMap(post => post.data.tags || []))].sort();

const PROJECTS_PER_PAGE = 12;

// Create project objects with pre-calculated URLs and sanitize data for client-side use
const projectsWithUrls = sortedProjects.map(project => {
  // Convert image objects to simple strings for client-side use
  let imageSrc = '';
  
  // For the client-side rendering, we need to extract the image src
  if (project.data.image) {
    if (typeof project.data.image === 'string') {
      imageSrc = project.data.image;
    } else if (project.data.image.src) {
      // Handle imported images with src property
      imageSrc = project.data.image.src;
    }
  }
  
  return {
    ...project,
    url: getBlogUrl(project.id),
    imageSrc
  };
});

// Add initial server-side rendering
const initialProjects = projectsWithUrls.slice(0, PROJECTS_PER_PAGE);
---

<Layout title="Projects | Oli Frost">
  <div class="container mx-auto px-0">
    <div class="mb-8">  
      <h1 class="text-3xl font-bold mb-4 text-black">Projects</h1>
      
      <!-- Tag-based navigation with "All" option -->
      <div class="mt-4">
        <div class="flex flex-wrap gap-2 items-center">
          <!-- "All" tag that uses JS-based filtering -->
          <button 
            class="all-tag-chip px-3 py-1.5 bg-blue-600 text-white rounded-md text-sm hover:bg-blue-700 transition-colors font-medium"
            data-is-all="true"
          >
            All
          </button>
          
          {allTags.map(tag => {
            // Format tag for display
            const formattedTag = tag
              .split('-')
              .map(word => word.charAt(0).toUpperCase() + word.slice(1))
              .join(' ');
              
            return (
              <button 
                class="tag-chip px-3 py-1.5 bg-neutral-100 text-neutral-700 rounded-md text-sm hover:bg-blue-100 hover:text-blue-800 transition-colors font-medium"
                data-tag={tag}
              >
                {formattedTag}
              </button>
            );
          })}
        </div>
      </div>
    </div>
    
    <div id="project-grid" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {initialProjects.map(project => (
        <ProjectSummary project={project} />
      ))}
    </div>
    
    {projectsWithUrls.length > PROJECTS_PER_PAGE && (
      <div id="load-more-container" class="flex justify-center mt-8">
        <button 
          id="load-more" 
          class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors"
        >
          Load More Projects
        </button>
      </div>
    )}
  </div>
</Layout>

<script define:vars={{ projects: projectsWithUrls, PROJECTS_PER_PAGE, allTags }}>
  // Client-side projects data with pre-calculated URLs
  let currentPage = 1;
  let activeTag = '';
  let isLoading = false;
  let reachedEnd = false;
  
  // Format a tag for display (capitalize, replace hyphens with spaces)
  function formatTagForDisplay(tag) {
    return tag
      .split('-')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ');
  }
  
  // Function to filter projects based on active tag
  function getFilteredProjects() {
    if (!activeTag) {
      return projects;
    }
    return projects.filter(project => project.data.tags && project.data.tags.includes(activeTag));
  }
  
  // Check for URL parameters on load
  function initializePage() {
    // Parse URL for tag and page
    const urlParams = new URLSearchParams(window.location.search);
    const tagParam = urlParams.get('tag');
    const hash = window.location.hash;
    
    if (tagParam) {
      activeTag = tagParam;
      updateActiveTag();
    }
    
    if (hash && hash.startsWith('#page=')) {
      currentPage = parseInt(hash.replace('#page=', '')) || 1;
    }
    
    renderProjects();
    updateLoadMoreVisibility();
    
    // Set up intersection observer for infinite scroll
    setupInfiniteScroll();
  }
  
  function renderProjects(appendMode = false) {
    const grid = document.getElementById('project-grid');
    if (!grid) return;
    
    // Only clear the grid if not in append mode
    if (!appendMode) {
      grid.innerHTML = '';
    }
    
    const filteredProjects = getFilteredProjects();
    
    // Calculate which projects to show
    const startIndex = appendMode ? (currentPage - 1) * PROJECTS_PER_PAGE : 0;
    const endIndex = currentPage * PROJECTS_PER_PAGE;
    const projectsToShow = filteredProjects.slice(startIndex, endIndex);
    
    if (filteredProjects.length === 0) {
      const noResults = document.createElement('div');
      noResults.className = 'col-span-1 md:col-span-2 lg:col-span-3 text-center py-8';
      noResults.innerHTML = `
        <p class="text-lg text-neutral-600 mb-4">No projects found with tag "${formatTagForDisplay(activeTag)}".</p>
        <button id="clear-tag-results" class="text-blue-600 hover:underline">View all projects</button>
      `;
      grid.appendChild(noResults);
      
      // Add event listener to the "View all projects" button
      document.getElementById('clear-tag-results').addEventListener('click', clearTagFilter);
      return;
    }
    
    // Check if we've reached the end
    reachedEnd = endIndex >= filteredProjects.length;
    
    // Use the ProjectSummary component for a consistent look
    projectsToShow.forEach(project => {
      // Create a div to hold the project
      const projectEl = document.createElement('div');
      
      // Use DocumentFragment for better performance when building complex DOM
      const fragment = document.createDocumentFragment();
      
      // Create the article element
      const article = document.createElement('article');
      article.className = 'w-full mb-3';
      
      // Create the image container div
      const imageContainer = document.createElement('div');
      imageContainer.className = 'w-full overflow-hidden rounded-lg mb-2 aspect-video relative';
      
      // Handle either video or image content
      if (project.data.video) {
        const videoContainer = document.createElement('div');
        videoContainer.className = 'relative not-prose';
        
        // Create lite-youtube element
        const liteYt = document.createElement('lite-youtube');
        liteYt.setAttribute('videoid', project.data.video);
        liteYt.className = 'rounded-lg';
        liteYt.setAttribute('data-title', '');
        
        if (project.imageSrc) {
          liteYt.style.backgroundImage = `url('${project.imageSrc}')`;
        }
        
        // Create play button
        const playBtn = document.createElement('a');
        playBtn.className = 'lty-playbtn';
        playBtn.setAttribute('tabindex', '0');
        playBtn.setAttribute('role', 'button');
        
        const span = document.createElement('span');
        span.className = 'lyt-visually-hidden';
        span.textContent = 'Play';
        
        playBtn.appendChild(span);
        liteYt.appendChild(playBtn);
        videoContainer.appendChild(liteYt);
        imageContainer.appendChild(videoContainer);
      } else {
        // Create image element
        const img = document.createElement('img');
        img.src = project.imageSrc;
        img.alt = project.data.title;
        img.loading = 'lazy';
        img.className = 'w-full h-full object-cover absolute inset-0';
        imageContainer.appendChild(img);
      }
      
      article.appendChild(imageContainer);
      
      // Create title link
      const titleLink = document.createElement('a');
      titleLink.href = project.url;
      titleLink.className = 'group block';
      
      const title = document.createElement('h2');
      title.className = 'text-2xl/6 font-bold mb-2 text-black transition-colors group-hover:text-blue-600';
      title.textContent = project.data.title;
      
      titleLink.appendChild(title);
      article.appendChild(titleLink);
      
      // Add description if exists
      if (project.data.description) {
        const descDiv = document.createElement('div');
        descDiv.className = 'text-lg leading-snug';
        const descP = document.createElement('p');
        descP.textContent = project.data.description;
        descDiv.appendChild(descP);
        article.appendChild(descDiv);
      }
      
      // Add tags if they exist
      if (project.data.tags && project.data.tags.length > 0) {
        const tagsContainer = document.createElement('div');
        tagsContainer.className = 'mt-2 flex flex-wrap gap-1';
        
        project.data.tags.forEach(tag => {
          // Format tag for display (capitalize, replace hyphens with spaces)
          const formattedTag = tag
            .split('-')
            .map(word => word.charAt(0).toUpperCase() + word.slice(1))
            .join(' ');
            
          const tagBtn = document.createElement('button');
          tagBtn.className = 'tag-chip text-xs px-2 py-1 bg-neutral-100 hover:bg-blue-100 rounded-md text-neutral-700 hover:text-blue-800 transition-colors font-medium';
          tagBtn.textContent = formattedTag;
          tagBtn.dataset.tag = tag;
          tagsContainer.appendChild(tagBtn);
        });
        
        article.appendChild(tagsContainer);
      }
      
      // Add press mentions if they exist
      if (project.data.press && project.data.press.length > 0) {
        const pressContainer = document.createElement('div');
        pressContainer.className = 'mt-2 text-xs text-neutral-600 leading-tight';
        
        project.data.press.forEach((press, i) => {
          const pressSpan = document.createElement('span');
          
          if (press.article_link) {
            const pressLink = document.createElement('a');
            pressLink.href = press.article_link;
            pressLink.target = '_blank';
            pressLink.rel = 'noopener noreferrer';
            pressLink.className = 'hover:text-blue-600 transition-colors';
            pressLink.textContent = press.name;
            pressSpan.appendChild(pressLink);
          } else {
            pressSpan.textContent = press.name;
          }
          
          // Add comma if not the last item
          if (i < project.data.press.length - 1) {
            pressSpan.appendChild(document.createTextNode(', '));
          }
          
          pressContainer.appendChild(pressSpan);
        });
        
        article.appendChild(pressContainer);
      }
      
      fragment.appendChild(article);
      projectEl.appendChild(fragment);
      grid.appendChild(projectEl);
    });
    
    // Update URL with current state
    updateUrl();
  }
  
  function updateUrl() {
    let url = new URL(window.location);
    
    // Update tag parameter
    if (activeTag) {
      url.searchParams.set('tag', activeTag);
    } else {
      url.searchParams.delete('tag');
    }
    
    // Update page hash
    url.hash = `page=${currentPage}`;
    
    // Replace current history state without reload
    window.history.replaceState({}, '', url);
  }
  
  function updateActiveTag() {
    // Reset all tag appearances (including the "All" tag)
    document.querySelectorAll('.tag-chip, .all-tag-chip').forEach(chip => {
      chip.classList.remove('bg-blue-600', 'text-white');
      chip.classList.add('bg-neutral-100', 'text-neutral-700');
    });
    
    // Highlight the active tag
    if (activeTag) {
      const activeChip = document.querySelector(`.tag-chip[data-tag="${activeTag}"]`);
      if (activeChip) {
        activeChip.classList.remove('bg-neutral-100', 'text-neutral-700');
        activeChip.classList.add('bg-blue-600', 'text-white');
      }
    } else {
      // If no tag is active, highlight the "All" tag
      const allTagChip = document.querySelector('[data-is-all="true"]');
      if (allTagChip) {
        allTagChip.classList.remove('bg-neutral-100', 'text-neutral-700');
        allTagChip.classList.add('bg-blue-600', 'text-white');
      }
    }
  }
  
  function updateLoadMoreVisibility() {
    const loadMoreContainer = document.getElementById('load-more-container');
    if (!loadMoreContainer) return;
    
    const filteredProjects = getFilteredProjects();
    if (currentPage * PROJECTS_PER_PAGE >= filteredProjects.length) {
      loadMoreContainer.classList.add('hidden');
      reachedEnd = true;
    } else {
      loadMoreContainer.classList.remove('hidden');
      reachedEnd = false;
    }
  }
  
  // Clear the tag filter
  function clearTagFilter() {
    activeTag = '';
    currentPage = 1;
    updateActiveTag();
    renderProjects();
    updateLoadMoreVisibility();
  }
  
  // Load more projects function
  function loadMoreProjects() {
    if (isLoading || reachedEnd) return;
    
    isLoading = true;
    currentPage++;
    renderProjects(true); // Append mode
    updateLoadMoreVisibility();
    isLoading = false;
  }
  
  // Set up infinite scroll using Intersection Observer
  function setupInfiniteScroll() {
    const loadMoreContainer = document.getElementById('load-more-container');
    if (!loadMoreContainer) return;
    
    // Create the observer
    const observer = new IntersectionObserver(
      (entries) => {
        // If load more button is in view and we're not already loading
        if (entries[0].isIntersecting && !isLoading && !reachedEnd) {
          loadMoreProjects();
        }
      },
      { threshold: 0.5 } // Trigger when 50% visible
    );
    
    // Start observing the load more button
    observer.observe(loadMoreContainer);
  }
  
  // Event delegation for tag clicks
  document.addEventListener('click', (e) => {
    const target = e.target;
    
    // Handle tag clicks
    if (target.classList.contains('tag-chip') || target.closest('.tag-chip')) {
      e.preventDefault();
      const tagElement = target.classList.contains('tag-chip') ? target : target.closest('.tag-chip');
      const tag = tagElement.dataset.tag;
      
      if (tag) {
        // Set active tag
        activeTag = tag;
        
        // Reset to first page when changing tags
        currentPage = 1;
        
        updateActiveTag();
        renderProjects();
        updateLoadMoreVisibility();
      }
    }
    
    // Handle "All" tag click
    if (target.classList.contains('all-tag-chip') || target.closest('.all-tag-chip')) {
      e.preventDefault();
      clearTagFilter();
    }
  });
  
  // Load more button event handler (as fallback)
  const loadMoreBtn = document.getElementById('load-more');
  if (loadMoreBtn) {
    loadMoreBtn.addEventListener('click', loadMoreProjects);
  }
  
  // Initialize the page
  document.addEventListener('DOMContentLoaded', initializePage);
</script>

<style>
  /* Apply rounded corners to the lite-youtube element */
  :global(lite-youtube) {
    border-radius: 0.5rem;
    overflow: hidden;
  }
</style>