---
import SimplePage from "../layouts/SimplePage.astro";
import { getCollection } from "astro:content";

const pressEntries = await getCollection("press");

// Parse created date and sort by most recent
const sortedEntries = pressEntries
    .map((entry) => {
        // Parse the created date string "2025-07-07T15:36:17 (UTC +01:00)" or use current date as fallback
        let parsedDate = new Date();
        if (entry.data.created) {
            const dateMatch = entry.data.created.match(
                /(\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2})/,
            );
            parsedDate = dateMatch ? new Date(dateMatch[1]) : new Date();
        }

        // Extract clean domain name from source URL
        let cleanDomain = "";
        if (entry.data.source) {
            try {
                const url = new URL(entry.data.source);
                cleanDomain = url.hostname
                    .replace(/^www\./, "") // Remove www.
                    .replace(/^m\./, ""); // Remove m. (mobile)
            } catch (e) {
                cleanDomain = entry.data.source;
            }
        }

        return {
            ...entry,
            parsedDate,
            cleanDomain,
            slug: entry.id.replace(/\.md$/, ""),
            title:
                entry.body
                    ?.split("\n")
                    .find((line: string) => line.startsWith("# "))
                    ?.replace("# ", "") || entry.id.replace(/\.md$/, ""),
        };
    })
    .sort((a, b) => b.parsedDate.getTime() - a.parsedDate.getTime());
---

<SimplePage title="Press Archive">
    <div class="prose prose-lg prose-blue mx-auto">
        <p class="text-neutral-600 text-lg leading-relaxed mb-8">
            An archive of press coverage and articles mentioning my work,
            preserved for posterity.
        </p>

        <ul class="not-prose list-none p-0 m-0">
            {
                sortedEntries.map((entry) => (
                    <li class="mb-10">
                        <a
                            href={`/press/${entry.slug}`}
                            class="block text-2xl font-bold text-black hover:text-blue-700 leading-tight mb-1 no-underline"
                        >
                            {entry.title}
                        </a>
                        <div class="flex flex-wrap items-center gap-2 text-base text-gray-600 mt-1">
                            {entry.cleanDomain && (
                                <a
                                    href={entry.data.source}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    class="text-blue-700 hover:text-blue-900 underline font-medium"
                                >
                                    {entry.cleanDomain}
                                </a>
                            )}
                            {entry.cleanDomain && (
                                <span class="text-gray-400">•</span>
                            )}
                            <time>
                                {entry.parsedDate.toLocaleDateString("en-US", {
                                    year: "numeric",
                                    month: "long",
                                    day: "numeric",
                                })}
                            </time>
                            {entry.data.author && entry.data.author.trim() && (
                                <>
                                    <span class="text-gray-400">•</span>
                                    <span>
                                        {entry.data.author
                                            .split("\n")[0]
                                            .trim()}
                                    </span>
                                </>
                            )}
                        </div>
                    </li>
                ))
            }
        </ul>
    </div>
</SimplePage>
