---
import Layout from './Layout.astro';
import { getCollection } from 'astro:content';

interface Props {
  title: string;
  description?: string;
  activeTag?: string | null;
}

const { title, description, activeTag = null } = Astro.props;

// Get all projects and extract tags
const allProjects = await getCollection('blog');
const allTags = [...new Set(allProjects.flatMap(project => project.data.tags || []))].sort();

// Generate IDs for transition elements
const projectsContainerId = "projects-container";

// Get current URL path
const currentPath = Astro.url.pathname;
---

<Layout title={title} description={description}>
  <div class="container mx-auto px-0">
    <!-- Tag navigation - persist to maintain state during transitions -->
    <div class="mb-8" transition:persist="tag-navigation">  
      <h1 class="text-3xl font-bold mb-4 text-black">Projects</h1>
      
      <div class="mt-4">
        <div class="flex flex-wrap gap-2 items-center">
          <!-- "All" tag that links to the main blog page -->
          <a href="/blog" 
             class={`px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${
               currentPath === "/blog" 
               ? 'bg-blue-600 text-white hover:bg-blue-700' 
               : 'bg-neutral-100 text-neutral-700 hover:bg-blue-200'
             }`}
             data-active={currentPath === "/blog" ? "true" : "false"}
             data-astro-prefetch>
            All
          </a>
          
          {allTags.map(tag => {
            // Format tag for display
            const formattedTag = tag
              .split('-')
              .map(word => word.charAt(0).toUpperCase() + word.slice(1))
              .join(' ');
              
            const tagPath = `/tags/${tag}`;
            const isActive = currentPath === tagPath || activeTag === tag;
            
            return (
              <a 
                href={tagPath}
                class={`px-3 py-1.5 rounded-md text-sm font-medium transition-colors ${
                  isActive 
                  ? 'bg-blue-600 text-white hover:bg-blue-700' 
                  : 'bg-neutral-100 text-neutral-700 hover:bg-blue-200'
                }`}
                data-active={isActive ? "true" : "false"}
                data-tag={tag}
                data-astro-prefetch
              >
                {formattedTag}
              </a>
            );
          })}
        </div>
      </div>
    </div>
    
    <!-- Projects container -->
    <div id={projectsContainerId}>
      <slot />
    </div>
  </div>
</Layout>

<style>
  /* Apply rounded corners to the lite-youtube element */
  :global(lite-youtube) {
    border-radius: 0.5rem;
    overflow: hidden;
  }

  /* Animation for project items */
  :global(.project-item) {
    opacity: 0;
    animation: projectFadeIn 0.4s ease-out forwards;
  }
  
  @keyframes projectFadeIn {
    from {
      opacity: 0;
    }
    to {
      opacity: 1;
    }
  }
</style>

<script>
  // Script to ensure tag navigation maintains state during transitions
  document.addEventListener('astro:page-load', () => {
    const currentPath = window.location.pathname;
    
    // Update all tag chips based on the current URL
    document.querySelectorAll('[data-active]').forEach(link => {
      if (link instanceof HTMLAnchorElement) {
        const href = link.getAttribute('href');
        const isActive = href === currentPath;
          
        // Set data-active attribute
        link.setAttribute('data-active', isActive ? 'true' : 'false');
        
        // Update classes
        if (isActive) {
          link.classList.add('bg-blue-600', 'text-white', 'hover:bg-blue-700');
          link.classList.remove('bg-neutral-100', 'text-neutral-700', 'hover:bg-blue-200');
        } else {
          link.classList.remove('bg-blue-600', 'text-white', 'hover:bg-blue-700');
          link.classList.add('bg-neutral-100', 'text-neutral-700', 'hover:bg-blue-200');
        }
      }
    });
  });
</script>