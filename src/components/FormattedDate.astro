---
interface Props {
	date: Date | string;
  format?: string;
}

const { date, format } = Astro.props;
let dateObj;

try {
  // Handle different date formats
  if (date instanceof Date) {
    dateObj = date;
  } else if (typeof date === 'string') {
    // Try to parse the date string
    dateObj = new Date(date);
    
    // Check if the date is valid
    if (isNaN(dateObj.getTime())) {
      // If parsing fails, try different formats
      // Try DD-MM-YYYY format
      const parts = date.split(/[-/]/);
      if (parts.length === 3) {
        const year = parseInt(parts[2]);
        const month = parseInt(parts[1]) - 1;
        const day = parseInt(parts[0]);
        dateObj = new Date(year, month, day);
      }
    }
  }

  // If the date is still invalid, use today's date
  if (!dateObj || isNaN(dateObj.getTime())) {
    console.warn(`Invalid date: ${date}. Using current date instead.`);
    dateObj = new Date();
  }
} catch (error) {
  console.error(`Error parsing date: ${error}`);
  dateObj = new Date(); // Fallback to current date
}

// Format the date according to the specified format
function formatDate(date: Date, formatStr?: string): string {
  if (!formatStr) {
    return date.toLocaleDateString('en-us', {
      year: 'numeric',
      month: 'short',
      day: 'numeric',
    });
  }

  // Custom format string handling
  const options: Intl.DateTimeFormatOptions = {};
  
  if (formatStr.includes('YYYY')) options.year = 'numeric';
  if (formatStr.includes('YY')) options.year = '2-digit';
  
  if (formatStr.includes('MMMM')) options.month = 'long';
  if (formatStr.includes('MMM')) options.month = 'short';
  if (formatStr.includes('MM')) options.month = '2-digit';
  
  if (formatStr.includes('DD')) options.day = '2-digit';
  if (formatStr.includes('D')) options.day = 'numeric';

  return date.toLocaleDateString('en-us', options);
}

const formattedDate = formatDate(dateObj, format);
---

<time datetime={dateObj.toISOString()}>
	{formattedDate}
</time>
