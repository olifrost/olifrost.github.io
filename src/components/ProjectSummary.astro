---
import { type CollectionEntry } from 'astro:content';
import { YouTube } from 'astro-embed';
import { getBlogUrl } from '../utils/urls';
import { Image } from 'astro:assets'; // Add this import
import OptimizedYouTube from '@components/OptimizedYouTube.astro';

interface PressItem {
  name: string;
  article_link?: string;
}

interface Props {
  project: CollectionEntry<'blog'>;
  showDescription?: boolean;
  showPress?: boolean;
}

const { project, showDescription = true, showPress = true } = Astro.props;
const { data } = project;
const hasVideo = data.video !== undefined && data.video !== '';
const pressItems = (data.press || []) as PressItem[];
const projectUrl = getBlogUrl(project.id);
---

<article class="w-full mb-3">
  <!-- Do not wrap the video in the anchor tag -->
  <div class="w-full overflow-hidden rounded-lg mb-2 transition-shadow group-hover:shadow-lg aspect-video relative">
    {hasVideo ? (
      <OptimizedYouTube 
        id={data.video || ''} 
        poster={data.image}
        class="rounded-lg"
      />
    ) : (
      <Image 
        src={data.image}
        alt={data.title}
        width={800}
        height={450}
        class="w-full h-full object-cover absolute inset-0 transition-transform duration-300 group-hover:scale-[1.02]"
      />
    )}
  </div>
  <a href={projectUrl} class="group block">
    <h2 class="text-2xl/6 font-bold mb-2 text-black transition-colors group-hover:text-blue-600">
      {data.title}
    </h2>
  </a>
  
  {showDescription && data.description && (
    <div class="text-lg leading-snug">
      <p>{data.description}</p>
    </div>
  )}
  
  {showPress && pressItems.length > 0 && (
    <div class="mt-2 text-xs text-neutral-600 leading-tight">
      {pressItems.map((pressItem, i) => (
        <span>
          {pressItem.article_link ? (
            <a 
              href={pressItem.article_link} 
              target="_blank" 
              rel="noopener noreferrer" 
              class="hover:text-blue-600 transition-colors"
            >
              {pressItem.name}{i < pressItems.length - 1 ? ', ' : ''}
            </a>
          ) : (
            <span>
              {pressItem.name}{i < pressItems.length - 1 ? ', ' : ''}
            </span>
          )}
        </span>
      ))}
    </div>
  )}
</article>

<style>
  /* Apply rounded corners to the lite-youtube element */
  :global(lite-youtube) {
    border-radius: 0.5rem;
    overflow: hidden;
  }
</style>
