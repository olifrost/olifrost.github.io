---
import { YouTube } from 'astro-embed';

interface PressItem {
  name: string;
  article_link?: string;
}

interface Props {
  project: {
    title: string;
    description?: string;
    image?: string;
    video?: string;
    link?: string;
    press?: PressItem[];
  };
  showDescription?: boolean;
  showPress?: boolean;
}

const { project, showDescription = true, showPress = true } = Astro.props;
const hasVideo = project.video !== undefined && project.video !== '';
const pressItems = (project.press || []) as PressItem[];
---

<article class="w-full mb-6">
  {hasVideo ? (
    <div>
      <div class="w-full overflow-hidden rounded-lg mb-4 transition-shadow hover:shadow-lg aspect-video relative">
        <OptimizedYouTube 
          id={project.video || ''} 
          poster={project.image}
          class="rounded-lg"
        />
        <style>
          /* Apply rounded corners to the lite-youtube element */
          :global(lite-youtube) {
            border-radius: 0.5rem;
            overflow: hidden;
          }
        </style>
      </div>
      <div class="block group">
        <h2 class="text-2xl font-bold mb-2 text-black">
          {project.link ? (
            <a href={project.link} target="_blank" rel="noopener noreferrer" class="hover:text-blue-600 transition-colors">
              {project.title}
            </a>
          ) : (
            project.title
          )}
        </h2>
      </div>
    </div>
  ) : (
    <div class="block group">
      {project.image && (
        <div class="w-full overflow-hidden rounded-lg mb-4 transition-shadow group-hover:shadow-lg aspect-video relative">
          <img 
            src={project.image} 
            alt={project.title}
            class="w-full h-full object-cover absolute inset-0 transition-transform duration-300 group-hover:scale-[1.02]"
          />
        </div>
      )}
      <h2 class="text-2xl font-bold mb-2 text-black">
        {project.link ? (
          <a href={project.link} target="_blank" rel="noopener noreferrer" class="hover:text-blue-600 transition-colors">
            {project.title}
          </a>
        ) : (
          project.title
        )}
      </h2>
    </div>
  )}
  
  {showDescription && project.description && (
    <div class="text-lg leading-snug">
      <p>{project.description}</p>
    </div>
  )}
  
  {showPress && pressItems.length > 0 && (
    <div class="mt-2 text-xs leading-tight">
      
      {pressItems.map((pressItem, i) => (
        <span>
          {pressItem.article_link ? (
            <a 
              href={pressItem.article_link} 
              target="_blank" 
              rel="noopener noreferrer" 
              class="hover:text-blue-600 transition-colors"
            >
              {pressItem.name}
            </a>
          ) : (
            <span>{pressItem.name}</span>
          )}
          {i < pressItems.length - 1 && 
            <span>, </span>
          }
        </span>
      ))}
    </div>
  )}
</article>
