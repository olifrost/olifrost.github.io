/**
 * GENERATED CODE - DO NOT MODIFY
 */
import { Lexicons } from '@atproto/lexicon';
export declare const schemaDict: {
    readonly ComAtprotoAdminDefs: {
        readonly lexicon: 1;
        readonly id: "com.atproto.admin.defs";
        readonly defs: {
            readonly statusAttr: {
                readonly type: "object";
                readonly required: ["applied"];
                readonly properties: {
                    readonly applied: {
                        readonly type: "boolean";
                    };
                    readonly ref: {
                        readonly type: "string";
                    };
                };
            };
            readonly accountView: {
                readonly type: "object";
                readonly required: ["did", "handle", "indexedAt"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly handle: {
                        readonly type: "string";
                        readonly format: "handle";
                    };
                    readonly email: {
                        readonly type: "string";
                    };
                    readonly relatedRecords: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "unknown";
                        };
                    };
                    readonly indexedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly invitedBy: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.server.defs#inviteCode";
                    };
                    readonly invites: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.server.defs#inviteCode";
                        };
                    };
                    readonly invitesDisabled: {
                        readonly type: "boolean";
                    };
                    readonly emailConfirmedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly inviteNote: {
                        readonly type: "string";
                    };
                    readonly deactivatedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly threatSignatures: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.admin.defs#threatSignature";
                        };
                    };
                };
            };
            readonly repoRef: {
                readonly type: "object";
                readonly required: ["did"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                };
            };
            readonly repoBlobRef: {
                readonly type: "object";
                readonly required: ["did", "cid"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly recordUri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                };
            };
            readonly threatSignature: {
                readonly type: "object";
                readonly required: ["property", "value"];
                readonly properties: {
                    readonly property: {
                        readonly type: "string";
                    };
                    readonly value: {
                        readonly type: "string";
                    };
                };
            };
        };
    };
    readonly ComAtprotoAdminDeleteAccount: {
        readonly lexicon: 1;
        readonly id: "com.atproto.admin.deleteAccount";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Delete a user account as an administrator.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["did"];
                        readonly properties: {
                            readonly did: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoAdminDisableAccountInvites: {
        readonly lexicon: 1;
        readonly id: "com.atproto.admin.disableAccountInvites";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Disable an account from receiving new invite codes, but does not invalidate existing codes.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["account"];
                        readonly properties: {
                            readonly account: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                            readonly note: {
                                readonly type: "string";
                                readonly description: "Optional reason for disabled invites.";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoAdminDisableInviteCodes: {
        readonly lexicon: 1;
        readonly id: "com.atproto.admin.disableInviteCodes";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Disable some set of codes and/or all codes associated with a set of users.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly properties: {
                            readonly codes: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly accounts: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoAdminEnableAccountInvites: {
        readonly lexicon: 1;
        readonly id: "com.atproto.admin.enableAccountInvites";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Re-enable an account's ability to receive invite codes.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["account"];
                        readonly properties: {
                            readonly account: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                            readonly note: {
                                readonly type: "string";
                                readonly description: "Optional reason for enabled invites.";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoAdminGetAccountInfo: {
        readonly lexicon: 1;
        readonly id: "com.atproto.admin.getAccountInfo";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get details about an account.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["did"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.admin.defs#accountView";
                    };
                };
            };
        };
    };
    readonly ComAtprotoAdminGetAccountInfos: {
        readonly lexicon: 1;
        readonly id: "com.atproto.admin.getAccountInfos";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get details about some accounts.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["dids"];
                    readonly properties: {
                        readonly dids: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["infos"];
                        readonly properties: {
                            readonly infos: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:com.atproto.admin.defs#accountView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoAdminGetInviteCodes: {
        readonly lexicon: 1;
        readonly id: "com.atproto.admin.getInviteCodes";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get an admin view of invite codes.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly sort: {
                            readonly type: "string";
                            readonly knownValues: ["recent", "usage"];
                            readonly default: "recent";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 500;
                            readonly default: 100;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["codes"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly codes: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:com.atproto.server.defs#inviteCode";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoAdminGetSubjectStatus: {
        readonly lexicon: 1;
        readonly id: "com.atproto.admin.getSubjectStatus";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get the service-specific admin status of a subject (account, record, or blob).";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly uri: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                        readonly blob: {
                            readonly type: "string";
                            readonly format: "cid";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["subject"];
                        readonly properties: {
                            readonly subject: {
                                readonly type: "union";
                                readonly refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef", "lex:com.atproto.admin.defs#repoBlobRef"];
                            };
                            readonly takedown: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.admin.defs#statusAttr";
                            };
                            readonly deactivated: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.admin.defs#statusAttr";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoAdminSearchAccounts: {
        readonly lexicon: 1;
        readonly id: "com.atproto.admin.searchAccounts";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get list of accounts that matches your search query.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["accounts"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly accounts: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:com.atproto.admin.defs#accountView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoAdminSendEmail: {
        readonly lexicon: 1;
        readonly id: "com.atproto.admin.sendEmail";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Send email to a user's account email address.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["recipientDid", "content", "senderDid"];
                        readonly properties: {
                            readonly recipientDid: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                            readonly content: {
                                readonly type: "string";
                            };
                            readonly subject: {
                                readonly type: "string";
                            };
                            readonly senderDid: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                            readonly comment: {
                                readonly type: "string";
                                readonly description: "Additional comment by the sender that won't be used in the email itself but helpful to provide more context for moderators/reviewers";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["sent"];
                        readonly properties: {
                            readonly sent: {
                                readonly type: "boolean";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoAdminUpdateAccountEmail: {
        readonly lexicon: 1;
        readonly id: "com.atproto.admin.updateAccountEmail";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Administrative action to update an account's email.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["account", "email"];
                        readonly properties: {
                            readonly account: {
                                readonly type: "string";
                                readonly format: "at-identifier";
                                readonly description: "The handle or DID of the repo.";
                            };
                            readonly email: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoAdminUpdateAccountHandle: {
        readonly lexicon: 1;
        readonly id: "com.atproto.admin.updateAccountHandle";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Administrative action to update an account's handle.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["did", "handle"];
                        readonly properties: {
                            readonly did: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                            readonly handle: {
                                readonly type: "string";
                                readonly format: "handle";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoAdminUpdateAccountPassword: {
        readonly lexicon: 1;
        readonly id: "com.atproto.admin.updateAccountPassword";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Update the password for a user account as an administrator.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["did", "password"];
                        readonly properties: {
                            readonly did: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                            readonly password: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoAdminUpdateSubjectStatus: {
        readonly lexicon: 1;
        readonly id: "com.atproto.admin.updateSubjectStatus";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Update the service-specific admin status of a subject (account, record, or blob).";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["subject"];
                        readonly properties: {
                            readonly subject: {
                                readonly type: "union";
                                readonly refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef", "lex:com.atproto.admin.defs#repoBlobRef"];
                            };
                            readonly takedown: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.admin.defs#statusAttr";
                            };
                            readonly deactivated: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.admin.defs#statusAttr";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["subject"];
                        readonly properties: {
                            readonly subject: {
                                readonly type: "union";
                                readonly refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef", "lex:com.atproto.admin.defs#repoBlobRef"];
                            };
                            readonly takedown: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.admin.defs#statusAttr";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoIdentityGetRecommendedDidCredentials: {
        readonly lexicon: 1;
        readonly id: "com.atproto.identity.getRecommendedDidCredentials";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Describe the credentials that should be included in the DID doc of an account that is migrating to this service.";
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly properties: {
                            readonly rotationKeys: {
                                readonly description: "Recommended rotation keys for PLC dids. Should be undefined (or ignored) for did:webs.";
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly alsoKnownAs: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly verificationMethods: {
                                readonly type: "unknown";
                            };
                            readonly services: {
                                readonly type: "unknown";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoIdentityRequestPlcOperationSignature: {
        readonly lexicon: 1;
        readonly id: "com.atproto.identity.requestPlcOperationSignature";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Request an email with a code to in order to request a signed PLC operation. Requires Auth.";
            };
        };
    };
    readonly ComAtprotoIdentityResolveHandle: {
        readonly lexicon: 1;
        readonly id: "com.atproto.identity.resolveHandle";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Resolves a handle (domain name) to a DID.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["handle"];
                    readonly properties: {
                        readonly handle: {
                            readonly type: "string";
                            readonly format: "handle";
                            readonly description: "The handle to resolve.";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["did"];
                        readonly properties: {
                            readonly did: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoIdentitySignPlcOperation: {
        readonly lexicon: 1;
        readonly id: "com.atproto.identity.signPlcOperation";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Signs a PLC operation to update some value(s) in the requesting DID's document.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly properties: {
                            readonly token: {
                                readonly description: "A token received through com.atproto.identity.requestPlcOperationSignature";
                                readonly type: "string";
                            };
                            readonly rotationKeys: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly alsoKnownAs: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly verificationMethods: {
                                readonly type: "unknown";
                            };
                            readonly services: {
                                readonly type: "unknown";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["operation"];
                        readonly properties: {
                            readonly operation: {
                                readonly type: "unknown";
                                readonly description: "A signed DID PLC operation.";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoIdentitySubmitPlcOperation: {
        readonly lexicon: 1;
        readonly id: "com.atproto.identity.submitPlcOperation";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Validates a PLC operation to ensure that it doesn't violate a service's constraints or get the identity into a bad state, then submits it to the PLC registry";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["operation"];
                        readonly properties: {
                            readonly operation: {
                                readonly type: "unknown";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoIdentityUpdateHandle: {
        readonly lexicon: 1;
        readonly id: "com.atproto.identity.updateHandle";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Updates the current account's handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["handle"];
                        readonly properties: {
                            readonly handle: {
                                readonly type: "string";
                                readonly format: "handle";
                                readonly description: "The new handle.";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoLabelDefs: {
        readonly lexicon: 1;
        readonly id: "com.atproto.label.defs";
        readonly defs: {
            readonly label: {
                readonly type: "object";
                readonly description: "Metadata tag on an atproto resource (eg, repo or record).";
                readonly required: ["src", "uri", "val", "cts"];
                readonly properties: {
                    readonly ver: {
                        readonly type: "integer";
                        readonly description: "The AT Protocol version of the label object.";
                    };
                    readonly src: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "DID of the actor who created this label.";
                    };
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "uri";
                        readonly description: "AT URI of the record, repository (account), or other resource that this label applies to.";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                        readonly description: "Optionally, CID specifying the specific version of 'uri' resource this label applies to.";
                    };
                    readonly val: {
                        readonly type: "string";
                        readonly maxLength: 128;
                        readonly description: "The short string name of the value or type of this label.";
                    };
                    readonly neg: {
                        readonly type: "boolean";
                        readonly description: "If true, this is a negation label, overwriting a previous label.";
                    };
                    readonly cts: {
                        readonly type: "string";
                        readonly format: "datetime";
                        readonly description: "Timestamp when this label was created.";
                    };
                    readonly exp: {
                        readonly type: "string";
                        readonly format: "datetime";
                        readonly description: "Timestamp at which this label expires (no longer applies).";
                    };
                    readonly sig: {
                        readonly type: "bytes";
                        readonly description: "Signature of dag-cbor encoded label.";
                    };
                };
            };
            readonly selfLabels: {
                readonly type: "object";
                readonly description: "Metadata tags on an atproto record, published by the author within the record.";
                readonly required: ["values"];
                readonly properties: {
                    readonly values: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#selfLabel";
                        };
                        readonly maxLength: 10;
                    };
                };
            };
            readonly selfLabel: {
                readonly type: "object";
                readonly description: "Metadata tag on an atproto record, published by the author within the record. Note that schemas should use #selfLabels, not #selfLabel.";
                readonly required: ["val"];
                readonly properties: {
                    readonly val: {
                        readonly type: "string";
                        readonly maxLength: 128;
                        readonly description: "The short string name of the value or type of this label.";
                    };
                };
            };
            readonly labelValueDefinition: {
                readonly type: "object";
                readonly description: "Declares a label value and its expected interpretations and behaviors.";
                readonly required: ["identifier", "severity", "blurs", "locales"];
                readonly properties: {
                    readonly identifier: {
                        readonly type: "string";
                        readonly description: "The value of the label being defined. Must only include lowercase ascii and the '-' character ([a-z-]+).";
                        readonly maxLength: 100;
                        readonly maxGraphemes: 100;
                    };
                    readonly severity: {
                        readonly type: "string";
                        readonly description: "How should a client visually convey this label? 'inform' means neutral and informational; 'alert' means negative and warning; 'none' means show nothing.";
                        readonly knownValues: ["inform", "alert", "none"];
                    };
                    readonly blurs: {
                        readonly type: "string";
                        readonly description: "What should this label hide in the UI, if applied? 'content' hides all of the target; 'media' hides the images/video/audio; 'none' hides nothing.";
                        readonly knownValues: ["content", "media", "none"];
                    };
                    readonly defaultSetting: {
                        readonly type: "string";
                        readonly description: "The default setting for this label.";
                        readonly knownValues: ["ignore", "warn", "hide"];
                        readonly default: "warn";
                    };
                    readonly adultOnly: {
                        readonly type: "boolean";
                        readonly description: "Does the user need to have adult content enabled in order to configure this label?";
                    };
                    readonly locales: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#labelValueDefinitionStrings";
                        };
                    };
                };
            };
            readonly labelValueDefinitionStrings: {
                readonly type: "object";
                readonly description: "Strings which describe the label in the UI, localized into a specific language.";
                readonly required: ["lang", "name", "description"];
                readonly properties: {
                    readonly lang: {
                        readonly type: "string";
                        readonly description: "The code of the language these strings are written in.";
                        readonly format: "language";
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "A short human-readable name for the label.";
                        readonly maxGraphemes: 64;
                        readonly maxLength: 640;
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly description: "A longer description of what the label means and why it might be applied.";
                        readonly maxGraphemes: 10000;
                        readonly maxLength: 100000;
                    };
                };
            };
            readonly labelValue: {
                readonly type: "string";
                readonly knownValues: ["!hide", "!no-promote", "!warn", "!no-unauthenticated", "dmca-violation", "doxxing", "porn", "sexual", "nudity", "nsfl", "gore"];
            };
        };
    };
    readonly ComAtprotoLabelQueryLabels: {
        readonly lexicon: 1;
        readonly id: "com.atproto.label.queryLabels";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Find labels relevant to the provided AT-URI patterns. Public endpoint for moderation services, though may return different or additional results with auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["uriPatterns"];
                    readonly properties: {
                        readonly uriPatterns: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI.";
                        };
                        readonly sources: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                            readonly description: "Optional list of label sources (DIDs) to filter on.";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 250;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["labels"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly labels: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:com.atproto.label.defs#label";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoLabelSubscribeLabels: {
        readonly lexicon: 1;
        readonly id: "com.atproto.label.subscribeLabels";
        readonly defs: {
            readonly main: {
                readonly type: "subscription";
                readonly description: "Subscribe to stream of labels (and negations). Public endpoint implemented by mod services. Uses same sequencing scheme as repo event stream.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "integer";
                            readonly description: "The last known event seq number to backfill from.";
                        };
                    };
                };
                readonly message: {
                    readonly schema: {
                        readonly type: "union";
                        readonly refs: ["lex:com.atproto.label.subscribeLabels#labels", "lex:com.atproto.label.subscribeLabels#info"];
                    };
                };
                readonly errors: [{
                    readonly name: "FutureCursor";
                }];
            };
            readonly labels: {
                readonly type: "object";
                readonly required: ["seq", "labels"];
                readonly properties: {
                    readonly seq: {
                        readonly type: "integer";
                    };
                    readonly labels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#label";
                        };
                    };
                };
            };
            readonly info: {
                readonly type: "object";
                readonly required: ["name"];
                readonly properties: {
                    readonly name: {
                        readonly type: "string";
                        readonly knownValues: ["OutdatedCursor"];
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                };
            };
        };
    };
    readonly ComAtprotoLexiconSchema: {
        readonly lexicon: 1;
        readonly id: "com.atproto.lexicon.schema";
        readonly defs: {
            readonly main: {
                readonly type: "record";
                readonly description: "Representation of Lexicon schemas themselves, when published as atproto records. Note that the schema language is not defined in Lexicon; this meta schema currently only includes a single version field ('lexicon'). See the atproto specifications for description of the other expected top-level fields ('id', 'defs', etc).";
                readonly key: "nsid";
                readonly record: {
                    readonly type: "object";
                    readonly required: ["lexicon"];
                    readonly properties: {
                        readonly lexicon: {
                            readonly type: "integer";
                            readonly description: "Indicates the 'version' of the Lexicon language. Must be '1' for the current atproto/Lexicon schema system.";
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoModerationCreateReport: {
        readonly lexicon: 1;
        readonly id: "com.atproto.moderation.createReport";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Submit a moderation report regarding an atproto account or record. Implemented by moderation services (with PDS proxying), and requires auth.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["reasonType", "subject"];
                        readonly properties: {
                            readonly reasonType: {
                                readonly type: "ref";
                                readonly description: "Indicates the broad category of violation the report is for.";
                                readonly ref: "lex:com.atproto.moderation.defs#reasonType";
                            };
                            readonly reason: {
                                readonly type: "string";
                                readonly maxGraphemes: 2000;
                                readonly maxLength: 20000;
                                readonly description: "Additional context about the content and violation.";
                            };
                            readonly subject: {
                                readonly type: "union";
                                readonly refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef"];
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["id", "reasonType", "subject", "reportedBy", "createdAt"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "integer";
                            };
                            readonly reasonType: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.moderation.defs#reasonType";
                            };
                            readonly reason: {
                                readonly type: "string";
                                readonly maxGraphemes: 2000;
                                readonly maxLength: 20000;
                            };
                            readonly subject: {
                                readonly type: "union";
                                readonly refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef"];
                            };
                            readonly reportedBy: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                            readonly createdAt: {
                                readonly type: "string";
                                readonly format: "datetime";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoModerationDefs: {
        readonly lexicon: 1;
        readonly id: "com.atproto.moderation.defs";
        readonly defs: {
            readonly reasonType: {
                readonly type: "string";
                readonly knownValues: ["com.atproto.moderation.defs#reasonSpam", "com.atproto.moderation.defs#reasonViolation", "com.atproto.moderation.defs#reasonMisleading", "com.atproto.moderation.defs#reasonSexual", "com.atproto.moderation.defs#reasonRude", "com.atproto.moderation.defs#reasonOther", "com.atproto.moderation.defs#reasonAppeal"];
            };
            readonly reasonSpam: {
                readonly type: "token";
                readonly description: "Spam: frequent unwanted promotion, replies, mentions";
            };
            readonly reasonViolation: {
                readonly type: "token";
                readonly description: "Direct violation of server rules, laws, terms of service";
            };
            readonly reasonMisleading: {
                readonly type: "token";
                readonly description: "Misleading identity, affiliation, or content";
            };
            readonly reasonSexual: {
                readonly type: "token";
                readonly description: "Unwanted or mislabeled sexual content";
            };
            readonly reasonRude: {
                readonly type: "token";
                readonly description: "Rude, harassing, explicit, or otherwise unwelcoming behavior";
            };
            readonly reasonOther: {
                readonly type: "token";
                readonly description: "Other: reports not falling under another report category";
            };
            readonly reasonAppeal: {
                readonly type: "token";
                readonly description: "Appeal: appeal a previously taken moderation action";
            };
        };
    };
    readonly ComAtprotoRepoApplyWrites: {
        readonly lexicon: 1;
        readonly id: "com.atproto.repo.applyWrites";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["repo", "writes"];
                        readonly properties: {
                            readonly repo: {
                                readonly type: "string";
                                readonly format: "at-identifier";
                                readonly description: "The handle or DID of the repo (aka, current account).";
                            };
                            readonly validate: {
                                readonly type: "boolean";
                                readonly description: "Can be set to 'false' to skip Lexicon schema validation of record data across all operations, 'true' to require it, or leave unset to validate only for known Lexicons.";
                            };
                            readonly writes: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "union";
                                    readonly refs: ["lex:com.atproto.repo.applyWrites#create", "lex:com.atproto.repo.applyWrites#update", "lex:com.atproto.repo.applyWrites#delete"];
                                    readonly closed: true;
                                };
                            };
                            readonly swapCommit: {
                                readonly type: "string";
                                readonly description: "If provided, the entire operation will fail if the current repo commit CID does not match this value. Used to prevent conflicting repo mutations.";
                                readonly format: "cid";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: [];
                        readonly properties: {
                            readonly commit: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.repo.defs#commitMeta";
                            };
                            readonly results: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "union";
                                    readonly refs: ["lex:com.atproto.repo.applyWrites#createResult", "lex:com.atproto.repo.applyWrites#updateResult", "lex:com.atproto.repo.applyWrites#deleteResult"];
                                    readonly closed: true;
                                };
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "InvalidSwap";
                    readonly description: "Indicates that the 'swapCommit' parameter did not match current commit.";
                }];
            };
            readonly create: {
                readonly type: "object";
                readonly description: "Operation which creates a new record.";
                readonly required: ["collection", "value"];
                readonly properties: {
                    readonly collection: {
                        readonly type: "string";
                        readonly format: "nsid";
                    };
                    readonly rkey: {
                        readonly type: "string";
                        readonly maxLength: 512;
                    };
                    readonly value: {
                        readonly type: "unknown";
                    };
                };
            };
            readonly update: {
                readonly type: "object";
                readonly description: "Operation which updates an existing record.";
                readonly required: ["collection", "rkey", "value"];
                readonly properties: {
                    readonly collection: {
                        readonly type: "string";
                        readonly format: "nsid";
                    };
                    readonly rkey: {
                        readonly type: "string";
                    };
                    readonly value: {
                        readonly type: "unknown";
                    };
                };
            };
            readonly delete: {
                readonly type: "object";
                readonly description: "Operation which deletes an existing record.";
                readonly required: ["collection", "rkey"];
                readonly properties: {
                    readonly collection: {
                        readonly type: "string";
                        readonly format: "nsid";
                    };
                    readonly rkey: {
                        readonly type: "string";
                    };
                };
            };
            readonly createResult: {
                readonly type: "object";
                readonly required: ["uri", "cid"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly validationStatus: {
                        readonly type: "string";
                        readonly knownValues: ["valid", "unknown"];
                    };
                };
            };
            readonly updateResult: {
                readonly type: "object";
                readonly required: ["uri", "cid"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly validationStatus: {
                        readonly type: "string";
                        readonly knownValues: ["valid", "unknown"];
                    };
                };
            };
            readonly deleteResult: {
                readonly type: "object";
                readonly required: [];
                readonly properties: {};
            };
        };
    };
    readonly ComAtprotoRepoCreateRecord: {
        readonly lexicon: 1;
        readonly id: "com.atproto.repo.createRecord";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Create a single new repository record. Requires auth, implemented by PDS.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["repo", "collection", "record"];
                        readonly properties: {
                            readonly repo: {
                                readonly type: "string";
                                readonly format: "at-identifier";
                                readonly description: "The handle or DID of the repo (aka, current account).";
                            };
                            readonly collection: {
                                readonly type: "string";
                                readonly format: "nsid";
                                readonly description: "The NSID of the record collection.";
                            };
                            readonly rkey: {
                                readonly type: "string";
                                readonly description: "The Record Key.";
                                readonly maxLength: 512;
                            };
                            readonly validate: {
                                readonly type: "boolean";
                                readonly description: "Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons.";
                            };
                            readonly record: {
                                readonly type: "unknown";
                                readonly description: "The record itself. Must contain a $type field.";
                            };
                            readonly swapCommit: {
                                readonly type: "string";
                                readonly format: "cid";
                                readonly description: "Compare and swap with the previous commit by CID.";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["uri", "cid"];
                        readonly properties: {
                            readonly uri: {
                                readonly type: "string";
                                readonly format: "at-uri";
                            };
                            readonly cid: {
                                readonly type: "string";
                                readonly format: "cid";
                            };
                            readonly commit: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.repo.defs#commitMeta";
                            };
                            readonly validationStatus: {
                                readonly type: "string";
                                readonly knownValues: ["valid", "unknown"];
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "InvalidSwap";
                    readonly description: "Indicates that 'swapCommit' didn't match current repo commit.";
                }];
            };
        };
    };
    readonly ComAtprotoRepoDefs: {
        readonly lexicon: 1;
        readonly id: "com.atproto.repo.defs";
        readonly defs: {
            readonly commitMeta: {
                readonly type: "object";
                readonly required: ["cid", "rev"];
                readonly properties: {
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly rev: {
                        readonly type: "string";
                    };
                };
            };
        };
    };
    readonly ComAtprotoRepoDeleteRecord: {
        readonly lexicon: 1;
        readonly id: "com.atproto.repo.deleteRecord";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Delete a repository record, or ensure it doesn't exist. Requires auth, implemented by PDS.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["repo", "collection", "rkey"];
                        readonly properties: {
                            readonly repo: {
                                readonly type: "string";
                                readonly format: "at-identifier";
                                readonly description: "The handle or DID of the repo (aka, current account).";
                            };
                            readonly collection: {
                                readonly type: "string";
                                readonly format: "nsid";
                                readonly description: "The NSID of the record collection.";
                            };
                            readonly rkey: {
                                readonly type: "string";
                                readonly description: "The Record Key.";
                            };
                            readonly swapRecord: {
                                readonly type: "string";
                                readonly format: "cid";
                                readonly description: "Compare and swap with the previous record by CID.";
                            };
                            readonly swapCommit: {
                                readonly type: "string";
                                readonly format: "cid";
                                readonly description: "Compare and swap with the previous commit by CID.";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly properties: {
                            readonly commit: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.repo.defs#commitMeta";
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "InvalidSwap";
                }];
            };
        };
    };
    readonly ComAtprotoRepoDescribeRepo: {
        readonly lexicon: 1;
        readonly id: "com.atproto.repo.describeRepo";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get information about an account and repository, including the list of collections. Does not require auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["repo"];
                    readonly properties: {
                        readonly repo: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                            readonly description: "The handle or DID of the repo.";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["handle", "did", "didDoc", "collections", "handleIsCorrect"];
                        readonly properties: {
                            readonly handle: {
                                readonly type: "string";
                                readonly format: "handle";
                            };
                            readonly did: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                            readonly didDoc: {
                                readonly type: "unknown";
                                readonly description: "The complete DID document for this account.";
                            };
                            readonly collections: {
                                readonly type: "array";
                                readonly description: "List of all the collections (NSIDs) for which this repo contains at least one record.";
                                readonly items: {
                                    readonly type: "string";
                                    readonly format: "nsid";
                                };
                            };
                            readonly handleIsCorrect: {
                                readonly type: "boolean";
                                readonly description: "Indicates if handle is currently valid (resolves bi-directionally)";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoRepoGetRecord: {
        readonly lexicon: 1;
        readonly id: "com.atproto.repo.getRecord";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get a single record from a repository. Does not require auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["repo", "collection", "rkey"];
                    readonly properties: {
                        readonly repo: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                            readonly description: "The handle or DID of the repo.";
                        };
                        readonly collection: {
                            readonly type: "string";
                            readonly format: "nsid";
                            readonly description: "The NSID of the record collection.";
                        };
                        readonly rkey: {
                            readonly type: "string";
                            readonly description: "The Record Key.";
                        };
                        readonly cid: {
                            readonly type: "string";
                            readonly format: "cid";
                            readonly description: "The CID of the version of the record. If not specified, then return the most recent version.";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["uri", "value"];
                        readonly properties: {
                            readonly uri: {
                                readonly type: "string";
                                readonly format: "at-uri";
                            };
                            readonly cid: {
                                readonly type: "string";
                                readonly format: "cid";
                            };
                            readonly value: {
                                readonly type: "unknown";
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "RecordNotFound";
                }];
            };
        };
    };
    readonly ComAtprotoRepoImportRepo: {
        readonly lexicon: 1;
        readonly id: "com.atproto.repo.importRepo";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.";
                readonly input: {
                    readonly encoding: "application/vnd.ipld.car";
                };
            };
        };
    };
    readonly ComAtprotoRepoListMissingBlobs: {
        readonly lexicon: 1;
        readonly id: "com.atproto.repo.listMissingBlobs";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 1000;
                            readonly default: 500;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["blobs"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly blobs: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:com.atproto.repo.listMissingBlobs#recordBlob";
                                };
                            };
                        };
                    };
                };
            };
            readonly recordBlob: {
                readonly type: "object";
                readonly required: ["cid", "recordUri"];
                readonly properties: {
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly recordUri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                };
            };
        };
    };
    readonly ComAtprotoRepoListRecords: {
        readonly lexicon: 1;
        readonly id: "com.atproto.repo.listRecords";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "List a range of records in a repository, matching a specific collection. Does not require auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["repo", "collection"];
                    readonly properties: {
                        readonly repo: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                            readonly description: "The handle or DID of the repo.";
                        };
                        readonly collection: {
                            readonly type: "string";
                            readonly format: "nsid";
                            readonly description: "The NSID of the record type.";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                            readonly description: "The number of records to return.";
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly rkeyStart: {
                            readonly type: "string";
                            readonly description: "DEPRECATED: The lowest sort-ordered rkey to start from (exclusive)";
                        };
                        readonly rkeyEnd: {
                            readonly type: "string";
                            readonly description: "DEPRECATED: The highest sort-ordered rkey to stop at (exclusive)";
                        };
                        readonly reverse: {
                            readonly type: "boolean";
                            readonly description: "Flag to reverse the order of the returned records.";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["records"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly records: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:com.atproto.repo.listRecords#record";
                                };
                            };
                        };
                    };
                };
            };
            readonly record: {
                readonly type: "object";
                readonly required: ["uri", "cid", "value"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly value: {
                        readonly type: "unknown";
                    };
                };
            };
        };
    };
    readonly ComAtprotoRepoPutRecord: {
        readonly lexicon: 1;
        readonly id: "com.atproto.repo.putRecord";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["repo", "collection", "rkey", "record"];
                        readonly nullable: ["swapRecord"];
                        readonly properties: {
                            readonly repo: {
                                readonly type: "string";
                                readonly format: "at-identifier";
                                readonly description: "The handle or DID of the repo (aka, current account).";
                            };
                            readonly collection: {
                                readonly type: "string";
                                readonly format: "nsid";
                                readonly description: "The NSID of the record collection.";
                            };
                            readonly rkey: {
                                readonly type: "string";
                                readonly description: "The Record Key.";
                                readonly maxLength: 512;
                            };
                            readonly validate: {
                                readonly type: "boolean";
                                readonly description: "Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons.";
                            };
                            readonly record: {
                                readonly type: "unknown";
                                readonly description: "The record to write.";
                            };
                            readonly swapRecord: {
                                readonly type: "string";
                                readonly format: "cid";
                                readonly description: "Compare and swap with the previous record by CID. WARNING: nullable and optional field; may cause problems with golang implementation";
                            };
                            readonly swapCommit: {
                                readonly type: "string";
                                readonly format: "cid";
                                readonly description: "Compare and swap with the previous commit by CID.";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["uri", "cid"];
                        readonly properties: {
                            readonly uri: {
                                readonly type: "string";
                                readonly format: "at-uri";
                            };
                            readonly cid: {
                                readonly type: "string";
                                readonly format: "cid";
                            };
                            readonly commit: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.repo.defs#commitMeta";
                            };
                            readonly validationStatus: {
                                readonly type: "string";
                                readonly knownValues: ["valid", "unknown"];
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "InvalidSwap";
                }];
            };
        };
    };
    readonly ComAtprotoRepoStrongRef: {
        readonly lexicon: 1;
        readonly id: "com.atproto.repo.strongRef";
        readonly description: "A URI with a content-hash fingerprint.";
        readonly defs: {
            readonly main: {
                readonly type: "object";
                readonly required: ["uri", "cid"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                };
            };
        };
    };
    readonly ComAtprotoRepoUploadBlob: {
        readonly lexicon: 1;
        readonly id: "com.atproto.repo.uploadBlob";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.";
                readonly input: {
                    readonly encoding: "*/*";
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["blob"];
                        readonly properties: {
                            readonly blob: {
                                readonly type: "blob";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoServerActivateAccount: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.activateAccount";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Activates a currently deactivated account. Used to finalize account migration after the account's repo is imported and identity is setup.";
            };
        };
    };
    readonly ComAtprotoServerCheckAccountStatus: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.checkAccountStatus";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.";
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["activated", "validDid", "repoCommit", "repoRev", "repoBlocks", "indexedRecords", "privateStateValues", "expectedBlobs", "importedBlobs"];
                        readonly properties: {
                            readonly activated: {
                                readonly type: "boolean";
                            };
                            readonly validDid: {
                                readonly type: "boolean";
                            };
                            readonly repoCommit: {
                                readonly type: "string";
                                readonly format: "cid";
                            };
                            readonly repoRev: {
                                readonly type: "string";
                            };
                            readonly repoBlocks: {
                                readonly type: "integer";
                            };
                            readonly indexedRecords: {
                                readonly type: "integer";
                            };
                            readonly privateStateValues: {
                                readonly type: "integer";
                            };
                            readonly expectedBlobs: {
                                readonly type: "integer";
                            };
                            readonly importedBlobs: {
                                readonly type: "integer";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoServerConfirmEmail: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.confirmEmail";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Confirm an email using a token from com.atproto.server.requestEmailConfirmation.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["email", "token"];
                        readonly properties: {
                            readonly email: {
                                readonly type: "string";
                            };
                            readonly token: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "AccountNotFound";
                }, {
                    readonly name: "ExpiredToken";
                }, {
                    readonly name: "InvalidToken";
                }, {
                    readonly name: "InvalidEmail";
                }];
            };
        };
    };
    readonly ComAtprotoServerCreateAccount: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.createAccount";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Create an account. Implemented by PDS.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["handle"];
                        readonly properties: {
                            readonly email: {
                                readonly type: "string";
                            };
                            readonly handle: {
                                readonly type: "string";
                                readonly format: "handle";
                                readonly description: "Requested handle for the account.";
                            };
                            readonly did: {
                                readonly type: "string";
                                readonly format: "did";
                                readonly description: "Pre-existing atproto DID, being imported to a new account.";
                            };
                            readonly inviteCode: {
                                readonly type: "string";
                            };
                            readonly verificationCode: {
                                readonly type: "string";
                            };
                            readonly verificationPhone: {
                                readonly type: "string";
                            };
                            readonly password: {
                                readonly type: "string";
                                readonly description: "Initial account password. May need to meet instance-specific password strength requirements.";
                            };
                            readonly recoveryKey: {
                                readonly type: "string";
                                readonly description: "DID PLC rotation key (aka, recovery key) to be included in PLC creation operation.";
                            };
                            readonly plcOp: {
                                readonly type: "unknown";
                                readonly description: "A signed DID PLC operation to be submitted as part of importing an existing account to this instance. NOTE: this optional field may be updated when full account migration is implemented.";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly description: "Account login session returned on successful account creation.";
                        readonly required: ["accessJwt", "refreshJwt", "handle", "did"];
                        readonly properties: {
                            readonly accessJwt: {
                                readonly type: "string";
                            };
                            readonly refreshJwt: {
                                readonly type: "string";
                            };
                            readonly handle: {
                                readonly type: "string";
                                readonly format: "handle";
                            };
                            readonly did: {
                                readonly type: "string";
                                readonly format: "did";
                                readonly description: "The DID of the new account.";
                            };
                            readonly didDoc: {
                                readonly type: "unknown";
                                readonly description: "Complete DID document.";
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "InvalidHandle";
                }, {
                    readonly name: "InvalidPassword";
                }, {
                    readonly name: "InvalidInviteCode";
                }, {
                    readonly name: "HandleNotAvailable";
                }, {
                    readonly name: "UnsupportedDomain";
                }, {
                    readonly name: "UnresolvableDid";
                }, {
                    readonly name: "IncompatibleDidDoc";
                }];
            };
        };
    };
    readonly ComAtprotoServerCreateAppPassword: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.createAppPassword";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Create an App Password.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["name"];
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                                readonly description: "A short name for the App Password, to help distinguish them.";
                            };
                            readonly privileged: {
                                readonly type: "boolean";
                                readonly description: "If an app password has 'privileged' access to possibly sensitive account state. Meant for use with trusted clients.";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.server.createAppPassword#appPassword";
                    };
                };
                readonly errors: [{
                    readonly name: "AccountTakedown";
                }];
            };
            readonly appPassword: {
                readonly type: "object";
                readonly required: ["name", "password", "createdAt"];
                readonly properties: {
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly password: {
                        readonly type: "string";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly privileged: {
                        readonly type: "boolean";
                    };
                };
            };
        };
    };
    readonly ComAtprotoServerCreateInviteCode: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.createInviteCode";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Create an invite code.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["useCount"];
                        readonly properties: {
                            readonly useCount: {
                                readonly type: "integer";
                            };
                            readonly forAccount: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["code"];
                        readonly properties: {
                            readonly code: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoServerCreateInviteCodes: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.createInviteCodes";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Create invite codes.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["codeCount", "useCount"];
                        readonly properties: {
                            readonly codeCount: {
                                readonly type: "integer";
                                readonly default: 1;
                            };
                            readonly useCount: {
                                readonly type: "integer";
                            };
                            readonly forAccounts: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                    readonly format: "did";
                                };
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["codes"];
                        readonly properties: {
                            readonly codes: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:com.atproto.server.createInviteCodes#accountCodes";
                                };
                            };
                        };
                    };
                };
            };
            readonly accountCodes: {
                readonly type: "object";
                readonly required: ["account", "codes"];
                readonly properties: {
                    readonly account: {
                        readonly type: "string";
                    };
                    readonly codes: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoServerCreateSession: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.createSession";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Create an authentication session.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["identifier", "password"];
                        readonly properties: {
                            readonly identifier: {
                                readonly type: "string";
                                readonly description: "Handle or other identifier supported by the server for the authenticating user.";
                            };
                            readonly password: {
                                readonly type: "string";
                            };
                            readonly authFactorToken: {
                                readonly type: "string";
                            };
                            readonly allowTakendown: {
                                readonly type: "boolean";
                                readonly description: "When true, instead of throwing error for takendown accounts, a valid response with a narrow scoped token will be returned";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["accessJwt", "refreshJwt", "handle", "did"];
                        readonly properties: {
                            readonly accessJwt: {
                                readonly type: "string";
                            };
                            readonly refreshJwt: {
                                readonly type: "string";
                            };
                            readonly handle: {
                                readonly type: "string";
                                readonly format: "handle";
                            };
                            readonly did: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                            readonly didDoc: {
                                readonly type: "unknown";
                            };
                            readonly email: {
                                readonly type: "string";
                            };
                            readonly emailConfirmed: {
                                readonly type: "boolean";
                            };
                            readonly emailAuthFactor: {
                                readonly type: "boolean";
                            };
                            readonly active: {
                                readonly type: "boolean";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.";
                                readonly knownValues: ["takendown", "suspended", "deactivated"];
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "AccountTakedown";
                }, {
                    readonly name: "AuthFactorTokenRequired";
                }];
            };
        };
    };
    readonly ComAtprotoServerDeactivateAccount: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.deactivateAccount";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly properties: {
                            readonly deleteAfter: {
                                readonly type: "string";
                                readonly format: "datetime";
                                readonly description: "A recommendation to server as to how long they should hold onto the deactivated account before deleting.";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoServerDefs: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.defs";
        readonly defs: {
            readonly inviteCode: {
                readonly type: "object";
                readonly required: ["code", "available", "disabled", "forAccount", "createdBy", "createdAt", "uses"];
                readonly properties: {
                    readonly code: {
                        readonly type: "string";
                    };
                    readonly available: {
                        readonly type: "integer";
                    };
                    readonly disabled: {
                        readonly type: "boolean";
                    };
                    readonly forAccount: {
                        readonly type: "string";
                    };
                    readonly createdBy: {
                        readonly type: "string";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly uses: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.server.defs#inviteCodeUse";
                        };
                    };
                };
            };
            readonly inviteCodeUse: {
                readonly type: "object";
                readonly required: ["usedBy", "usedAt"];
                readonly properties: {
                    readonly usedBy: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly usedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
        };
    };
    readonly ComAtprotoServerDeleteAccount: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.deleteAccount";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Delete an actor's account with a token and password. Can only be called after requesting a deletion token. Requires auth.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["did", "password", "token"];
                        readonly properties: {
                            readonly did: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                            readonly password: {
                                readonly type: "string";
                            };
                            readonly token: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "ExpiredToken";
                }, {
                    readonly name: "InvalidToken";
                }];
            };
        };
    };
    readonly ComAtprotoServerDeleteSession: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.deleteSession";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Delete the current session. Requires auth.";
            };
        };
    };
    readonly ComAtprotoServerDescribeServer: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.describeServer";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Describes the server's account creation requirements and capabilities. Implemented by PDS.";
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["did", "availableUserDomains"];
                        readonly properties: {
                            readonly inviteCodeRequired: {
                                readonly type: "boolean";
                                readonly description: "If true, an invite code must be supplied to create an account on this instance.";
                            };
                            readonly phoneVerificationRequired: {
                                readonly type: "boolean";
                                readonly description: "If true, a phone verification token must be supplied to create an account on this instance.";
                            };
                            readonly availableUserDomains: {
                                readonly type: "array";
                                readonly description: "List of domain suffixes that can be used in account handles.";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly links: {
                                readonly type: "ref";
                                readonly description: "URLs of service policy documents.";
                                readonly ref: "lex:com.atproto.server.describeServer#links";
                            };
                            readonly contact: {
                                readonly type: "ref";
                                readonly description: "Contact information";
                                readonly ref: "lex:com.atproto.server.describeServer#contact";
                            };
                            readonly did: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                        };
                    };
                };
            };
            readonly links: {
                readonly type: "object";
                readonly properties: {
                    readonly privacyPolicy: {
                        readonly type: "string";
                        readonly format: "uri";
                    };
                    readonly termsOfService: {
                        readonly type: "string";
                        readonly format: "uri";
                    };
                };
            };
            readonly contact: {
                readonly type: "object";
                readonly properties: {
                    readonly email: {
                        readonly type: "string";
                    };
                };
            };
        };
    };
    readonly ComAtprotoServerGetAccountInviteCodes: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.getAccountInviteCodes";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get all invite codes for the current account. Requires auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly includeUsed: {
                            readonly type: "boolean";
                            readonly default: true;
                        };
                        readonly createAvailable: {
                            readonly type: "boolean";
                            readonly default: true;
                            readonly description: "Controls whether any new 'earned' but not 'created' invites should be created.";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["codes"];
                        readonly properties: {
                            readonly codes: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:com.atproto.server.defs#inviteCode";
                                };
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "DuplicateCreate";
                }];
            };
        };
    };
    readonly ComAtprotoServerGetServiceAuth: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.getServiceAuth";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get a signed token on behalf of the requesting DID for the requested service.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["aud"];
                    readonly properties: {
                        readonly aud: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "The DID of the service that the token will be used to authenticate with";
                        };
                        readonly exp: {
                            readonly type: "integer";
                            readonly description: "The time in Unix Epoch seconds that the JWT expires. Defaults to 60 seconds in the future. The service may enforce certain time bounds on tokens depending on the requested scope.";
                        };
                        readonly lxm: {
                            readonly type: "string";
                            readonly format: "nsid";
                            readonly description: "Lexicon (XRPC) method to bind the requested token to";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["token"];
                        readonly properties: {
                            readonly token: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "BadExpiration";
                    readonly description: "Indicates that the requested expiration date is not a valid. May be in the past or may be reliant on the requested scopes.";
                }];
            };
        };
    };
    readonly ComAtprotoServerGetSession: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.getSession";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get information about the current auth session. Requires auth.";
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["handle", "did"];
                        readonly properties: {
                            readonly handle: {
                                readonly type: "string";
                                readonly format: "handle";
                            };
                            readonly did: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                            readonly email: {
                                readonly type: "string";
                            };
                            readonly emailConfirmed: {
                                readonly type: "boolean";
                            };
                            readonly emailAuthFactor: {
                                readonly type: "boolean";
                            };
                            readonly didDoc: {
                                readonly type: "unknown";
                            };
                            readonly active: {
                                readonly type: "boolean";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.";
                                readonly knownValues: ["takendown", "suspended", "deactivated"];
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoServerListAppPasswords: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.listAppPasswords";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "List all App Passwords.";
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["passwords"];
                        readonly properties: {
                            readonly passwords: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:com.atproto.server.listAppPasswords#appPassword";
                                };
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "AccountTakedown";
                }];
            };
            readonly appPassword: {
                readonly type: "object";
                readonly required: ["name", "createdAt"];
                readonly properties: {
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly privileged: {
                        readonly type: "boolean";
                    };
                };
            };
        };
    };
    readonly ComAtprotoServerRefreshSession: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.refreshSession";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Refresh an authentication session. Requires auth using the 'refreshJwt' (not the 'accessJwt').";
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["accessJwt", "refreshJwt", "handle", "did"];
                        readonly properties: {
                            readonly accessJwt: {
                                readonly type: "string";
                            };
                            readonly refreshJwt: {
                                readonly type: "string";
                            };
                            readonly handle: {
                                readonly type: "string";
                                readonly format: "handle";
                            };
                            readonly did: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                            readonly didDoc: {
                                readonly type: "unknown";
                            };
                            readonly active: {
                                readonly type: "boolean";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "Hosting status of the account. If not specified, then assume 'active'.";
                                readonly knownValues: ["takendown", "suspended", "deactivated"];
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "AccountTakedown";
                }];
            };
        };
    };
    readonly ComAtprotoServerRequestAccountDelete: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.requestAccountDelete";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Initiate a user account deletion via email.";
            };
        };
    };
    readonly ComAtprotoServerRequestEmailConfirmation: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.requestEmailConfirmation";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Request an email with a code to confirm ownership of email.";
            };
        };
    };
    readonly ComAtprotoServerRequestEmailUpdate: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.requestEmailUpdate";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Request a token in order to update email.";
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["tokenRequired"];
                        readonly properties: {
                            readonly tokenRequired: {
                                readonly type: "boolean";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoServerRequestPasswordReset: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.requestPasswordReset";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Initiate a user account password reset via email.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["email"];
                        readonly properties: {
                            readonly email: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoServerReserveSigningKey: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.reserveSigningKey";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly properties: {
                            readonly did: {
                                readonly type: "string";
                                readonly format: "did";
                                readonly description: "The DID to reserve a key for.";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["signingKey"];
                        readonly properties: {
                            readonly signingKey: {
                                readonly type: "string";
                                readonly description: "The public key for the reserved signing key, in did:key serialization.";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoServerResetPassword: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.resetPassword";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Reset a user account password using a token.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["token", "password"];
                        readonly properties: {
                            readonly token: {
                                readonly type: "string";
                            };
                            readonly password: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "ExpiredToken";
                }, {
                    readonly name: "InvalidToken";
                }];
            };
        };
    };
    readonly ComAtprotoServerRevokeAppPassword: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.revokeAppPassword";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Revoke an App Password by name.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["name"];
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoServerUpdateEmail: {
        readonly lexicon: 1;
        readonly id: "com.atproto.server.updateEmail";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Update an account's email.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["email"];
                        readonly properties: {
                            readonly email: {
                                readonly type: "string";
                            };
                            readonly emailAuthFactor: {
                                readonly type: "boolean";
                            };
                            readonly token: {
                                readonly type: "string";
                                readonly description: "Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed.";
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "ExpiredToken";
                }, {
                    readonly name: "InvalidToken";
                }, {
                    readonly name: "TokenRequired";
                }];
            };
        };
    };
    readonly ComAtprotoSyncGetBlob: {
        readonly lexicon: 1;
        readonly id: "com.atproto.sync.getBlob";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["did", "cid"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "The DID of the account.";
                        };
                        readonly cid: {
                            readonly type: "string";
                            readonly format: "cid";
                            readonly description: "The CID of the blob to fetch";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "*/*";
                };
                readonly errors: [{
                    readonly name: "BlobNotFound";
                }, {
                    readonly name: "RepoNotFound";
                }, {
                    readonly name: "RepoTakendown";
                }, {
                    readonly name: "RepoSuspended";
                }, {
                    readonly name: "RepoDeactivated";
                }];
            };
        };
    };
    readonly ComAtprotoSyncGetBlocks: {
        readonly lexicon: 1;
        readonly id: "com.atproto.sync.getBlocks";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["did", "cids"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "The DID of the repo.";
                        };
                        readonly cids: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly format: "cid";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/vnd.ipld.car";
                };
                readonly errors: [{
                    readonly name: "BlockNotFound";
                }, {
                    readonly name: "RepoNotFound";
                }, {
                    readonly name: "RepoTakendown";
                }, {
                    readonly name: "RepoSuspended";
                }, {
                    readonly name: "RepoDeactivated";
                }];
            };
        };
    };
    readonly ComAtprotoSyncGetCheckout: {
        readonly lexicon: 1;
        readonly id: "com.atproto.sync.getCheckout";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "DEPRECATED - please use com.atproto.sync.getRepo instead";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["did"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "The DID of the repo.";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/vnd.ipld.car";
                };
            };
        };
    };
    readonly ComAtprotoSyncGetHead: {
        readonly lexicon: 1;
        readonly id: "com.atproto.sync.getHead";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "DEPRECATED - please use com.atproto.sync.getLatestCommit instead";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["did"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "The DID of the repo.";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["root"];
                        readonly properties: {
                            readonly root: {
                                readonly type: "string";
                                readonly format: "cid";
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "HeadNotFound";
                }];
            };
        };
    };
    readonly ComAtprotoSyncGetLatestCommit: {
        readonly lexicon: 1;
        readonly id: "com.atproto.sync.getLatestCommit";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get the current commit CID & revision of the specified repo. Does not require auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["did"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "The DID of the repo.";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["cid", "rev"];
                        readonly properties: {
                            readonly cid: {
                                readonly type: "string";
                                readonly format: "cid";
                            };
                            readonly rev: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "RepoNotFound";
                }, {
                    readonly name: "RepoTakendown";
                }, {
                    readonly name: "RepoSuspended";
                }, {
                    readonly name: "RepoDeactivated";
                }];
            };
        };
    };
    readonly ComAtprotoSyncGetRecord: {
        readonly lexicon: 1;
        readonly id: "com.atproto.sync.getRecord";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["did", "collection", "rkey"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "The DID of the repo.";
                        };
                        readonly collection: {
                            readonly type: "string";
                            readonly format: "nsid";
                        };
                        readonly rkey: {
                            readonly type: "string";
                            readonly description: "Record Key";
                        };
                        readonly commit: {
                            readonly type: "string";
                            readonly format: "cid";
                            readonly description: "DEPRECATED: referenced a repo commit by CID, and retrieved record as of that commit";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/vnd.ipld.car";
                };
                readonly errors: [{
                    readonly name: "RecordNotFound";
                }, {
                    readonly name: "RepoNotFound";
                }, {
                    readonly name: "RepoTakendown";
                }, {
                    readonly name: "RepoSuspended";
                }, {
                    readonly name: "RepoDeactivated";
                }];
            };
        };
    };
    readonly ComAtprotoSyncGetRepo: {
        readonly lexicon: 1;
        readonly id: "com.atproto.sync.getRepo";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Download a repository export as CAR file. Optionally only a 'diff' since a previous revision. Does not require auth; implemented by PDS.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["did"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "The DID of the repo.";
                        };
                        readonly since: {
                            readonly type: "string";
                            readonly description: "The revision ('rev') of the repo to create a diff from.";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/vnd.ipld.car";
                };
                readonly errors: [{
                    readonly name: "RepoNotFound";
                }, {
                    readonly name: "RepoTakendown";
                }, {
                    readonly name: "RepoSuspended";
                }, {
                    readonly name: "RepoDeactivated";
                }];
            };
        };
    };
    readonly ComAtprotoSyncGetRepoStatus: {
        readonly lexicon: 1;
        readonly id: "com.atproto.sync.getRepoStatus";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get the hosting status for a repository, on this server. Expected to be implemented by PDS and Relay.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["did"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "The DID of the repo.";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["did", "active"];
                        readonly properties: {
                            readonly did: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                            readonly active: {
                                readonly type: "boolean";
                            };
                            readonly status: {
                                readonly type: "string";
                                readonly description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.";
                                readonly knownValues: ["takendown", "suspended", "deactivated"];
                            };
                            readonly rev: {
                                readonly type: "string";
                                readonly description: "Optional field, the current rev of the repo, if active=true";
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "RepoNotFound";
                }];
            };
        };
    };
    readonly ComAtprotoSyncListBlobs: {
        readonly lexicon: 1;
        readonly id: "com.atproto.sync.listBlobs";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["did"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "The DID of the repo.";
                        };
                        readonly since: {
                            readonly type: "string";
                            readonly description: "Optional revision of the repo to list blobs since.";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 1000;
                            readonly default: 500;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["cids"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly cids: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                    readonly format: "cid";
                                };
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "RepoNotFound";
                }, {
                    readonly name: "RepoTakendown";
                }, {
                    readonly name: "RepoSuspended";
                }, {
                    readonly name: "RepoDeactivated";
                }];
            };
        };
    };
    readonly ComAtprotoSyncListRepos: {
        readonly lexicon: 1;
        readonly id: "com.atproto.sync.listRepos";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 1000;
                            readonly default: 500;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["repos"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly repos: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:com.atproto.sync.listRepos#repo";
                                };
                            };
                        };
                    };
                };
            };
            readonly repo: {
                readonly type: "object";
                readonly required: ["did", "head", "rev"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly head: {
                        readonly type: "string";
                        readonly format: "cid";
                        readonly description: "Current repo commit CID";
                    };
                    readonly rev: {
                        readonly type: "string";
                    };
                    readonly active: {
                        readonly type: "boolean";
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.";
                        readonly knownValues: ["takendown", "suspended", "deactivated"];
                    };
                };
            };
        };
    };
    readonly ComAtprotoSyncNotifyOfUpdate: {
        readonly lexicon: 1;
        readonly id: "com.atproto.sync.notifyOfUpdate";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["hostname"];
                        readonly properties: {
                            readonly hostname: {
                                readonly type: "string";
                                readonly description: "Hostname of the current service (usually a PDS) that is notifying of update.";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoSyncRequestCrawl: {
        readonly lexicon: 1;
        readonly id: "com.atproto.sync.requestCrawl";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["hostname"];
                        readonly properties: {
                            readonly hostname: {
                                readonly type: "string";
                                readonly description: "Hostname of the current service (eg, PDS) that is requesting to be crawled.";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoSyncSubscribeRepos: {
        readonly lexicon: 1;
        readonly id: "com.atproto.sync.subscribeRepos";
        readonly defs: {
            readonly main: {
                readonly type: "subscription";
                readonly description: "Repository event stream, aka Firehose endpoint. Outputs repo commits with diff data, and identity update events, for all repositories on the current server. See the atproto specifications for details around stream sequencing, repo versioning, CAR diff format, and more. Public and does not require auth; implemented by PDS and Relay.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "integer";
                            readonly description: "The last known event seq number to backfill from.";
                        };
                    };
                };
                readonly message: {
                    readonly schema: {
                        readonly type: "union";
                        readonly refs: ["lex:com.atproto.sync.subscribeRepos#commit", "lex:com.atproto.sync.subscribeRepos#identity", "lex:com.atproto.sync.subscribeRepos#account", "lex:com.atproto.sync.subscribeRepos#handle", "lex:com.atproto.sync.subscribeRepos#migrate", "lex:com.atproto.sync.subscribeRepos#tombstone", "lex:com.atproto.sync.subscribeRepos#info"];
                    };
                };
                readonly errors: [{
                    readonly name: "FutureCursor";
                }, {
                    readonly name: "ConsumerTooSlow";
                    readonly description: "If the consumer of the stream can not keep up with events, and a backlog gets too large, the server will drop the connection.";
                }];
            };
            readonly commit: {
                readonly type: "object";
                readonly description: "Represents an update of repository state. Note that empty commits are allowed, which include no repo data changes, but an update to rev and signature.";
                readonly required: ["seq", "rebase", "tooBig", "repo", "commit", "rev", "since", "blocks", "ops", "blobs", "time"];
                readonly nullable: ["prev", "since"];
                readonly properties: {
                    readonly seq: {
                        readonly type: "integer";
                        readonly description: "The stream sequence number of this message.";
                    };
                    readonly rebase: {
                        readonly type: "boolean";
                        readonly description: "DEPRECATED -- unused";
                    };
                    readonly tooBig: {
                        readonly type: "boolean";
                        readonly description: "Indicates that this commit contained too many ops, or data size was too large. Consumers will need to make a separate request to get missing data.";
                    };
                    readonly repo: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "The repo this event comes from.";
                    };
                    readonly commit: {
                        readonly type: "cid-link";
                        readonly description: "Repo commit object CID.";
                    };
                    readonly prev: {
                        readonly type: "cid-link";
                        readonly description: "DEPRECATED -- unused. WARNING -- nullable and optional; stick with optional to ensure golang interoperability.";
                    };
                    readonly rev: {
                        readonly type: "string";
                        readonly description: "The rev of the emitted commit. Note that this information is also in the commit object included in blocks, unless this is a tooBig event.";
                    };
                    readonly since: {
                        readonly type: "string";
                        readonly description: "The rev of the last emitted commit from this repo (if any).";
                    };
                    readonly blocks: {
                        readonly type: "bytes";
                        readonly description: "CAR file containing relevant blocks, as a diff since the previous repo state.";
                        readonly maxLength: 1000000;
                    };
                    readonly ops: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.sync.subscribeRepos#repoOp";
                            readonly description: "List of repo mutation operations in this commit (eg, records created, updated, or deleted).";
                        };
                        readonly maxLength: 200;
                    };
                    readonly blobs: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "cid-link";
                            readonly description: "List of new blobs (by CID) referenced by records in this commit.";
                        };
                    };
                    readonly time: {
                        readonly type: "string";
                        readonly format: "datetime";
                        readonly description: "Timestamp of when this message was originally broadcast.";
                    };
                };
            };
            readonly identity: {
                readonly type: "object";
                readonly description: "Represents a change to an account's identity. Could be an updated handle, signing key, or pds hosting endpoint. Serves as a prod to all downstream services to refresh their identity cache.";
                readonly required: ["seq", "did", "time"];
                readonly properties: {
                    readonly seq: {
                        readonly type: "integer";
                    };
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly time: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly handle: {
                        readonly type: "string";
                        readonly format: "handle";
                        readonly description: "The current handle for the account, or 'handle.invalid' if validation fails. This field is optional, might have been validated or passed-through from an upstream source. Semantics and behaviors for PDS vs Relay may evolve in the future; see atproto specs for more details.";
                    };
                };
            };
            readonly account: {
                readonly type: "object";
                readonly description: "Represents a change to an account's status on a host (eg, PDS or Relay). The semantics of this event are that the status is at the host which emitted the event, not necessarily that at the currently active PDS. Eg, a Relay takedown would emit a takedown with active=false, even if the PDS is still active.";
                readonly required: ["seq", "did", "time", "active"];
                readonly properties: {
                    readonly seq: {
                        readonly type: "integer";
                    };
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly time: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly active: {
                        readonly type: "boolean";
                        readonly description: "Indicates that the account has a repository which can be fetched from the host that emitted this event.";
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly description: "If active=false, this optional field indicates a reason for why the account is not active.";
                        readonly knownValues: ["takendown", "suspended", "deleted", "deactivated"];
                    };
                };
            };
            readonly handle: {
                readonly type: "object";
                readonly description: "DEPRECATED -- Use #identity event instead";
                readonly required: ["seq", "did", "handle", "time"];
                readonly properties: {
                    readonly seq: {
                        readonly type: "integer";
                    };
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly handle: {
                        readonly type: "string";
                        readonly format: "handle";
                    };
                    readonly time: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
            readonly migrate: {
                readonly type: "object";
                readonly description: "DEPRECATED -- Use #account event instead";
                readonly required: ["seq", "did", "migrateTo", "time"];
                readonly nullable: ["migrateTo"];
                readonly properties: {
                    readonly seq: {
                        readonly type: "integer";
                    };
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly migrateTo: {
                        readonly type: "string";
                    };
                    readonly time: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
            readonly tombstone: {
                readonly type: "object";
                readonly description: "DEPRECATED -- Use #account event instead";
                readonly required: ["seq", "did", "time"];
                readonly properties: {
                    readonly seq: {
                        readonly type: "integer";
                    };
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly time: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
            readonly info: {
                readonly type: "object";
                readonly required: ["name"];
                readonly properties: {
                    readonly name: {
                        readonly type: "string";
                        readonly knownValues: ["OutdatedCursor"];
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                };
            };
            readonly repoOp: {
                readonly type: "object";
                readonly description: "A repo operation, ie a mutation of a single record.";
                readonly required: ["action", "path", "cid"];
                readonly nullable: ["cid"];
                readonly properties: {
                    readonly action: {
                        readonly type: "string";
                        readonly knownValues: ["create", "update", "delete"];
                    };
                    readonly path: {
                        readonly type: "string";
                    };
                    readonly cid: {
                        readonly type: "cid-link";
                        readonly description: "For creates and updates, the new record CID. For deletions, null.";
                    };
                };
            };
        };
    };
    readonly ComAtprotoTempAddReservedHandle: {
        readonly lexicon: 1;
        readonly id: "com.atproto.temp.addReservedHandle";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Add a handle to the set of reserved handles.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["handle"];
                        readonly properties: {
                            readonly handle: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly properties: {};
                    };
                };
            };
        };
    };
    readonly ComAtprotoTempCheckSignupQueue: {
        readonly lexicon: 1;
        readonly id: "com.atproto.temp.checkSignupQueue";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Check accounts location in signup queue.";
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["activated"];
                        readonly properties: {
                            readonly activated: {
                                readonly type: "boolean";
                            };
                            readonly placeInQueue: {
                                readonly type: "integer";
                            };
                            readonly estimatedTimeMs: {
                                readonly type: "integer";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoTempFetchLabels: {
        readonly lexicon: 1;
        readonly id: "com.atproto.temp.fetchLabels";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "DEPRECATED: use queryLabels or subscribeLabels instead -- Fetch all labels from a labeler created after a certain date.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly since: {
                            readonly type: "integer";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 250;
                            readonly default: 50;
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["labels"];
                        readonly properties: {
                            readonly labels: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:com.atproto.label.defs#label";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ComAtprotoTempRequestPhoneVerification: {
        readonly lexicon: 1;
        readonly id: "com.atproto.temp.requestPhoneVerification";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Request a verification code to be sent to the supplied phone number";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["phoneNumber"];
                        readonly properties: {
                            readonly phoneNumber: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyActorDefs: {
        readonly lexicon: 1;
        readonly id: "app.bsky.actor.defs";
        readonly defs: {
            readonly profileViewBasic: {
                readonly type: "object";
                readonly required: ["did", "handle"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly handle: {
                        readonly type: "string";
                        readonly format: "handle";
                    };
                    readonly displayName: {
                        readonly type: "string";
                        readonly maxGraphemes: 64;
                        readonly maxLength: 640;
                    };
                    readonly avatar: {
                        readonly type: "string";
                        readonly format: "uri";
                    };
                    readonly associated: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileAssociated";
                    };
                    readonly viewer: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#viewerState";
                    };
                    readonly labels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#label";
                        };
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
            readonly profileView: {
                readonly type: "object";
                readonly required: ["did", "handle"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly handle: {
                        readonly type: "string";
                        readonly format: "handle";
                    };
                    readonly displayName: {
                        readonly type: "string";
                        readonly maxGraphemes: 64;
                        readonly maxLength: 640;
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly maxGraphemes: 256;
                        readonly maxLength: 2560;
                    };
                    readonly avatar: {
                        readonly type: "string";
                        readonly format: "uri";
                    };
                    readonly associated: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileAssociated";
                    };
                    readonly indexedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly viewer: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#viewerState";
                    };
                    readonly labels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#label";
                        };
                    };
                };
            };
            readonly profileViewDetailed: {
                readonly type: "object";
                readonly required: ["did", "handle"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly handle: {
                        readonly type: "string";
                        readonly format: "handle";
                    };
                    readonly displayName: {
                        readonly type: "string";
                        readonly maxGraphemes: 64;
                        readonly maxLength: 640;
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly maxGraphemes: 256;
                        readonly maxLength: 2560;
                    };
                    readonly avatar: {
                        readonly type: "string";
                        readonly format: "uri";
                    };
                    readonly banner: {
                        readonly type: "string";
                        readonly format: "uri";
                    };
                    readonly followersCount: {
                        readonly type: "integer";
                    };
                    readonly followsCount: {
                        readonly type: "integer";
                    };
                    readonly postsCount: {
                        readonly type: "integer";
                    };
                    readonly associated: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileAssociated";
                    };
                    readonly joinedViaStarterPack: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.graph.defs#starterPackViewBasic";
                    };
                    readonly indexedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly viewer: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#viewerState";
                    };
                    readonly labels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#label";
                        };
                    };
                    readonly pinnedPost: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.repo.strongRef";
                    };
                };
            };
            readonly profileAssociated: {
                readonly type: "object";
                readonly properties: {
                    readonly lists: {
                        readonly type: "integer";
                    };
                    readonly feedgens: {
                        readonly type: "integer";
                    };
                    readonly starterPacks: {
                        readonly type: "integer";
                    };
                    readonly labeler: {
                        readonly type: "boolean";
                    };
                    readonly chat: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileAssociatedChat";
                    };
                };
            };
            readonly profileAssociatedChat: {
                readonly type: "object";
                readonly required: ["allowIncoming"];
                readonly properties: {
                    readonly allowIncoming: {
                        readonly type: "string";
                        readonly knownValues: ["all", "none", "following"];
                    };
                };
            };
            readonly viewerState: {
                readonly type: "object";
                readonly description: "Metadata about the requesting account's relationship with the subject account. Only has meaningful content for authed requests.";
                readonly properties: {
                    readonly muted: {
                        readonly type: "boolean";
                    };
                    readonly mutedByList: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.graph.defs#listViewBasic";
                    };
                    readonly blockedBy: {
                        readonly type: "boolean";
                    };
                    readonly blocking: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly blockingByList: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.graph.defs#listViewBasic";
                    };
                    readonly following: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly followedBy: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly knownFollowers: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#knownFollowers";
                    };
                };
            };
            readonly knownFollowers: {
                readonly type: "object";
                readonly description: "The subject's followers whom you also follow";
                readonly required: ["count", "followers"];
                readonly properties: {
                    readonly count: {
                        readonly type: "integer";
                    };
                    readonly followers: {
                        readonly type: "array";
                        readonly minLength: 0;
                        readonly maxLength: 5;
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.actor.defs#profileViewBasic";
                        };
                    };
                };
            };
            readonly preferences: {
                readonly type: "array";
                readonly items: {
                    readonly type: "union";
                    readonly refs: ["lex:app.bsky.actor.defs#adultContentPref", "lex:app.bsky.actor.defs#contentLabelPref", "lex:app.bsky.actor.defs#savedFeedsPref", "lex:app.bsky.actor.defs#savedFeedsPrefV2", "lex:app.bsky.actor.defs#personalDetailsPref", "lex:app.bsky.actor.defs#feedViewPref", "lex:app.bsky.actor.defs#threadViewPref", "lex:app.bsky.actor.defs#interestsPref", "lex:app.bsky.actor.defs#mutedWordsPref", "lex:app.bsky.actor.defs#hiddenPostsPref", "lex:app.bsky.actor.defs#bskyAppStatePref", "lex:app.bsky.actor.defs#labelersPref", "lex:app.bsky.actor.defs#postInteractionSettingsPref"];
                };
            };
            readonly adultContentPref: {
                readonly type: "object";
                readonly required: ["enabled"];
                readonly properties: {
                    readonly enabled: {
                        readonly type: "boolean";
                        readonly default: false;
                    };
                };
            };
            readonly contentLabelPref: {
                readonly type: "object";
                readonly required: ["label", "visibility"];
                readonly properties: {
                    readonly labelerDid: {
                        readonly type: "string";
                        readonly description: "Which labeler does this preference apply to? If undefined, applies globally.";
                        readonly format: "did";
                    };
                    readonly label: {
                        readonly type: "string";
                    };
                    readonly visibility: {
                        readonly type: "string";
                        readonly knownValues: ["ignore", "show", "warn", "hide"];
                    };
                };
            };
            readonly savedFeed: {
                readonly type: "object";
                readonly required: ["id", "type", "value", "pinned"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly knownValues: ["feed", "list", "timeline"];
                    };
                    readonly value: {
                        readonly type: "string";
                    };
                    readonly pinned: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly savedFeedsPrefV2: {
                readonly type: "object";
                readonly required: ["items"];
                readonly properties: {
                    readonly items: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.actor.defs#savedFeed";
                        };
                    };
                };
            };
            readonly savedFeedsPref: {
                readonly type: "object";
                readonly required: ["pinned", "saved"];
                readonly properties: {
                    readonly pinned: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                    };
                    readonly saved: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                    };
                    readonly timelineIndex: {
                        readonly type: "integer";
                    };
                };
            };
            readonly personalDetailsPref: {
                readonly type: "object";
                readonly properties: {
                    readonly birthDate: {
                        readonly type: "string";
                        readonly format: "datetime";
                        readonly description: "The birth date of account owner.";
                    };
                };
            };
            readonly feedViewPref: {
                readonly type: "object";
                readonly required: ["feed"];
                readonly properties: {
                    readonly feed: {
                        readonly type: "string";
                        readonly description: "The URI of the feed, or an identifier which describes the feed.";
                    };
                    readonly hideReplies: {
                        readonly type: "boolean";
                        readonly description: "Hide replies in the feed.";
                    };
                    readonly hideRepliesByUnfollowed: {
                        readonly type: "boolean";
                        readonly description: "Hide replies in the feed if they are not by followed users.";
                        readonly default: true;
                    };
                    readonly hideRepliesByLikeCount: {
                        readonly type: "integer";
                        readonly description: "Hide replies in the feed if they do not have this number of likes.";
                    };
                    readonly hideReposts: {
                        readonly type: "boolean";
                        readonly description: "Hide reposts in the feed.";
                    };
                    readonly hideQuotePosts: {
                        readonly type: "boolean";
                        readonly description: "Hide quote posts in the feed.";
                    };
                };
            };
            readonly threadViewPref: {
                readonly type: "object";
                readonly properties: {
                    readonly sort: {
                        readonly type: "string";
                        readonly description: "Sorting mode for threads.";
                        readonly knownValues: ["oldest", "newest", "most-likes", "random", "hotness"];
                    };
                    readonly prioritizeFollowedUsers: {
                        readonly type: "boolean";
                        readonly description: "Show followed users at the top of all replies.";
                    };
                };
            };
            readonly interestsPref: {
                readonly type: "object";
                readonly required: ["tags"];
                readonly properties: {
                    readonly tags: {
                        readonly type: "array";
                        readonly maxLength: 100;
                        readonly items: {
                            readonly type: "string";
                            readonly maxLength: 640;
                            readonly maxGraphemes: 64;
                        };
                        readonly description: "A list of tags which describe the account owner's interests gathered during onboarding.";
                    };
                };
            };
            readonly mutedWordTarget: {
                readonly type: "string";
                readonly knownValues: ["content", "tag"];
                readonly maxLength: 640;
                readonly maxGraphemes: 64;
            };
            readonly mutedWord: {
                readonly type: "object";
                readonly description: "A word that the account owner has muted.";
                readonly required: ["value", "targets"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly value: {
                        readonly type: "string";
                        readonly description: "The muted word itself.";
                        readonly maxLength: 10000;
                        readonly maxGraphemes: 1000;
                    };
                    readonly targets: {
                        readonly type: "array";
                        readonly description: "The intended targets of the muted word.";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.actor.defs#mutedWordTarget";
                        };
                    };
                    readonly actorTarget: {
                        readonly type: "string";
                        readonly description: "Groups of users to apply the muted word to. If undefined, applies to all users.";
                        readonly knownValues: ["all", "exclude-following"];
                        readonly default: "all";
                    };
                    readonly expiresAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                        readonly description: "The date and time at which the muted word will expire and no longer be applied.";
                    };
                };
            };
            readonly mutedWordsPref: {
                readonly type: "object";
                readonly required: ["items"];
                readonly properties: {
                    readonly items: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.actor.defs#mutedWord";
                        };
                        readonly description: "A list of words the account owner has muted.";
                    };
                };
            };
            readonly hiddenPostsPref: {
                readonly type: "object";
                readonly required: ["items"];
                readonly properties: {
                    readonly items: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                        readonly description: "A list of URIs of posts the account owner has hidden.";
                    };
                };
            };
            readonly labelersPref: {
                readonly type: "object";
                readonly required: ["labelers"];
                readonly properties: {
                    readonly labelers: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.actor.defs#labelerPrefItem";
                        };
                    };
                };
            };
            readonly labelerPrefItem: {
                readonly type: "object";
                readonly required: ["did"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                };
            };
            readonly bskyAppStatePref: {
                readonly description: "A grab bag of state that's specific to the bsky.app program. Third-party apps shouldn't use this.";
                readonly type: "object";
                readonly properties: {
                    readonly activeProgressGuide: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#bskyAppProgressGuide";
                    };
                    readonly queuedNudges: {
                        readonly description: "An array of tokens which identify nudges (modals, popups, tours, highlight dots) that should be shown to the user.";
                        readonly type: "array";
                        readonly maxLength: 1000;
                        readonly items: {
                            readonly type: "string";
                            readonly maxLength: 100;
                        };
                    };
                    readonly nuxs: {
                        readonly description: "Storage for NUXs the user has encountered.";
                        readonly type: "array";
                        readonly maxLength: 100;
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.actor.defs#nux";
                        };
                    };
                };
            };
            readonly bskyAppProgressGuide: {
                readonly description: "If set, an active progress guide. Once completed, can be set to undefined. Should have unspecced fields tracking progress.";
                readonly type: "object";
                readonly required: ["guide"];
                readonly properties: {
                    readonly guide: {
                        readonly type: "string";
                        readonly maxLength: 100;
                    };
                };
            };
            readonly nux: {
                readonly type: "object";
                readonly description: "A new user experiences (NUX) storage object";
                readonly required: ["id", "completed"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                        readonly maxLength: 100;
                    };
                    readonly completed: {
                        readonly type: "boolean";
                        readonly default: false;
                    };
                    readonly data: {
                        readonly description: "Arbitrary data for the NUX. The structure is defined by the NUX itself. Limited to 300 characters.";
                        readonly type: "string";
                        readonly maxLength: 3000;
                        readonly maxGraphemes: 300;
                    };
                    readonly expiresAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                        readonly description: "The date and time at which the NUX will expire and should be considered completed.";
                    };
                };
            };
            readonly postInteractionSettingsPref: {
                readonly type: "object";
                readonly description: "Default post interaction settings for the account. These values should be applied as default values when creating new posts. These refs should mirror the threadgate and postgate records exactly.";
                readonly required: [];
                readonly properties: {
                    readonly threadgateAllowRules: {
                        readonly description: "Matches threadgate record. List of rules defining who can reply to this users posts. If value is an empty array, no one can reply. If value is undefined, anyone can reply.";
                        readonly type: "array";
                        readonly maxLength: 5;
                        readonly items: {
                            readonly type: "union";
                            readonly refs: ["lex:app.bsky.feed.threadgate#mentionRule", "lex:app.bsky.feed.threadgate#followerRule", "lex:app.bsky.feed.threadgate#followingRule", "lex:app.bsky.feed.threadgate#listRule"];
                        };
                    };
                    readonly postgateEmbeddingRules: {
                        readonly description: "Matches postgate record. List of rules defining who can embed this users posts. If value is an empty array or is undefined, no particular rules apply and anyone can embed.";
                        readonly type: "array";
                        readonly maxLength: 5;
                        readonly items: {
                            readonly type: "union";
                            readonly refs: ["lex:app.bsky.feed.postgate#disableRule"];
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyActorGetPreferences: {
        readonly lexicon: 1;
        readonly id: "app.bsky.actor.getPreferences";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {};
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["preferences"];
                        readonly properties: {
                            readonly preferences: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.actor.defs#preferences";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyActorGetProfile: {
        readonly lexicon: 1;
        readonly id: "app.bsky.actor.getProfile";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["actor"];
                    readonly properties: {
                        readonly actor: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                            readonly description: "Handle or DID of account to fetch profile of.";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileViewDetailed";
                    };
                };
            };
        };
    };
    readonly AppBskyActorGetProfiles: {
        readonly lexicon: 1;
        readonly id: "app.bsky.actor.getProfiles";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get detailed profile views of multiple actors.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["actors"];
                    readonly properties: {
                        readonly actors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly format: "at-identifier";
                            };
                            readonly maxLength: 25;
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["profiles"];
                        readonly properties: {
                            readonly profiles: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.actor.defs#profileViewDetailed";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyActorGetSuggestions: {
        readonly lexicon: 1;
        readonly id: "app.bsky.actor.getSuggestions";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["actors"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly actors: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.actor.defs#profileView";
                                };
                            };
                            readonly recId: {
                                readonly type: "integer";
                                readonly description: "Snowflake for this recommendation, use when submitting recommendation events.";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyActorProfile: {
        readonly lexicon: 1;
        readonly id: "app.bsky.actor.profile";
        readonly defs: {
            readonly main: {
                readonly type: "record";
                readonly description: "A declaration of a Bluesky account profile.";
                readonly key: "literal:self";
                readonly record: {
                    readonly type: "object";
                    readonly properties: {
                        readonly displayName: {
                            readonly type: "string";
                            readonly maxGraphemes: 64;
                            readonly maxLength: 640;
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly description: "Free-form profile description text.";
                            readonly maxGraphemes: 256;
                            readonly maxLength: 2560;
                        };
                        readonly avatar: {
                            readonly type: "blob";
                            readonly description: "Small image to be displayed next to posts from account. AKA, 'profile picture'";
                            readonly accept: ["image/png", "image/jpeg"];
                            readonly maxSize: 1000000;
                        };
                        readonly banner: {
                            readonly type: "blob";
                            readonly description: "Larger horizontal image to display behind profile view.";
                            readonly accept: ["image/png", "image/jpeg"];
                            readonly maxSize: 1000000;
                        };
                        readonly labels: {
                            readonly type: "union";
                            readonly description: "Self-label values, specific to the Bluesky application, on the overall account.";
                            readonly refs: ["lex:com.atproto.label.defs#selfLabels"];
                        };
                        readonly joinedViaStarterPack: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.repo.strongRef";
                        };
                        readonly pinnedPost: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.repo.strongRef";
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyActorPutPreferences: {
        readonly lexicon: 1;
        readonly id: "app.bsky.actor.putPreferences";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Set the private preferences attached to the account.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["preferences"];
                        readonly properties: {
                            readonly preferences: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.actor.defs#preferences";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyActorSearchActors: {
        readonly lexicon: 1;
        readonly id: "app.bsky.actor.searchActors";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Find actors (profiles) matching search criteria. Does not require auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly term: {
                            readonly type: "string";
                            readonly description: "DEPRECATED: use 'q' instead.";
                        };
                        readonly q: {
                            readonly type: "string";
                            readonly description: "Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 25;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["actors"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly actors: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.actor.defs#profileView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyActorSearchActorsTypeahead: {
        readonly lexicon: 1;
        readonly id: "app.bsky.actor.searchActorsTypeahead";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly term: {
                            readonly type: "string";
                            readonly description: "DEPRECATED: use 'q' instead.";
                        };
                        readonly q: {
                            readonly type: "string";
                            readonly description: "Search query prefix; not a full query string.";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 10;
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["actors"];
                        readonly properties: {
                            readonly actors: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.actor.defs#profileViewBasic";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyEmbedDefs: {
        readonly lexicon: 1;
        readonly id: "app.bsky.embed.defs";
        readonly defs: {
            readonly aspectRatio: {
                readonly type: "object";
                readonly description: "width:height represents an aspect ratio. It may be approximate, and may not correspond to absolute dimensions in any given unit.";
                readonly required: ["width", "height"];
                readonly properties: {
                    readonly width: {
                        readonly type: "integer";
                        readonly minimum: 1;
                    };
                    readonly height: {
                        readonly type: "integer";
                        readonly minimum: 1;
                    };
                };
            };
        };
    };
    readonly AppBskyEmbedExternal: {
        readonly lexicon: 1;
        readonly id: "app.bsky.embed.external";
        readonly defs: {
            readonly main: {
                readonly type: "object";
                readonly description: "A representation of some externally linked content (eg, a URL and 'card'), embedded in a Bluesky record (eg, a post).";
                readonly required: ["external"];
                readonly properties: {
                    readonly external: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.embed.external#external";
                    };
                };
            };
            readonly external: {
                readonly type: "object";
                readonly required: ["uri", "title", "description"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "uri";
                    };
                    readonly title: {
                        readonly type: "string";
                    };
                    readonly description: {
                        readonly type: "string";
                    };
                    readonly thumb: {
                        readonly type: "blob";
                        readonly accept: ["image/*"];
                        readonly maxSize: 1000000;
                    };
                };
            };
            readonly view: {
                readonly type: "object";
                readonly required: ["external"];
                readonly properties: {
                    readonly external: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.embed.external#viewExternal";
                    };
                };
            };
            readonly viewExternal: {
                readonly type: "object";
                readonly required: ["uri", "title", "description"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "uri";
                    };
                    readonly title: {
                        readonly type: "string";
                    };
                    readonly description: {
                        readonly type: "string";
                    };
                    readonly thumb: {
                        readonly type: "string";
                        readonly format: "uri";
                    };
                };
            };
        };
    };
    readonly AppBskyEmbedImages: {
        readonly lexicon: 1;
        readonly id: "app.bsky.embed.images";
        readonly description: "A set of images embedded in a Bluesky record (eg, a post).";
        readonly defs: {
            readonly main: {
                readonly type: "object";
                readonly required: ["images"];
                readonly properties: {
                    readonly images: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.embed.images#image";
                        };
                        readonly maxLength: 4;
                    };
                };
            };
            readonly image: {
                readonly type: "object";
                readonly required: ["image", "alt"];
                readonly properties: {
                    readonly image: {
                        readonly type: "blob";
                        readonly accept: ["image/*"];
                        readonly maxSize: 1000000;
                    };
                    readonly alt: {
                        readonly type: "string";
                        readonly description: "Alt text description of the image, for accessibility.";
                    };
                    readonly aspectRatio: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.embed.defs#aspectRatio";
                    };
                };
            };
            readonly view: {
                readonly type: "object";
                readonly required: ["images"];
                readonly properties: {
                    readonly images: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.embed.images#viewImage";
                        };
                        readonly maxLength: 4;
                    };
                };
            };
            readonly viewImage: {
                readonly type: "object";
                readonly required: ["thumb", "fullsize", "alt"];
                readonly properties: {
                    readonly thumb: {
                        readonly type: "string";
                        readonly format: "uri";
                        readonly description: "Fully-qualified URL where a thumbnail of the image can be fetched. For example, CDN location provided by the App View.";
                    };
                    readonly fullsize: {
                        readonly type: "string";
                        readonly format: "uri";
                        readonly description: "Fully-qualified URL where a large version of the image can be fetched. May or may not be the exact original blob. For example, CDN location provided by the App View.";
                    };
                    readonly alt: {
                        readonly type: "string";
                        readonly description: "Alt text description of the image, for accessibility.";
                    };
                    readonly aspectRatio: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.embed.defs#aspectRatio";
                    };
                };
            };
        };
    };
    readonly AppBskyEmbedRecord: {
        readonly lexicon: 1;
        readonly id: "app.bsky.embed.record";
        readonly description: "A representation of a record embedded in a Bluesky record (eg, a post). For example, a quote-post, or sharing a feed generator record.";
        readonly defs: {
            readonly main: {
                readonly type: "object";
                readonly required: ["record"];
                readonly properties: {
                    readonly record: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.repo.strongRef";
                    };
                };
            };
            readonly view: {
                readonly type: "object";
                readonly required: ["record"];
                readonly properties: {
                    readonly record: {
                        readonly type: "union";
                        readonly refs: ["lex:app.bsky.embed.record#viewRecord", "lex:app.bsky.embed.record#viewNotFound", "lex:app.bsky.embed.record#viewBlocked", "lex:app.bsky.embed.record#viewDetached", "lex:app.bsky.feed.defs#generatorView", "lex:app.bsky.graph.defs#listView", "lex:app.bsky.labeler.defs#labelerView", "lex:app.bsky.graph.defs#starterPackViewBasic"];
                    };
                };
            };
            readonly viewRecord: {
                readonly type: "object";
                readonly required: ["uri", "cid", "author", "value", "indexedAt"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly author: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileViewBasic";
                    };
                    readonly value: {
                        readonly type: "unknown";
                        readonly description: "The record data itself.";
                    };
                    readonly labels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#label";
                        };
                    };
                    readonly replyCount: {
                        readonly type: "integer";
                    };
                    readonly repostCount: {
                        readonly type: "integer";
                    };
                    readonly likeCount: {
                        readonly type: "integer";
                    };
                    readonly quoteCount: {
                        readonly type: "integer";
                    };
                    readonly embeds: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "union";
                            readonly refs: ["lex:app.bsky.embed.images#view", "lex:app.bsky.embed.video#view", "lex:app.bsky.embed.external#view", "lex:app.bsky.embed.record#view", "lex:app.bsky.embed.recordWithMedia#view"];
                        };
                    };
                    readonly indexedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
            readonly viewNotFound: {
                readonly type: "object";
                readonly required: ["uri", "notFound"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly notFound: {
                        readonly type: "boolean";
                        readonly const: true;
                    };
                };
            };
            readonly viewBlocked: {
                readonly type: "object";
                readonly required: ["uri", "blocked", "author"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly blocked: {
                        readonly type: "boolean";
                        readonly const: true;
                    };
                    readonly author: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.feed.defs#blockedAuthor";
                    };
                };
            };
            readonly viewDetached: {
                readonly type: "object";
                readonly required: ["uri", "detached"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly detached: {
                        readonly type: "boolean";
                        readonly const: true;
                    };
                };
            };
        };
    };
    readonly AppBskyEmbedRecordWithMedia: {
        readonly lexicon: 1;
        readonly id: "app.bsky.embed.recordWithMedia";
        readonly description: "A representation of a record embedded in a Bluesky record (eg, a post), alongside other compatible embeds. For example, a quote post and image, or a quote post and external URL card.";
        readonly defs: {
            readonly main: {
                readonly type: "object";
                readonly required: ["record", "media"];
                readonly properties: {
                    readonly record: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.embed.record";
                    };
                    readonly media: {
                        readonly type: "union";
                        readonly refs: ["lex:app.bsky.embed.images", "lex:app.bsky.embed.video", "lex:app.bsky.embed.external"];
                    };
                };
            };
            readonly view: {
                readonly type: "object";
                readonly required: ["record", "media"];
                readonly properties: {
                    readonly record: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.embed.record#view";
                    };
                    readonly media: {
                        readonly type: "union";
                        readonly refs: ["lex:app.bsky.embed.images#view", "lex:app.bsky.embed.video#view", "lex:app.bsky.embed.external#view"];
                    };
                };
            };
        };
    };
    readonly AppBskyEmbedVideo: {
        readonly lexicon: 1;
        readonly id: "app.bsky.embed.video";
        readonly description: "A video embedded in a Bluesky record (eg, a post).";
        readonly defs: {
            readonly main: {
                readonly type: "object";
                readonly required: ["video"];
                readonly properties: {
                    readonly video: {
                        readonly type: "blob";
                        readonly accept: ["video/mp4"];
                        readonly maxSize: 50000000;
                    };
                    readonly captions: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.embed.video#caption";
                        };
                        readonly maxLength: 20;
                    };
                    readonly alt: {
                        readonly type: "string";
                        readonly description: "Alt text description of the video, for accessibility.";
                        readonly maxGraphemes: 1000;
                        readonly maxLength: 10000;
                    };
                    readonly aspectRatio: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.embed.defs#aspectRatio";
                    };
                };
            };
            readonly caption: {
                readonly type: "object";
                readonly required: ["lang", "file"];
                readonly properties: {
                    readonly lang: {
                        readonly type: "string";
                        readonly format: "language";
                    };
                    readonly file: {
                        readonly type: "blob";
                        readonly accept: ["text/vtt"];
                        readonly maxSize: 20000;
                    };
                };
            };
            readonly view: {
                readonly type: "object";
                readonly required: ["cid", "playlist"];
                readonly properties: {
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly playlist: {
                        readonly type: "string";
                        readonly format: "uri";
                    };
                    readonly thumbnail: {
                        readonly type: "string";
                        readonly format: "uri";
                    };
                    readonly alt: {
                        readonly type: "string";
                        readonly maxGraphemes: 1000;
                        readonly maxLength: 10000;
                    };
                    readonly aspectRatio: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.embed.defs#aspectRatio";
                    };
                };
            };
        };
    };
    readonly AppBskyFeedDefs: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.defs";
        readonly defs: {
            readonly postView: {
                readonly type: "object";
                readonly required: ["uri", "cid", "author", "record", "indexedAt"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly author: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileViewBasic";
                    };
                    readonly record: {
                        readonly type: "unknown";
                    };
                    readonly embed: {
                        readonly type: "union";
                        readonly refs: ["lex:app.bsky.embed.images#view", "lex:app.bsky.embed.video#view", "lex:app.bsky.embed.external#view", "lex:app.bsky.embed.record#view", "lex:app.bsky.embed.recordWithMedia#view"];
                    };
                    readonly replyCount: {
                        readonly type: "integer";
                    };
                    readonly repostCount: {
                        readonly type: "integer";
                    };
                    readonly likeCount: {
                        readonly type: "integer";
                    };
                    readonly quoteCount: {
                        readonly type: "integer";
                    };
                    readonly indexedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly viewer: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.feed.defs#viewerState";
                    };
                    readonly labels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#label";
                        };
                    };
                    readonly threadgate: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.feed.defs#threadgateView";
                    };
                };
            };
            readonly viewerState: {
                readonly type: "object";
                readonly description: "Metadata about the requesting account's relationship with the subject content. Only has meaningful content for authed requests.";
                readonly properties: {
                    readonly repost: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly like: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly threadMuted: {
                        readonly type: "boolean";
                    };
                    readonly replyDisabled: {
                        readonly type: "boolean";
                    };
                    readonly embeddingDisabled: {
                        readonly type: "boolean";
                    };
                    readonly pinned: {
                        readonly type: "boolean";
                    };
                };
            };
            readonly threadContext: {
                readonly type: "object";
                readonly description: "Metadata about this post within the context of the thread it is in.";
                readonly properties: {
                    readonly rootAuthorLike: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                };
            };
            readonly feedViewPost: {
                readonly type: "object";
                readonly required: ["post"];
                readonly properties: {
                    readonly post: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.feed.defs#postView";
                    };
                    readonly reply: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.feed.defs#replyRef";
                    };
                    readonly reason: {
                        readonly type: "union";
                        readonly refs: ["lex:app.bsky.feed.defs#reasonRepost", "lex:app.bsky.feed.defs#reasonPin"];
                    };
                    readonly feedContext: {
                        readonly type: "string";
                        readonly description: "Context provided by feed generator that may be passed back alongside interactions.";
                        readonly maxLength: 2000;
                    };
                };
            };
            readonly replyRef: {
                readonly type: "object";
                readonly required: ["root", "parent"];
                readonly properties: {
                    readonly root: {
                        readonly type: "union";
                        readonly refs: ["lex:app.bsky.feed.defs#postView", "lex:app.bsky.feed.defs#notFoundPost", "lex:app.bsky.feed.defs#blockedPost"];
                    };
                    readonly parent: {
                        readonly type: "union";
                        readonly refs: ["lex:app.bsky.feed.defs#postView", "lex:app.bsky.feed.defs#notFoundPost", "lex:app.bsky.feed.defs#blockedPost"];
                    };
                    readonly grandparentAuthor: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileViewBasic";
                        readonly description: "When parent is a reply to another post, this is the author of that post.";
                    };
                };
            };
            readonly reasonRepost: {
                readonly type: "object";
                readonly required: ["by", "indexedAt"];
                readonly properties: {
                    readonly by: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileViewBasic";
                    };
                    readonly indexedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
            readonly reasonPin: {
                readonly type: "object";
                readonly properties: {};
            };
            readonly threadViewPost: {
                readonly type: "object";
                readonly required: ["post"];
                readonly properties: {
                    readonly post: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.feed.defs#postView";
                    };
                    readonly parent: {
                        readonly type: "union";
                        readonly refs: ["lex:app.bsky.feed.defs#threadViewPost", "lex:app.bsky.feed.defs#notFoundPost", "lex:app.bsky.feed.defs#blockedPost"];
                    };
                    readonly replies: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "union";
                            readonly refs: ["lex:app.bsky.feed.defs#threadViewPost", "lex:app.bsky.feed.defs#notFoundPost", "lex:app.bsky.feed.defs#blockedPost"];
                        };
                    };
                    readonly threadContext: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.feed.defs#threadContext";
                    };
                };
            };
            readonly notFoundPost: {
                readonly type: "object";
                readonly required: ["uri", "notFound"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly notFound: {
                        readonly type: "boolean";
                        readonly const: true;
                    };
                };
            };
            readonly blockedPost: {
                readonly type: "object";
                readonly required: ["uri", "blocked", "author"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly blocked: {
                        readonly type: "boolean";
                        readonly const: true;
                    };
                    readonly author: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.feed.defs#blockedAuthor";
                    };
                };
            };
            readonly blockedAuthor: {
                readonly type: "object";
                readonly required: ["did"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly viewer: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#viewerState";
                    };
                };
            };
            readonly generatorView: {
                readonly type: "object";
                readonly required: ["uri", "cid", "did", "creator", "displayName", "indexedAt"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly creator: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileView";
                    };
                    readonly displayName: {
                        readonly type: "string";
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly maxGraphemes: 300;
                        readonly maxLength: 3000;
                    };
                    readonly descriptionFacets: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.richtext.facet";
                        };
                    };
                    readonly avatar: {
                        readonly type: "string";
                        readonly format: "uri";
                    };
                    readonly likeCount: {
                        readonly type: "integer";
                        readonly minimum: 0;
                    };
                    readonly acceptsInteractions: {
                        readonly type: "boolean";
                    };
                    readonly labels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#label";
                        };
                    };
                    readonly viewer: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.feed.defs#generatorViewerState";
                    };
                    readonly contentMode: {
                        readonly type: "string";
                        readonly knownValues: ["app.bsky.feed.defs#contentModeUnspecified", "app.bsky.feed.defs#contentModeVideo"];
                    };
                    readonly indexedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
            readonly generatorViewerState: {
                readonly type: "object";
                readonly properties: {
                    readonly like: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                };
            };
            readonly skeletonFeedPost: {
                readonly type: "object";
                readonly required: ["post"];
                readonly properties: {
                    readonly post: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly reason: {
                        readonly type: "union";
                        readonly refs: ["lex:app.bsky.feed.defs#skeletonReasonRepost", "lex:app.bsky.feed.defs#skeletonReasonPin"];
                    };
                    readonly feedContext: {
                        readonly type: "string";
                        readonly description: "Context that will be passed through to client and may be passed to feed generator back alongside interactions.";
                        readonly maxLength: 2000;
                    };
                };
            };
            readonly skeletonReasonRepost: {
                readonly type: "object";
                readonly required: ["repost"];
                readonly properties: {
                    readonly repost: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                };
            };
            readonly skeletonReasonPin: {
                readonly type: "object";
                readonly properties: {};
            };
            readonly threadgateView: {
                readonly type: "object";
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly record: {
                        readonly type: "unknown";
                    };
                    readonly lists: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.graph.defs#listViewBasic";
                        };
                    };
                };
            };
            readonly interaction: {
                readonly type: "object";
                readonly properties: {
                    readonly item: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly event: {
                        readonly type: "string";
                        readonly knownValues: ["app.bsky.feed.defs#requestLess", "app.bsky.feed.defs#requestMore", "app.bsky.feed.defs#clickthroughItem", "app.bsky.feed.defs#clickthroughAuthor", "app.bsky.feed.defs#clickthroughReposter", "app.bsky.feed.defs#clickthroughEmbed", "app.bsky.feed.defs#interactionSeen", "app.bsky.feed.defs#interactionLike", "app.bsky.feed.defs#interactionRepost", "app.bsky.feed.defs#interactionReply", "app.bsky.feed.defs#interactionQuote", "app.bsky.feed.defs#interactionShare"];
                    };
                    readonly feedContext: {
                        readonly type: "string";
                        readonly description: "Context on a feed item that was originally supplied by the feed generator on getFeedSkeleton.";
                        readonly maxLength: 2000;
                    };
                };
            };
            readonly requestLess: {
                readonly type: "token";
                readonly description: "Request that less content like the given feed item be shown in the feed";
            };
            readonly requestMore: {
                readonly type: "token";
                readonly description: "Request that more content like the given feed item be shown in the feed";
            };
            readonly clickthroughItem: {
                readonly type: "token";
                readonly description: "User clicked through to the feed item";
            };
            readonly clickthroughAuthor: {
                readonly type: "token";
                readonly description: "User clicked through to the author of the feed item";
            };
            readonly clickthroughReposter: {
                readonly type: "token";
                readonly description: "User clicked through to the reposter of the feed item";
            };
            readonly clickthroughEmbed: {
                readonly type: "token";
                readonly description: "User clicked through to the embedded content of the feed item";
            };
            readonly contentModeUnspecified: {
                readonly type: "token";
                readonly description: "Declares the feed generator returns any types of posts.";
            };
            readonly contentModeVideo: {
                readonly type: "token";
                readonly description: "Declares the feed generator returns posts containing app.bsky.embed.video embeds.";
            };
            readonly interactionSeen: {
                readonly type: "token";
                readonly description: "Feed item was seen by user";
            };
            readonly interactionLike: {
                readonly type: "token";
                readonly description: "User liked the feed item";
            };
            readonly interactionRepost: {
                readonly type: "token";
                readonly description: "User reposted the feed item";
            };
            readonly interactionReply: {
                readonly type: "token";
                readonly description: "User replied to the feed item";
            };
            readonly interactionQuote: {
                readonly type: "token";
                readonly description: "User quoted the feed item";
            };
            readonly interactionShare: {
                readonly type: "token";
                readonly description: "User shared the feed item";
            };
        };
    };
    readonly AppBskyFeedDescribeFeedGenerator: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.describeFeedGenerator";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).";
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["did", "feeds"];
                        readonly properties: {
                            readonly did: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                            readonly feeds: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.feed.describeFeedGenerator#feed";
                                };
                            };
                            readonly links: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.feed.describeFeedGenerator#links";
                            };
                        };
                    };
                };
            };
            readonly feed: {
                readonly type: "object";
                readonly required: ["uri"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                };
            };
            readonly links: {
                readonly type: "object";
                readonly properties: {
                    readonly privacyPolicy: {
                        readonly type: "string";
                    };
                    readonly termsOfService: {
                        readonly type: "string";
                    };
                };
            };
        };
    };
    readonly AppBskyFeedGenerator: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.generator";
        readonly defs: {
            readonly main: {
                readonly type: "record";
                readonly description: "Record declaring of the existence of a feed generator, and containing metadata about it. The record can exist in any repository.";
                readonly key: "any";
                readonly record: {
                    readonly type: "object";
                    readonly required: ["did", "displayName", "createdAt"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly displayName: {
                            readonly type: "string";
                            readonly maxGraphemes: 24;
                            readonly maxLength: 240;
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly maxGraphemes: 300;
                            readonly maxLength: 3000;
                        };
                        readonly descriptionFacets: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.richtext.facet";
                            };
                        };
                        readonly avatar: {
                            readonly type: "blob";
                            readonly accept: ["image/png", "image/jpeg"];
                            readonly maxSize: 1000000;
                        };
                        readonly acceptsInteractions: {
                            readonly type: "boolean";
                            readonly description: "Declaration that a feed accepts feedback interactions from a client through app.bsky.feed.sendInteractions";
                        };
                        readonly labels: {
                            readonly type: "union";
                            readonly description: "Self-label values";
                            readonly refs: ["lex:com.atproto.label.defs#selfLabels"];
                        };
                        readonly contentMode: {
                            readonly type: "string";
                            readonly knownValues: ["app.bsky.feed.defs#contentModeUnspecified", "app.bsky.feed.defs#contentModeVideo"];
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyFeedGetActorFeeds: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.getActorFeeds";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get a list of feeds (feed generator records) created by the actor (in the actor's repo).";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["actor"];
                    readonly properties: {
                        readonly actor: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["feeds"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly feeds: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.feed.defs#generatorView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyFeedGetActorLikes: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.getActorLikes";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get a list of posts liked by an actor. Requires auth, actor must be the requesting account.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["actor"];
                    readonly properties: {
                        readonly actor: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["feed"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly feed: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.feed.defs#feedViewPost";
                                };
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "BlockedActor";
                }, {
                    readonly name: "BlockedByActor";
                }];
            };
        };
    };
    readonly AppBskyFeedGetAuthorFeed: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.getAuthorFeed";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get a view of an actor's 'author feed' (post and reposts by the author). Does not require auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["actor"];
                    readonly properties: {
                        readonly actor: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly filter: {
                            readonly type: "string";
                            readonly description: "Combinations of post/repost types to include in response.";
                            readonly knownValues: ["posts_with_replies", "posts_no_replies", "posts_with_media", "posts_and_author_threads", "posts_with_video"];
                            readonly default: "posts_with_replies";
                        };
                        readonly includePins: {
                            readonly type: "boolean";
                            readonly default: false;
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["feed"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly feed: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.feed.defs#feedViewPost";
                                };
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "BlockedActor";
                }, {
                    readonly name: "BlockedByActor";
                }];
            };
        };
    };
    readonly AppBskyFeedGetFeed: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.getFeed";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get a hydrated feed from an actor's selected feed generator. Implemented by App View.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["feed"];
                    readonly properties: {
                        readonly feed: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["feed"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly feed: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.feed.defs#feedViewPost";
                                };
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "UnknownFeed";
                }];
            };
        };
    };
    readonly AppBskyFeedGetFeedGenerator: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.getFeedGenerator";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get information about a feed generator. Implemented by AppView.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["feed"];
                    readonly properties: {
                        readonly feed: {
                            readonly type: "string";
                            readonly format: "at-uri";
                            readonly description: "AT-URI of the feed generator record.";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["view", "isOnline", "isValid"];
                        readonly properties: {
                            readonly view: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.feed.defs#generatorView";
                            };
                            readonly isOnline: {
                                readonly type: "boolean";
                                readonly description: "Indicates whether the feed generator service has been online recently, or else seems to be inactive.";
                            };
                            readonly isValid: {
                                readonly type: "boolean";
                                readonly description: "Indicates whether the feed generator service is compatible with the record declaration.";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyFeedGetFeedGenerators: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.getFeedGenerators";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get information about a list of feed generators.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["feeds"];
                    readonly properties: {
                        readonly feeds: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly format: "at-uri";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["feeds"];
                        readonly properties: {
                            readonly feeds: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.feed.defs#generatorView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyFeedGetFeedSkeleton: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.getFeedSkeleton";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["feed"];
                    readonly properties: {
                        readonly feed: {
                            readonly type: "string";
                            readonly format: "at-uri";
                            readonly description: "Reference to feed generator record describing the specific feed being requested.";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["feed"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly feed: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.feed.defs#skeletonFeedPost";
                                };
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "UnknownFeed";
                }];
            };
        };
    };
    readonly AppBskyFeedGetLikes: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.getLikes";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get like records which reference a subject (by AT-URI and CID).";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["uri"];
                    readonly properties: {
                        readonly uri: {
                            readonly type: "string";
                            readonly format: "at-uri";
                            readonly description: "AT-URI of the subject (eg, a post record).";
                        };
                        readonly cid: {
                            readonly type: "string";
                            readonly format: "cid";
                            readonly description: "CID of the subject record (aka, specific version of record), to filter likes.";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["uri", "likes"];
                        readonly properties: {
                            readonly uri: {
                                readonly type: "string";
                                readonly format: "at-uri";
                            };
                            readonly cid: {
                                readonly type: "string";
                                readonly format: "cid";
                            };
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly likes: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.feed.getLikes#like";
                                };
                            };
                        };
                    };
                };
            };
            readonly like: {
                readonly type: "object";
                readonly required: ["indexedAt", "createdAt", "actor"];
                readonly properties: {
                    readonly indexedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly actor: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileView";
                    };
                };
            };
        };
    };
    readonly AppBskyFeedGetListFeed: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.getListFeed";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["list"];
                    readonly properties: {
                        readonly list: {
                            readonly type: "string";
                            readonly format: "at-uri";
                            readonly description: "Reference (AT-URI) to the list record.";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["feed"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly feed: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.feed.defs#feedViewPost";
                                };
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "UnknownList";
                }];
            };
        };
    };
    readonly AppBskyFeedGetPostThread: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.getPostThread";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["uri"];
                    readonly properties: {
                        readonly uri: {
                            readonly type: "string";
                            readonly format: "at-uri";
                            readonly description: "Reference (AT-URI) to post record.";
                        };
                        readonly depth: {
                            readonly type: "integer";
                            readonly description: "How many levels of reply depth should be included in response.";
                            readonly default: 6;
                            readonly minimum: 0;
                            readonly maximum: 1000;
                        };
                        readonly parentHeight: {
                            readonly type: "integer";
                            readonly description: "How many levels of parent (and grandparent, etc) post to include.";
                            readonly default: 80;
                            readonly minimum: 0;
                            readonly maximum: 1000;
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["thread"];
                        readonly properties: {
                            readonly thread: {
                                readonly type: "union";
                                readonly refs: ["lex:app.bsky.feed.defs#threadViewPost", "lex:app.bsky.feed.defs#notFoundPost", "lex:app.bsky.feed.defs#blockedPost"];
                            };
                            readonly threadgate: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.feed.defs#threadgateView";
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "NotFound";
                }];
            };
        };
    };
    readonly AppBskyFeedGetPosts: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.getPosts";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as 'hydrating' a 'feed skeleton'.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["uris"];
                    readonly properties: {
                        readonly uris: {
                            readonly type: "array";
                            readonly description: "List of post AT-URIs to return hydrated views for.";
                            readonly items: {
                                readonly type: "string";
                                readonly format: "at-uri";
                            };
                            readonly maxLength: 25;
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["posts"];
                        readonly properties: {
                            readonly posts: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.feed.defs#postView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyFeedGetQuotes: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.getQuotes";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get a list of quotes for a given post.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["uri"];
                    readonly properties: {
                        readonly uri: {
                            readonly type: "string";
                            readonly format: "at-uri";
                            readonly description: "Reference (AT-URI) of post record";
                        };
                        readonly cid: {
                            readonly type: "string";
                            readonly format: "cid";
                            readonly description: "If supplied, filters to quotes of specific version (by CID) of the post record.";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["uri", "posts"];
                        readonly properties: {
                            readonly uri: {
                                readonly type: "string";
                                readonly format: "at-uri";
                            };
                            readonly cid: {
                                readonly type: "string";
                                readonly format: "cid";
                            };
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly posts: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.feed.defs#postView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyFeedGetRepostedBy: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.getRepostedBy";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get a list of reposts for a given post.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["uri"];
                    readonly properties: {
                        readonly uri: {
                            readonly type: "string";
                            readonly format: "at-uri";
                            readonly description: "Reference (AT-URI) of post record";
                        };
                        readonly cid: {
                            readonly type: "string";
                            readonly format: "cid";
                            readonly description: "If supplied, filters to reposts of specific version (by CID) of the post record.";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["uri", "repostedBy"];
                        readonly properties: {
                            readonly uri: {
                                readonly type: "string";
                                readonly format: "at-uri";
                            };
                            readonly cid: {
                                readonly type: "string";
                                readonly format: "cid";
                            };
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly repostedBy: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.actor.defs#profileView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyFeedGetSuggestedFeeds: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.getSuggestedFeeds";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get a list of suggested feeds (feed generators) for the requesting account.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["feeds"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly feeds: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.feed.defs#generatorView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyFeedGetTimeline: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.getTimeline";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get a view of the requesting account's home timeline. This is expected to be some form of reverse-chronological feed.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly algorithm: {
                            readonly type: "string";
                            readonly description: "Variant 'algorithm' for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism.";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["feed"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly feed: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.feed.defs#feedViewPost";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyFeedLike: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.like";
        readonly defs: {
            readonly main: {
                readonly type: "record";
                readonly description: "Record declaring a 'like' of a piece of subject content.";
                readonly key: "tid";
                readonly record: {
                    readonly type: "object";
                    readonly required: ["subject", "createdAt"];
                    readonly properties: {
                        readonly subject: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.repo.strongRef";
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyFeedPost: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.post";
        readonly defs: {
            readonly main: {
                readonly type: "record";
                readonly description: "Record containing a Bluesky post.";
                readonly key: "tid";
                readonly record: {
                    readonly type: "object";
                    readonly required: ["text", "createdAt"];
                    readonly properties: {
                        readonly text: {
                            readonly type: "string";
                            readonly maxLength: 3000;
                            readonly maxGraphemes: 300;
                            readonly description: "The primary post content. May be an empty string, if there are embeds.";
                        };
                        readonly entities: {
                            readonly type: "array";
                            readonly description: "DEPRECATED: replaced by app.bsky.richtext.facet.";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.feed.post#entity";
                            };
                        };
                        readonly facets: {
                            readonly type: "array";
                            readonly description: "Annotations of text (mentions, URLs, hashtags, etc)";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.richtext.facet";
                            };
                        };
                        readonly reply: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.feed.post#replyRef";
                        };
                        readonly embed: {
                            readonly type: "union";
                            readonly refs: ["lex:app.bsky.embed.images", "lex:app.bsky.embed.video", "lex:app.bsky.embed.external", "lex:app.bsky.embed.record", "lex:app.bsky.embed.recordWithMedia"];
                        };
                        readonly langs: {
                            readonly type: "array";
                            readonly description: "Indicates human language of post primary text content.";
                            readonly maxLength: 3;
                            readonly items: {
                                readonly type: "string";
                                readonly format: "language";
                            };
                        };
                        readonly labels: {
                            readonly type: "union";
                            readonly description: "Self-label values for this post. Effectively content warnings.";
                            readonly refs: ["lex:com.atproto.label.defs#selfLabels"];
                        };
                        readonly tags: {
                            readonly type: "array";
                            readonly description: "Additional hashtags, in addition to any included in post text and facets.";
                            readonly maxLength: 8;
                            readonly items: {
                                readonly type: "string";
                                readonly maxLength: 640;
                                readonly maxGraphemes: 64;
                            };
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "datetime";
                            readonly description: "Client-declared timestamp when this post was originally created.";
                        };
                    };
                };
            };
            readonly replyRef: {
                readonly type: "object";
                readonly required: ["root", "parent"];
                readonly properties: {
                    readonly root: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.repo.strongRef";
                    };
                    readonly parent: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.repo.strongRef";
                    };
                };
            };
            readonly entity: {
                readonly type: "object";
                readonly description: "Deprecated: use facets instead.";
                readonly required: ["index", "type", "value"];
                readonly properties: {
                    readonly index: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.feed.post#textSlice";
                    };
                    readonly type: {
                        readonly type: "string";
                        readonly description: "Expected values are 'mention' and 'link'.";
                    };
                    readonly value: {
                        readonly type: "string";
                    };
                };
            };
            readonly textSlice: {
                readonly type: "object";
                readonly description: "Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.";
                readonly required: ["start", "end"];
                readonly properties: {
                    readonly start: {
                        readonly type: "integer";
                        readonly minimum: 0;
                    };
                    readonly end: {
                        readonly type: "integer";
                        readonly minimum: 0;
                    };
                };
            };
        };
    };
    readonly AppBskyFeedPostgate: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.postgate";
        readonly defs: {
            readonly main: {
                readonly type: "record";
                readonly key: "tid";
                readonly description: "Record defining interaction rules for a post. The record key (rkey) of the postgate record must match the record key of the post, and that record must be in the same repository.";
                readonly record: {
                    readonly type: "object";
                    readonly required: ["post", "createdAt"];
                    readonly properties: {
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                        readonly post: {
                            readonly type: "string";
                            readonly format: "at-uri";
                            readonly description: "Reference (AT-URI) to the post record.";
                        };
                        readonly detachedEmbeddingUris: {
                            readonly type: "array";
                            readonly maxLength: 50;
                            readonly items: {
                                readonly type: "string";
                                readonly format: "at-uri";
                            };
                            readonly description: "List of AT-URIs embedding this post that the author has detached from.";
                        };
                        readonly embeddingRules: {
                            readonly description: "List of rules defining who can embed this post. If value is an empty array or is undefined, no particular rules apply and anyone can embed.";
                            readonly type: "array";
                            readonly maxLength: 5;
                            readonly items: {
                                readonly type: "union";
                                readonly refs: ["lex:app.bsky.feed.postgate#disableRule"];
                            };
                        };
                    };
                };
            };
            readonly disableRule: {
                readonly type: "object";
                readonly description: "Disables embedding of this post.";
                readonly properties: {};
            };
        };
    };
    readonly AppBskyFeedRepost: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.repost";
        readonly defs: {
            readonly main: {
                readonly description: "Record representing a 'repost' of an existing Bluesky post.";
                readonly type: "record";
                readonly key: "tid";
                readonly record: {
                    readonly type: "object";
                    readonly required: ["subject", "createdAt"];
                    readonly properties: {
                        readonly subject: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.repo.strongRef";
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyFeedSearchPosts: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.searchPosts";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Find posts matching search criteria, returning views of those posts.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["q"];
                    readonly properties: {
                        readonly q: {
                            readonly type: "string";
                            readonly description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.";
                        };
                        readonly sort: {
                            readonly type: "string";
                            readonly knownValues: ["top", "latest"];
                            readonly default: "latest";
                            readonly description: "Specifies the ranking order of results.";
                        };
                        readonly since: {
                            readonly type: "string";
                            readonly description: "Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD).";
                        };
                        readonly until: {
                            readonly type: "string";
                            readonly description: "Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD).";
                        };
                        readonly mentions: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                            readonly description: "Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions.";
                        };
                        readonly author: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                            readonly description: "Filter to posts by the given account. Handles are resolved to DID before query-time.";
                        };
                        readonly lang: {
                            readonly type: "string";
                            readonly format: "language";
                            readonly description: "Filter to posts in the given language. Expected to be based on post language field, though server may override language detection.";
                        };
                        readonly domain: {
                            readonly type: "string";
                            readonly description: "Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization.";
                        };
                        readonly url: {
                            readonly type: "string";
                            readonly format: "uri";
                            readonly description: "Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching.";
                        };
                        readonly tag: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly maxLength: 640;
                                readonly maxGraphemes: 64;
                            };
                            readonly description: "Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching.";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 25;
                        };
                        readonly cursor: {
                            readonly type: "string";
                            readonly description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set.";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["posts"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly hitsTotal: {
                                readonly type: "integer";
                                readonly description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.";
                            };
                            readonly posts: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.feed.defs#postView";
                                };
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "BadQueryString";
                }];
            };
        };
    };
    readonly AppBskyFeedSendInteractions: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.sendInteractions";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Send information about interactions with feed items back to the feed generator that served them.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["interactions"];
                        readonly properties: {
                            readonly interactions: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.feed.defs#interaction";
                                };
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly properties: {};
                    };
                };
            };
        };
    };
    readonly AppBskyFeedThreadgate: {
        readonly lexicon: 1;
        readonly id: "app.bsky.feed.threadgate";
        readonly defs: {
            readonly main: {
                readonly type: "record";
                readonly key: "tid";
                readonly description: "Record defining interaction gating rules for a thread (aka, reply controls). The record key (rkey) of the threadgate record must match the record key of the thread's root post, and that record must be in the same repository.";
                readonly record: {
                    readonly type: "object";
                    readonly required: ["post", "createdAt"];
                    readonly properties: {
                        readonly post: {
                            readonly type: "string";
                            readonly format: "at-uri";
                            readonly description: "Reference (AT-URI) to the post record.";
                        };
                        readonly allow: {
                            readonly description: "List of rules defining who can reply to this post. If value is an empty array, no one can reply. If value is undefined, anyone can reply.";
                            readonly type: "array";
                            readonly maxLength: 5;
                            readonly items: {
                                readonly type: "union";
                                readonly refs: ["lex:app.bsky.feed.threadgate#mentionRule", "lex:app.bsky.feed.threadgate#followerRule", "lex:app.bsky.feed.threadgate#followingRule", "lex:app.bsky.feed.threadgate#listRule"];
                            };
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                        readonly hiddenReplies: {
                            readonly type: "array";
                            readonly maxLength: 50;
                            readonly items: {
                                readonly type: "string";
                                readonly format: "at-uri";
                            };
                            readonly description: "List of hidden reply URIs.";
                        };
                    };
                };
            };
            readonly mentionRule: {
                readonly type: "object";
                readonly description: "Allow replies from actors mentioned in your post.";
                readonly properties: {};
            };
            readonly followerRule: {
                readonly type: "object";
                readonly description: "Allow replies from actors who follow you.";
                readonly properties: {};
            };
            readonly followingRule: {
                readonly type: "object";
                readonly description: "Allow replies from actors you follow.";
                readonly properties: {};
            };
            readonly listRule: {
                readonly type: "object";
                readonly description: "Allow replies from actors on a list.";
                readonly required: ["list"];
                readonly properties: {
                    readonly list: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                };
            };
        };
    };
    readonly AppBskyGraphBlock: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.block";
        readonly defs: {
            readonly main: {
                readonly type: "record";
                readonly description: "Record declaring a 'block' relationship against another account. NOTE: blocks are public in Bluesky; see blog posts for details.";
                readonly key: "tid";
                readonly record: {
                    readonly type: "object";
                    readonly required: ["subject", "createdAt"];
                    readonly properties: {
                        readonly subject: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "DID of the account to be blocked.";
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphDefs: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.defs";
        readonly defs: {
            readonly listViewBasic: {
                readonly type: "object";
                readonly required: ["uri", "cid", "name", "purpose"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly maxLength: 64;
                        readonly minLength: 1;
                    };
                    readonly purpose: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.graph.defs#listPurpose";
                    };
                    readonly avatar: {
                        readonly type: "string";
                        readonly format: "uri";
                    };
                    readonly listItemCount: {
                        readonly type: "integer";
                        readonly minimum: 0;
                    };
                    readonly labels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#label";
                        };
                    };
                    readonly viewer: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.graph.defs#listViewerState";
                    };
                    readonly indexedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
            readonly listView: {
                readonly type: "object";
                readonly required: ["uri", "cid", "creator", "name", "purpose", "indexedAt"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly creator: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileView";
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly maxLength: 64;
                        readonly minLength: 1;
                    };
                    readonly purpose: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.graph.defs#listPurpose";
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly maxGraphemes: 300;
                        readonly maxLength: 3000;
                    };
                    readonly descriptionFacets: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.richtext.facet";
                        };
                    };
                    readonly avatar: {
                        readonly type: "string";
                        readonly format: "uri";
                    };
                    readonly listItemCount: {
                        readonly type: "integer";
                        readonly minimum: 0;
                    };
                    readonly labels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#label";
                        };
                    };
                    readonly viewer: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.graph.defs#listViewerState";
                    };
                    readonly indexedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
            readonly listItemView: {
                readonly type: "object";
                readonly required: ["uri", "subject"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly subject: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileView";
                    };
                };
            };
            readonly starterPackView: {
                readonly type: "object";
                readonly required: ["uri", "cid", "record", "creator", "indexedAt"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly record: {
                        readonly type: "unknown";
                    };
                    readonly creator: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileViewBasic";
                    };
                    readonly list: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.graph.defs#listViewBasic";
                    };
                    readonly listItemsSample: {
                        readonly type: "array";
                        readonly maxLength: 12;
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.graph.defs#listItemView";
                        };
                    };
                    readonly feeds: {
                        readonly type: "array";
                        readonly maxLength: 3;
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.feed.defs#generatorView";
                        };
                    };
                    readonly joinedWeekCount: {
                        readonly type: "integer";
                        readonly minimum: 0;
                    };
                    readonly joinedAllTimeCount: {
                        readonly type: "integer";
                        readonly minimum: 0;
                    };
                    readonly labels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#label";
                        };
                    };
                    readonly indexedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
            readonly starterPackViewBasic: {
                readonly type: "object";
                readonly required: ["uri", "cid", "record", "creator", "indexedAt"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly record: {
                        readonly type: "unknown";
                    };
                    readonly creator: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileViewBasic";
                    };
                    readonly listItemCount: {
                        readonly type: "integer";
                        readonly minimum: 0;
                    };
                    readonly joinedWeekCount: {
                        readonly type: "integer";
                        readonly minimum: 0;
                    };
                    readonly joinedAllTimeCount: {
                        readonly type: "integer";
                        readonly minimum: 0;
                    };
                    readonly labels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#label";
                        };
                    };
                    readonly indexedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
            readonly listPurpose: {
                readonly type: "string";
                readonly knownValues: ["app.bsky.graph.defs#modlist", "app.bsky.graph.defs#curatelist", "app.bsky.graph.defs#referencelist"];
            };
            readonly modlist: {
                readonly type: "token";
                readonly description: "A list of actors to apply an aggregate moderation action (mute/block) on.";
            };
            readonly curatelist: {
                readonly type: "token";
                readonly description: "A list of actors used for curation purposes such as list feeds or interaction gating.";
            };
            readonly referencelist: {
                readonly type: "token";
                readonly description: "A list of actors used for only for reference purposes such as within a starter pack.";
            };
            readonly listViewerState: {
                readonly type: "object";
                readonly properties: {
                    readonly muted: {
                        readonly type: "boolean";
                    };
                    readonly blocked: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                };
            };
            readonly notFoundActor: {
                readonly type: "object";
                readonly description: "indicates that a handle or DID could not be resolved";
                readonly required: ["actor", "notFound"];
                readonly properties: {
                    readonly actor: {
                        readonly type: "string";
                        readonly format: "at-identifier";
                    };
                    readonly notFound: {
                        readonly type: "boolean";
                        readonly const: true;
                    };
                };
            };
            readonly relationship: {
                readonly type: "object";
                readonly description: "lists the bi-directional graph relationships between one actor (not indicated in the object), and the target actors (the DID included in the object)";
                readonly required: ["did"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly following: {
                        readonly type: "string";
                        readonly format: "at-uri";
                        readonly description: "if the actor follows this DID, this is the AT-URI of the follow record";
                    };
                    readonly followedBy: {
                        readonly type: "string";
                        readonly format: "at-uri";
                        readonly description: "if the actor is followed by this DID, contains the AT-URI of the follow record";
                    };
                };
            };
        };
    };
    readonly AppBskyGraphFollow: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.follow";
        readonly defs: {
            readonly main: {
                readonly type: "record";
                readonly description: "Record declaring a social 'follow' relationship of another account. Duplicate follows will be ignored by the AppView.";
                readonly key: "tid";
                readonly record: {
                    readonly type: "object";
                    readonly required: ["subject", "createdAt"];
                    readonly properties: {
                        readonly subject: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphGetActorStarterPacks: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.getActorStarterPacks";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get a list of starter packs created by the actor.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["actor"];
                    readonly properties: {
                        readonly actor: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["starterPacks"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly starterPacks: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.graph.defs#starterPackViewBasic";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphGetBlocks: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.getBlocks";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Enumerates which accounts the requesting account is currently blocking. Requires auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["blocks"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly blocks: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.actor.defs#profileView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphGetFollowers: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.getFollowers";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Enumerates accounts which follow a specified account (actor).";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["actor"];
                    readonly properties: {
                        readonly actor: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["subject", "followers"];
                        readonly properties: {
                            readonly subject: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.actor.defs#profileView";
                            };
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly followers: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.actor.defs#profileView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphGetFollows: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.getFollows";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Enumerates accounts which a specified account (actor) follows.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["actor"];
                    readonly properties: {
                        readonly actor: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["subject", "follows"];
                        readonly properties: {
                            readonly subject: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.actor.defs#profileView";
                            };
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly follows: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.actor.defs#profileView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphGetKnownFollowers: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.getKnownFollowers";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Enumerates accounts which follow a specified account (actor) and are followed by the viewer.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["actor"];
                    readonly properties: {
                        readonly actor: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["subject", "followers"];
                        readonly properties: {
                            readonly subject: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.actor.defs#profileView";
                            };
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly followers: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.actor.defs#profileView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphGetList: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.getList";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Gets a 'view' (with additional context) of a specified list.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["list"];
                    readonly properties: {
                        readonly list: {
                            readonly type: "string";
                            readonly format: "at-uri";
                            readonly description: "Reference (AT-URI) of the list record to hydrate.";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["list", "items"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly list: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.graph.defs#listView";
                            };
                            readonly items: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.graph.defs#listItemView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphGetListBlocks: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.getListBlocks";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get mod lists that the requesting account (actor) is blocking. Requires auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["lists"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly lists: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.graph.defs#listView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphGetListMutes: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.getListMutes";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Enumerates mod lists that the requesting account (actor) currently has muted. Requires auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["lists"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly lists: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.graph.defs#listView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphGetLists: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.getLists";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Enumerates the lists created by a specified account (actor).";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["actor"];
                    readonly properties: {
                        readonly actor: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                            readonly description: "The account (actor) to enumerate lists from.";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["lists"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly lists: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.graph.defs#listView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphGetMutes: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.getMutes";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Enumerates accounts that the requesting account (actor) currently has muted. Requires auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["mutes"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly mutes: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.actor.defs#profileView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphGetRelationships: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.getRelationships";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Enumerates public relationships between one account, and a list of other accounts. Does not require auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["actor"];
                    readonly properties: {
                        readonly actor: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                            readonly description: "Primary account requesting relationships for.";
                        };
                        readonly others: {
                            readonly type: "array";
                            readonly description: "List of 'other' accounts to be related back to the primary.";
                            readonly maxLength: 30;
                            readonly items: {
                                readonly type: "string";
                                readonly format: "at-identifier";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["relationships"];
                        readonly properties: {
                            readonly actor: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                            readonly relationships: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "union";
                                    readonly refs: ["lex:app.bsky.graph.defs#relationship", "lex:app.bsky.graph.defs#notFoundActor"];
                                };
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "ActorNotFound";
                    readonly description: "the primary actor at-identifier could not be resolved";
                }];
            };
        };
    };
    readonly AppBskyGraphGetStarterPack: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.getStarterPack";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Gets a view of a starter pack.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["starterPack"];
                    readonly properties: {
                        readonly starterPack: {
                            readonly type: "string";
                            readonly format: "at-uri";
                            readonly description: "Reference (AT-URI) of the starter pack record.";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["starterPack"];
                        readonly properties: {
                            readonly starterPack: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.graph.defs#starterPackView";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphGetStarterPacks: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.getStarterPacks";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get views for a list of starter packs.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["uris"];
                    readonly properties: {
                        readonly uris: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly format: "at-uri";
                            };
                            readonly maxLength: 25;
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["starterPacks"];
                        readonly properties: {
                            readonly starterPacks: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.graph.defs#starterPackViewBasic";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphGetSuggestedFollowsByActor: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.getSuggestedFollowsByActor";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Enumerates follows similar to a given account (actor). Expected use is to recommend additional accounts immediately after following one account.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["actor"];
                    readonly properties: {
                        readonly actor: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["suggestions"];
                        readonly properties: {
                            readonly suggestions: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.actor.defs#profileView";
                                };
                            };
                            readonly isFallback: {
                                readonly type: "boolean";
                                readonly description: "If true, response has fallen-back to generic results, and is not scoped using relativeToDid";
                                readonly default: false;
                            };
                            readonly recId: {
                                readonly type: "integer";
                                readonly description: "Snowflake for this recommendation, use when submitting recommendation events.";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphList: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.list";
        readonly defs: {
            readonly main: {
                readonly type: "record";
                readonly description: "Record representing a list of accounts (actors). Scope includes both moderation-oriented lists and curration-oriented lists.";
                readonly key: "tid";
                readonly record: {
                    readonly type: "object";
                    readonly required: ["name", "purpose", "createdAt"];
                    readonly properties: {
                        readonly purpose: {
                            readonly type: "ref";
                            readonly description: "Defines the purpose of the list (aka, moderation-oriented or curration-oriented)";
                            readonly ref: "lex:app.bsky.graph.defs#listPurpose";
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly maxLength: 64;
                            readonly minLength: 1;
                            readonly description: "Display name for list; can not be empty.";
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly maxGraphemes: 300;
                            readonly maxLength: 3000;
                        };
                        readonly descriptionFacets: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.richtext.facet";
                            };
                        };
                        readonly avatar: {
                            readonly type: "blob";
                            readonly accept: ["image/png", "image/jpeg"];
                            readonly maxSize: 1000000;
                        };
                        readonly labels: {
                            readonly type: "union";
                            readonly refs: ["lex:com.atproto.label.defs#selfLabels"];
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphListblock: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.listblock";
        readonly defs: {
            readonly main: {
                readonly type: "record";
                readonly description: "Record representing a block relationship against an entire an entire list of accounts (actors).";
                readonly key: "tid";
                readonly record: {
                    readonly type: "object";
                    readonly required: ["subject", "createdAt"];
                    readonly properties: {
                        readonly subject: {
                            readonly type: "string";
                            readonly format: "at-uri";
                            readonly description: "Reference (AT-URI) to the mod list record.";
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphListitem: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.listitem";
        readonly defs: {
            readonly main: {
                readonly type: "record";
                readonly description: "Record representing an account's inclusion on a specific list. The AppView will ignore duplicate listitem records.";
                readonly key: "tid";
                readonly record: {
                    readonly type: "object";
                    readonly required: ["subject", "list", "createdAt"];
                    readonly properties: {
                        readonly subject: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "The account which is included on the list.";
                        };
                        readonly list: {
                            readonly type: "string";
                            readonly format: "at-uri";
                            readonly description: "Reference (AT-URI) to the list record (app.bsky.graph.list).";
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphMuteActor: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.muteActor";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Creates a mute relationship for the specified account. Mutes are private in Bluesky. Requires auth.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["actor"];
                        readonly properties: {
                            readonly actor: {
                                readonly type: "string";
                                readonly format: "at-identifier";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphMuteActorList: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.muteActorList";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Creates a mute relationship for the specified list of accounts. Mutes are private in Bluesky. Requires auth.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["list"];
                        readonly properties: {
                            readonly list: {
                                readonly type: "string";
                                readonly format: "at-uri";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphMuteThread: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.muteThread";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Mutes a thread preventing notifications from the thread and any of its children. Mutes are private in Bluesky. Requires auth.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["root"];
                        readonly properties: {
                            readonly root: {
                                readonly type: "string";
                                readonly format: "at-uri";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphSearchStarterPacks: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.searchStarterPacks";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Find starter packs matching search criteria. Does not require auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["q"];
                    readonly properties: {
                        readonly q: {
                            readonly type: "string";
                            readonly description: "Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 25;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["starterPacks"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly starterPacks: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.graph.defs#starterPackViewBasic";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphStarterpack: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.starterpack";
        readonly defs: {
            readonly main: {
                readonly type: "record";
                readonly description: "Record defining a starter pack of actors and feeds for new users.";
                readonly key: "tid";
                readonly record: {
                    readonly type: "object";
                    readonly required: ["name", "list", "createdAt"];
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly maxGraphemes: 50;
                            readonly maxLength: 500;
                            readonly minLength: 1;
                            readonly description: "Display name for starter pack; can not be empty.";
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly maxGraphemes: 300;
                            readonly maxLength: 3000;
                        };
                        readonly descriptionFacets: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.richtext.facet";
                            };
                        };
                        readonly list: {
                            readonly type: "string";
                            readonly format: "at-uri";
                            readonly description: "Reference (AT-URI) to the list record.";
                        };
                        readonly feeds: {
                            readonly type: "array";
                            readonly maxLength: 3;
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.graph.starterpack#feedItem";
                            };
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                    };
                };
            };
            readonly feedItem: {
                readonly type: "object";
                readonly required: ["uri"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                };
            };
        };
    };
    readonly AppBskyGraphUnmuteActor: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.unmuteActor";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Unmutes the specified account. Requires auth.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["actor"];
                        readonly properties: {
                            readonly actor: {
                                readonly type: "string";
                                readonly format: "at-identifier";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphUnmuteActorList: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.unmuteActorList";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Unmutes the specified list of accounts. Requires auth.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["list"];
                        readonly properties: {
                            readonly list: {
                                readonly type: "string";
                                readonly format: "at-uri";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyGraphUnmuteThread: {
        readonly lexicon: 1;
        readonly id: "app.bsky.graph.unmuteThread";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Unmutes the specified thread. Requires auth.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["root"];
                        readonly properties: {
                            readonly root: {
                                readonly type: "string";
                                readonly format: "at-uri";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyLabelerDefs: {
        readonly lexicon: 1;
        readonly id: "app.bsky.labeler.defs";
        readonly defs: {
            readonly labelerView: {
                readonly type: "object";
                readonly required: ["uri", "cid", "creator", "indexedAt"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly creator: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileView";
                    };
                    readonly likeCount: {
                        readonly type: "integer";
                        readonly minimum: 0;
                    };
                    readonly viewer: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.labeler.defs#labelerViewerState";
                    };
                    readonly indexedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly labels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#label";
                        };
                    };
                };
            };
            readonly labelerViewDetailed: {
                readonly type: "object";
                readonly required: ["uri", "cid", "creator", "policies", "indexedAt"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly creator: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileView";
                    };
                    readonly policies: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.labeler.defs#labelerPolicies";
                    };
                    readonly likeCount: {
                        readonly type: "integer";
                        readonly minimum: 0;
                    };
                    readonly viewer: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.labeler.defs#labelerViewerState";
                    };
                    readonly indexedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly labels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#label";
                        };
                    };
                };
            };
            readonly labelerViewerState: {
                readonly type: "object";
                readonly properties: {
                    readonly like: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                };
            };
            readonly labelerPolicies: {
                readonly type: "object";
                readonly required: ["labelValues"];
                readonly properties: {
                    readonly labelValues: {
                        readonly type: "array";
                        readonly description: "The label values which this labeler publishes. May include global or custom labels.";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#labelValue";
                        };
                    };
                    readonly labelValueDefinitions: {
                        readonly type: "array";
                        readonly description: "Label values created by this labeler and scoped exclusively to it. Labels defined here will override global label definitions for this labeler.";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#labelValueDefinition";
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyLabelerGetServices: {
        readonly lexicon: 1;
        readonly id: "app.bsky.labeler.getServices";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get information about a list of labeler services.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["dids"];
                    readonly properties: {
                        readonly dids: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                        };
                        readonly detailed: {
                            readonly type: "boolean";
                            readonly default: false;
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["views"];
                        readonly properties: {
                            readonly views: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "union";
                                    readonly refs: ["lex:app.bsky.labeler.defs#labelerView", "lex:app.bsky.labeler.defs#labelerViewDetailed"];
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyLabelerService: {
        readonly lexicon: 1;
        readonly id: "app.bsky.labeler.service";
        readonly defs: {
            readonly main: {
                readonly type: "record";
                readonly description: "A declaration of the existence of labeler service.";
                readonly key: "literal:self";
                readonly record: {
                    readonly type: "object";
                    readonly required: ["policies", "createdAt"];
                    readonly properties: {
                        readonly policies: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.labeler.defs#labelerPolicies";
                        };
                        readonly labels: {
                            readonly type: "union";
                            readonly refs: ["lex:com.atproto.label.defs#selfLabels"];
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyNotificationGetUnreadCount: {
        readonly lexicon: 1;
        readonly id: "app.bsky.notification.getUnreadCount";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Count the number of unread notifications for the requesting account. Requires auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly priority: {
                            readonly type: "boolean";
                        };
                        readonly seenAt: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["count"];
                        readonly properties: {
                            readonly count: {
                                readonly type: "integer";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyNotificationListNotifications: {
        readonly lexicon: 1;
        readonly id: "app.bsky.notification.listNotifications";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Enumerate notifications for the requesting account. Requires auth.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly reasons: {
                            readonly description: "Notification reasons to include in response.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "A reason that matches the reason property of #notification.";
                            };
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly priority: {
                            readonly type: "boolean";
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly seenAt: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["notifications"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly notifications: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.notification.listNotifications#notification";
                                };
                            };
                            readonly priority: {
                                readonly type: "boolean";
                            };
                            readonly seenAt: {
                                readonly type: "string";
                                readonly format: "datetime";
                            };
                        };
                    };
                };
            };
            readonly notification: {
                readonly type: "object";
                readonly required: ["uri", "cid", "author", "reason", "record", "isRead", "indexedAt"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly author: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileView";
                    };
                    readonly reason: {
                        readonly type: "string";
                        readonly description: "Expected values are 'like', 'repost', 'follow', 'mention', 'reply', 'quote', and 'starterpack-joined'.";
                        readonly knownValues: ["like", "repost", "follow", "mention", "reply", "quote", "starterpack-joined"];
                    };
                    readonly reasonSubject: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly record: {
                        readonly type: "unknown";
                    };
                    readonly isRead: {
                        readonly type: "boolean";
                    };
                    readonly indexedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly labels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#label";
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyNotificationPutPreferences: {
        readonly lexicon: 1;
        readonly id: "app.bsky.notification.putPreferences";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Set notification-related preferences for an account. Requires auth.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["priority"];
                        readonly properties: {
                            readonly priority: {
                                readonly type: "boolean";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyNotificationRegisterPush: {
        readonly lexicon: 1;
        readonly id: "app.bsky.notification.registerPush";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Register to receive push notifications, via a specified service, for the requesting account. Requires auth.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["serviceDid", "token", "platform", "appId"];
                        readonly properties: {
                            readonly serviceDid: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                            readonly token: {
                                readonly type: "string";
                            };
                            readonly platform: {
                                readonly type: "string";
                                readonly knownValues: ["ios", "android", "web"];
                            };
                            readonly appId: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyNotificationUpdateSeen: {
        readonly lexicon: 1;
        readonly id: "app.bsky.notification.updateSeen";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Notify server that the requesting account has seen notifications. Requires auth.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["seenAt"];
                        readonly properties: {
                            readonly seenAt: {
                                readonly type: "string";
                                readonly format: "datetime";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyRichtextFacet: {
        readonly lexicon: 1;
        readonly id: "app.bsky.richtext.facet";
        readonly defs: {
            readonly main: {
                readonly type: "object";
                readonly description: "Annotation of a sub-string within rich text.";
                readonly required: ["index", "features"];
                readonly properties: {
                    readonly index: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.richtext.facet#byteSlice";
                    };
                    readonly features: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "union";
                            readonly refs: ["lex:app.bsky.richtext.facet#mention", "lex:app.bsky.richtext.facet#link", "lex:app.bsky.richtext.facet#tag"];
                        };
                    };
                };
            };
            readonly mention: {
                readonly type: "object";
                readonly description: "Facet feature for mention of another account. The text is usually a handle, including a '@' prefix, but the facet reference is a DID.";
                readonly required: ["did"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                };
            };
            readonly link: {
                readonly type: "object";
                readonly description: "Facet feature for a URL. The text URL may have been simplified or truncated, but the facet reference should be a complete URL.";
                readonly required: ["uri"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "uri";
                    };
                };
            };
            readonly tag: {
                readonly type: "object";
                readonly description: "Facet feature for a hashtag. The text usually includes a '#' prefix, but the facet reference should not (except in the case of 'double hash tags').";
                readonly required: ["tag"];
                readonly properties: {
                    readonly tag: {
                        readonly type: "string";
                        readonly maxLength: 640;
                        readonly maxGraphemes: 64;
                    };
                };
            };
            readonly byteSlice: {
                readonly type: "object";
                readonly description: "Specifies the sub-string range a facet feature applies to. Start index is inclusive, end index is exclusive. Indices are zero-indexed, counting bytes of the UTF-8 encoded text. NOTE: some languages, like Javascript, use UTF-16 or Unicode codepoints for string slice indexing; in these languages, convert to byte arrays before working with facets.";
                readonly required: ["byteStart", "byteEnd"];
                readonly properties: {
                    readonly byteStart: {
                        readonly type: "integer";
                        readonly minimum: 0;
                    };
                    readonly byteEnd: {
                        readonly type: "integer";
                        readonly minimum: 0;
                    };
                };
            };
        };
    };
    readonly AppBskyUnspeccedDefs: {
        readonly lexicon: 1;
        readonly id: "app.bsky.unspecced.defs";
        readonly defs: {
            readonly skeletonSearchPost: {
                readonly type: "object";
                readonly required: ["uri"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                };
            };
            readonly skeletonSearchActor: {
                readonly type: "object";
                readonly required: ["did"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                };
            };
            readonly skeletonSearchStarterPack: {
                readonly type: "object";
                readonly required: ["uri"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                };
            };
            readonly trendingTopic: {
                readonly type: "object";
                readonly required: ["topic", "link"];
                readonly properties: {
                    readonly topic: {
                        readonly type: "string";
                    };
                    readonly displayName: {
                        readonly type: "string";
                    };
                    readonly description: {
                        readonly type: "string";
                    };
                    readonly link: {
                        readonly type: "string";
                    };
                };
            };
        };
    };
    readonly AppBskyUnspeccedGetConfig: {
        readonly lexicon: 1;
        readonly id: "app.bsky.unspecced.getConfig";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get miscellaneous runtime configuration.";
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: [];
                        readonly properties: {
                            readonly checkEmailConfirmed: {
                                readonly type: "boolean";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyUnspeccedGetPopularFeedGenerators: {
        readonly lexicon: 1;
        readonly id: "app.bsky.unspecced.getPopularFeedGenerators";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "An unspecced view of globally popular feed generators.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly query: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["feeds"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly feeds: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.feed.defs#generatorView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyUnspeccedGetSuggestionsSkeleton: {
        readonly lexicon: 1;
        readonly id: "app.bsky.unspecced.getSuggestionsSkeleton";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get a skeleton of suggested actors. Intended to be called and then hydrated through app.bsky.actor.getSuggestions";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly viewer: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly relativeToDid: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "DID of the account to get suggestions relative to. If not provided, suggestions will be based on the viewer.";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["actors"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly actors: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.unspecced.defs#skeletonSearchActor";
                                };
                            };
                            readonly relativeToDid: {
                                readonly type: "string";
                                readonly format: "did";
                                readonly description: "DID of the account these suggestions are relative to. If this is returned undefined, suggestions are based on the viewer.";
                            };
                            readonly recId: {
                                readonly type: "integer";
                                readonly description: "Snowflake for this recommendation, use when submitting recommendation events.";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyUnspeccedGetTaggedSuggestions: {
        readonly lexicon: 1;
        readonly id: "app.bsky.unspecced.getTaggedSuggestions";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get a list of suggestions (feeds and users) tagged with categories";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {};
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["suggestions"];
                        readonly properties: {
                            readonly suggestions: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.unspecced.getTaggedSuggestions#suggestion";
                                };
                            };
                        };
                    };
                };
            };
            readonly suggestion: {
                readonly type: "object";
                readonly required: ["tag", "subjectType", "subject"];
                readonly properties: {
                    readonly tag: {
                        readonly type: "string";
                    };
                    readonly subjectType: {
                        readonly type: "string";
                        readonly knownValues: ["actor", "feed"];
                    };
                    readonly subject: {
                        readonly type: "string";
                        readonly format: "uri";
                    };
                };
            };
        };
    };
    readonly AppBskyUnspeccedGetTrendingTopics: {
        readonly lexicon: 1;
        readonly id: "app.bsky.unspecced.getTrendingTopics";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get a list of trending topics";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly viewer: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 25;
                            readonly default: 10;
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["topics", "suggested"];
                        readonly properties: {
                            readonly topics: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.unspecced.defs#trendingTopic";
                                };
                            };
                            readonly suggested: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.unspecced.defs#trendingTopic";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyUnspeccedSearchActorsSkeleton: {
        readonly lexicon: 1;
        readonly id: "app.bsky.unspecced.searchActorsSkeleton";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Backend Actors (profile) search, returns only skeleton.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["q"];
                    readonly properties: {
                        readonly q: {
                            readonly type: "string";
                            readonly description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. For typeahead search, only simple term match is supported, not full syntax.";
                        };
                        readonly viewer: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.";
                        };
                        readonly typeahead: {
                            readonly type: "boolean";
                            readonly description: "If true, acts as fast/simple 'typeahead' query.";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 25;
                        };
                        readonly cursor: {
                            readonly type: "string";
                            readonly description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set.";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["actors"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly hitsTotal: {
                                readonly type: "integer";
                                readonly description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.";
                            };
                            readonly actors: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.unspecced.defs#skeletonSearchActor";
                                };
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "BadQueryString";
                }];
            };
        };
    };
    readonly AppBskyUnspeccedSearchPostsSkeleton: {
        readonly lexicon: 1;
        readonly id: "app.bsky.unspecced.searchPostsSkeleton";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Backend Posts search, returns only skeleton";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["q"];
                    readonly properties: {
                        readonly q: {
                            readonly type: "string";
                            readonly description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.";
                        };
                        readonly sort: {
                            readonly type: "string";
                            readonly knownValues: ["top", "latest"];
                            readonly default: "latest";
                            readonly description: "Specifies the ranking order of results.";
                        };
                        readonly since: {
                            readonly type: "string";
                            readonly description: "Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD).";
                        };
                        readonly until: {
                            readonly type: "string";
                            readonly description: "Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD).";
                        };
                        readonly mentions: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                            readonly description: "Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions.";
                        };
                        readonly author: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                            readonly description: "Filter to posts by the given account. Handles are resolved to DID before query-time.";
                        };
                        readonly lang: {
                            readonly type: "string";
                            readonly format: "language";
                            readonly description: "Filter to posts in the given language. Expected to be based on post language field, though server may override language detection.";
                        };
                        readonly domain: {
                            readonly type: "string";
                            readonly description: "Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization.";
                        };
                        readonly url: {
                            readonly type: "string";
                            readonly format: "uri";
                            readonly description: "Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching.";
                        };
                        readonly tag: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly maxLength: 640;
                                readonly maxGraphemes: 64;
                            };
                            readonly description: "Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching.";
                        };
                        readonly viewer: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "DID of the account making the request (not included for public/unauthenticated queries). Used for 'from:me' queries.";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 25;
                        };
                        readonly cursor: {
                            readonly type: "string";
                            readonly description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set.";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["posts"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly hitsTotal: {
                                readonly type: "integer";
                                readonly description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.";
                            };
                            readonly posts: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.unspecced.defs#skeletonSearchPost";
                                };
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "BadQueryString";
                }];
            };
        };
    };
    readonly AppBskyUnspeccedSearchStarterPacksSkeleton: {
        readonly lexicon: 1;
        readonly id: "app.bsky.unspecced.searchStarterPacksSkeleton";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Backend Starter Pack search, returns only skeleton.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["q"];
                    readonly properties: {
                        readonly q: {
                            readonly type: "string";
                            readonly description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.";
                        };
                        readonly viewer: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "DID of the account making the request (not included for public/unauthenticated queries).";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 25;
                        };
                        readonly cursor: {
                            readonly type: "string";
                            readonly description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set.";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["starterPacks"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly hitsTotal: {
                                readonly type: "integer";
                                readonly description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.";
                            };
                            readonly starterPacks: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:app.bsky.unspecced.defs#skeletonSearchStarterPack";
                                };
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "BadQueryString";
                }];
            };
        };
    };
    readonly AppBskyVideoDefs: {
        readonly lexicon: 1;
        readonly id: "app.bsky.video.defs";
        readonly defs: {
            readonly jobStatus: {
                readonly type: "object";
                readonly required: ["jobId", "did", "state"];
                readonly properties: {
                    readonly jobId: {
                        readonly type: "string";
                    };
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly state: {
                        readonly type: "string";
                        readonly description: "The state of the video processing job. All values not listed as a known value indicate that the job is in process.";
                        readonly knownValues: ["JOB_STATE_COMPLETED", "JOB_STATE_FAILED"];
                    };
                    readonly progress: {
                        readonly type: "integer";
                        readonly minimum: 0;
                        readonly maximum: 100;
                        readonly description: "Progress within the current processing state.";
                    };
                    readonly blob: {
                        readonly type: "blob";
                    };
                    readonly error: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "string";
                    };
                };
            };
        };
    };
    readonly AppBskyVideoGetJobStatus: {
        readonly lexicon: 1;
        readonly id: "app.bsky.video.getJobStatus";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get status details for a video processing job.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["jobId"];
                    readonly properties: {
                        readonly jobId: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["jobStatus"];
                        readonly properties: {
                            readonly jobStatus: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.video.defs#jobStatus";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyVideoGetUploadLimits: {
        readonly lexicon: 1;
        readonly id: "app.bsky.video.getUploadLimits";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get video upload limits for the authenticated user.";
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["canUpload"];
                        readonly properties: {
                            readonly canUpload: {
                                readonly type: "boolean";
                            };
                            readonly remainingDailyVideos: {
                                readonly type: "integer";
                            };
                            readonly remainingDailyBytes: {
                                readonly type: "integer";
                            };
                            readonly message: {
                                readonly type: "string";
                            };
                            readonly error: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly AppBskyVideoUploadVideo: {
        readonly lexicon: 1;
        readonly id: "app.bsky.video.uploadVideo";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Upload a video to be processed then stored on the PDS.";
                readonly input: {
                    readonly encoding: "video/mp4";
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["jobStatus"];
                        readonly properties: {
                            readonly jobStatus: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.video.defs#jobStatus";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ChatBskyActorDeclaration: {
        readonly lexicon: 1;
        readonly id: "chat.bsky.actor.declaration";
        readonly defs: {
            readonly main: {
                readonly type: "record";
                readonly description: "A declaration of a Bluesky chat account.";
                readonly key: "literal:self";
                readonly record: {
                    readonly type: "object";
                    readonly required: ["allowIncoming"];
                    readonly properties: {
                        readonly allowIncoming: {
                            readonly type: "string";
                            readonly knownValues: ["all", "none", "following"];
                        };
                    };
                };
            };
        };
    };
    readonly ChatBskyActorDefs: {
        readonly lexicon: 1;
        readonly id: "chat.bsky.actor.defs";
        readonly defs: {
            readonly profileViewBasic: {
                readonly type: "object";
                readonly required: ["did", "handle"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly handle: {
                        readonly type: "string";
                        readonly format: "handle";
                    };
                    readonly displayName: {
                        readonly type: "string";
                        readonly maxGraphemes: 64;
                        readonly maxLength: 640;
                    };
                    readonly avatar: {
                        readonly type: "string";
                        readonly format: "uri";
                    };
                    readonly associated: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileAssociated";
                    };
                    readonly viewer: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#viewerState";
                    };
                    readonly labels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#label";
                        };
                    };
                    readonly chatDisabled: {
                        readonly type: "boolean";
                        readonly description: "Set to true when the actor cannot actively participate in converations";
                    };
                };
            };
        };
    };
    readonly ChatBskyActorDeleteAccount: {
        readonly lexicon: 1;
        readonly id: "chat.bsky.actor.deleteAccount";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly properties: {};
                    };
                };
            };
        };
    };
    readonly ChatBskyActorExportAccountData: {
        readonly lexicon: 1;
        readonly id: "chat.bsky.actor.exportAccountData";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly output: {
                    readonly encoding: "application/jsonl";
                };
            };
        };
    };
    readonly ChatBskyConvoDefs: {
        readonly lexicon: 1;
        readonly id: "chat.bsky.convo.defs";
        readonly defs: {
            readonly messageRef: {
                readonly type: "object";
                readonly required: ["did", "messageId", "convoId"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly convoId: {
                        readonly type: "string";
                    };
                    readonly messageId: {
                        readonly type: "string";
                    };
                };
            };
            readonly messageInput: {
                readonly type: "object";
                readonly required: ["text"];
                readonly properties: {
                    readonly text: {
                        readonly type: "string";
                        readonly maxLength: 10000;
                        readonly maxGraphemes: 1000;
                    };
                    readonly facets: {
                        readonly type: "array";
                        readonly description: "Annotations of text (mentions, URLs, hashtags, etc)";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.richtext.facet";
                        };
                    };
                    readonly embed: {
                        readonly type: "union";
                        readonly refs: ["lex:app.bsky.embed.record"];
                    };
                };
            };
            readonly messageView: {
                readonly type: "object";
                readonly required: ["id", "rev", "text", "sender", "sentAt"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly rev: {
                        readonly type: "string";
                    };
                    readonly text: {
                        readonly type: "string";
                        readonly maxLength: 10000;
                        readonly maxGraphemes: 1000;
                    };
                    readonly facets: {
                        readonly type: "array";
                        readonly description: "Annotations of text (mentions, URLs, hashtags, etc)";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.richtext.facet";
                        };
                    };
                    readonly embed: {
                        readonly type: "union";
                        readonly refs: ["lex:app.bsky.embed.record#view"];
                    };
                    readonly sender: {
                        readonly type: "ref";
                        readonly ref: "lex:chat.bsky.convo.defs#messageViewSender";
                    };
                    readonly sentAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
            readonly deletedMessageView: {
                readonly type: "object";
                readonly required: ["id", "rev", "sender", "sentAt"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly rev: {
                        readonly type: "string";
                    };
                    readonly sender: {
                        readonly type: "ref";
                        readonly ref: "lex:chat.bsky.convo.defs#messageViewSender";
                    };
                    readonly sentAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
            readonly messageViewSender: {
                readonly type: "object";
                readonly required: ["did"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                };
            };
            readonly convoView: {
                readonly type: "object";
                readonly required: ["id", "rev", "members", "muted", "unreadCount"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly rev: {
                        readonly type: "string";
                    };
                    readonly members: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:chat.bsky.actor.defs#profileViewBasic";
                        };
                    };
                    readonly lastMessage: {
                        readonly type: "union";
                        readonly refs: ["lex:chat.bsky.convo.defs#messageView", "lex:chat.bsky.convo.defs#deletedMessageView"];
                    };
                    readonly muted: {
                        readonly type: "boolean";
                    };
                    readonly opened: {
                        readonly type: "boolean";
                    };
                    readonly unreadCount: {
                        readonly type: "integer";
                    };
                };
            };
            readonly logBeginConvo: {
                readonly type: "object";
                readonly required: ["rev", "convoId"];
                readonly properties: {
                    readonly rev: {
                        readonly type: "string";
                    };
                    readonly convoId: {
                        readonly type: "string";
                    };
                };
            };
            readonly logLeaveConvo: {
                readonly type: "object";
                readonly required: ["rev", "convoId"];
                readonly properties: {
                    readonly rev: {
                        readonly type: "string";
                    };
                    readonly convoId: {
                        readonly type: "string";
                    };
                };
            };
            readonly logCreateMessage: {
                readonly type: "object";
                readonly required: ["rev", "convoId", "message"];
                readonly properties: {
                    readonly rev: {
                        readonly type: "string";
                    };
                    readonly convoId: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "union";
                        readonly refs: ["lex:chat.bsky.convo.defs#messageView", "lex:chat.bsky.convo.defs#deletedMessageView"];
                    };
                };
            };
            readonly logDeleteMessage: {
                readonly type: "object";
                readonly required: ["rev", "convoId", "message"];
                readonly properties: {
                    readonly rev: {
                        readonly type: "string";
                    };
                    readonly convoId: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "union";
                        readonly refs: ["lex:chat.bsky.convo.defs#messageView", "lex:chat.bsky.convo.defs#deletedMessageView"];
                    };
                };
            };
        };
    };
    readonly ChatBskyConvoDeleteMessageForSelf: {
        readonly lexicon: 1;
        readonly id: "chat.bsky.convo.deleteMessageForSelf";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["convoId", "messageId"];
                        readonly properties: {
                            readonly convoId: {
                                readonly type: "string";
                            };
                            readonly messageId: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "ref";
                        readonly ref: "lex:chat.bsky.convo.defs#deletedMessageView";
                    };
                };
            };
        };
    };
    readonly ChatBskyConvoGetConvo: {
        readonly lexicon: 1;
        readonly id: "chat.bsky.convo.getConvo";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["convoId"];
                    readonly properties: {
                        readonly convoId: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["convo"];
                        readonly properties: {
                            readonly convo: {
                                readonly type: "ref";
                                readonly ref: "lex:chat.bsky.convo.defs#convoView";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ChatBskyConvoGetConvoForMembers: {
        readonly lexicon: 1;
        readonly id: "chat.bsky.convo.getConvoForMembers";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["members"];
                    readonly properties: {
                        readonly members: {
                            readonly type: "array";
                            readonly minLength: 1;
                            readonly maxLength: 10;
                            readonly items: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["convo"];
                        readonly properties: {
                            readonly convo: {
                                readonly type: "ref";
                                readonly ref: "lex:chat.bsky.convo.defs#convoView";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ChatBskyConvoGetLog: {
        readonly lexicon: 1;
        readonly id: "chat.bsky.convo.getLog";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: [];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["logs"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly logs: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "union";
                                    readonly refs: ["lex:chat.bsky.convo.defs#logBeginConvo", "lex:chat.bsky.convo.defs#logLeaveConvo", "lex:chat.bsky.convo.defs#logCreateMessage", "lex:chat.bsky.convo.defs#logDeleteMessage"];
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ChatBskyConvoGetMessages: {
        readonly lexicon: 1;
        readonly id: "chat.bsky.convo.getMessages";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["convoId"];
                    readonly properties: {
                        readonly convoId: {
                            readonly type: "string";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["messages"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly messages: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "union";
                                    readonly refs: ["lex:chat.bsky.convo.defs#messageView", "lex:chat.bsky.convo.defs#deletedMessageView"];
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ChatBskyConvoLeaveConvo: {
        readonly lexicon: 1;
        readonly id: "chat.bsky.convo.leaveConvo";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["convoId"];
                        readonly properties: {
                            readonly convoId: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["convoId", "rev"];
                        readonly properties: {
                            readonly convoId: {
                                readonly type: "string";
                            };
                            readonly rev: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ChatBskyConvoListConvos: {
        readonly lexicon: 1;
        readonly id: "chat.bsky.convo.listConvos";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["convos"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly convos: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:chat.bsky.convo.defs#convoView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ChatBskyConvoMuteConvo: {
        readonly lexicon: 1;
        readonly id: "chat.bsky.convo.muteConvo";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["convoId"];
                        readonly properties: {
                            readonly convoId: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["convo"];
                        readonly properties: {
                            readonly convo: {
                                readonly type: "ref";
                                readonly ref: "lex:chat.bsky.convo.defs#convoView";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ChatBskyConvoSendMessage: {
        readonly lexicon: 1;
        readonly id: "chat.bsky.convo.sendMessage";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["convoId", "message"];
                        readonly properties: {
                            readonly convoId: {
                                readonly type: "string";
                            };
                            readonly message: {
                                readonly type: "ref";
                                readonly ref: "lex:chat.bsky.convo.defs#messageInput";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "ref";
                        readonly ref: "lex:chat.bsky.convo.defs#messageView";
                    };
                };
            };
        };
    };
    readonly ChatBskyConvoSendMessageBatch: {
        readonly lexicon: 1;
        readonly id: "chat.bsky.convo.sendMessageBatch";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["items"];
                        readonly properties: {
                            readonly items: {
                                readonly type: "array";
                                readonly maxLength: 100;
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:chat.bsky.convo.sendMessageBatch#batchItem";
                                };
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["items"];
                        readonly properties: {
                            readonly items: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:chat.bsky.convo.defs#messageView";
                                };
                            };
                        };
                    };
                };
            };
            readonly batchItem: {
                readonly type: "object";
                readonly required: ["convoId", "message"];
                readonly properties: {
                    readonly convoId: {
                        readonly type: "string";
                    };
                    readonly message: {
                        readonly type: "ref";
                        readonly ref: "lex:chat.bsky.convo.defs#messageInput";
                    };
                };
            };
        };
    };
    readonly ChatBskyConvoUnmuteConvo: {
        readonly lexicon: 1;
        readonly id: "chat.bsky.convo.unmuteConvo";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["convoId"];
                        readonly properties: {
                            readonly convoId: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["convo"];
                        readonly properties: {
                            readonly convo: {
                                readonly type: "ref";
                                readonly ref: "lex:chat.bsky.convo.defs#convoView";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ChatBskyConvoUpdateRead: {
        readonly lexicon: 1;
        readonly id: "chat.bsky.convo.updateRead";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["convoId"];
                        readonly properties: {
                            readonly convoId: {
                                readonly type: "string";
                            };
                            readonly messageId: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["convo"];
                        readonly properties: {
                            readonly convo: {
                                readonly type: "ref";
                                readonly ref: "lex:chat.bsky.convo.defs#convoView";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ChatBskyModerationGetActorMetadata: {
        readonly lexicon: 1;
        readonly id: "chat.bsky.moderation.getActorMetadata";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["actor"];
                    readonly properties: {
                        readonly actor: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["day", "month", "all"];
                        readonly properties: {
                            readonly day: {
                                readonly type: "ref";
                                readonly ref: "lex:chat.bsky.moderation.getActorMetadata#metadata";
                            };
                            readonly month: {
                                readonly type: "ref";
                                readonly ref: "lex:chat.bsky.moderation.getActorMetadata#metadata";
                            };
                            readonly all: {
                                readonly type: "ref";
                                readonly ref: "lex:chat.bsky.moderation.getActorMetadata#metadata";
                            };
                        };
                    };
                };
            };
            readonly metadata: {
                readonly type: "object";
                readonly required: ["messagesSent", "messagesReceived", "convos", "convosStarted"];
                readonly properties: {
                    readonly messagesSent: {
                        readonly type: "integer";
                    };
                    readonly messagesReceived: {
                        readonly type: "integer";
                    };
                    readonly convos: {
                        readonly type: "integer";
                    };
                    readonly convosStarted: {
                        readonly type: "integer";
                    };
                };
            };
        };
    };
    readonly ChatBskyModerationGetMessageContext: {
        readonly lexicon: 1;
        readonly id: "chat.bsky.moderation.getMessageContext";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["messageId"];
                    readonly properties: {
                        readonly convoId: {
                            readonly type: "string";
                            readonly description: "Conversation that the message is from. NOTE: this field will eventually be required.";
                        };
                        readonly messageId: {
                            readonly type: "string";
                        };
                        readonly before: {
                            readonly type: "integer";
                            readonly default: 5;
                        };
                        readonly after: {
                            readonly type: "integer";
                            readonly default: 5;
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["messages"];
                        readonly properties: {
                            readonly messages: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "union";
                                    readonly refs: ["lex:chat.bsky.convo.defs#messageView", "lex:chat.bsky.convo.defs#deletedMessageView"];
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ChatBskyModerationUpdateActorAccess: {
        readonly lexicon: 1;
        readonly id: "chat.bsky.moderation.updateActorAccess";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["actor", "allowAccess"];
                        readonly properties: {
                            readonly actor: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                            readonly allowAccess: {
                                readonly type: "boolean";
                            };
                            readonly ref: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ToolsOzoneCommunicationCreateTemplate: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.communication.createTemplate";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Administrative action to create a new, re-usable communication (email for now) template.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["subject", "contentMarkdown", "name"];
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Name of the template.";
                            };
                            readonly contentMarkdown: {
                                readonly type: "string";
                                readonly description: "Content of the template, markdown supported, can contain variable placeholders.";
                            };
                            readonly subject: {
                                readonly type: "string";
                                readonly description: "Subject of the message, used in emails.";
                            };
                            readonly lang: {
                                readonly type: "string";
                                readonly format: "language";
                                readonly description: "Message language.";
                            };
                            readonly createdBy: {
                                readonly type: "string";
                                readonly format: "did";
                                readonly description: "DID of the user who is creating the template.";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.communication.defs#templateView";
                    };
                };
                readonly errors: [{
                    readonly name: "DuplicateTemplateName";
                }];
            };
        };
    };
    readonly ToolsOzoneCommunicationDefs: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.communication.defs";
        readonly defs: {
            readonly templateView: {
                readonly type: "object";
                readonly required: ["id", "name", "contentMarkdown", "disabled", "lastUpdatedBy", "createdAt", "updatedAt"];
                readonly properties: {
                    readonly id: {
                        readonly type: "string";
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly description: "Name of the template.";
                    };
                    readonly subject: {
                        readonly type: "string";
                        readonly description: "Content of the template, can contain markdown and variable placeholders.";
                    };
                    readonly contentMarkdown: {
                        readonly type: "string";
                        readonly description: "Subject of the message, used in emails.";
                    };
                    readonly disabled: {
                        readonly type: "boolean";
                    };
                    readonly lang: {
                        readonly type: "string";
                        readonly format: "language";
                        readonly description: "Message language.";
                    };
                    readonly lastUpdatedBy: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "DID of the user who last updated the template.";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly updatedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
        };
    };
    readonly ToolsOzoneCommunicationDeleteTemplate: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.communication.deleteTemplate";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Delete a communication template.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["id"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ToolsOzoneCommunicationListTemplates: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.communication.listTemplates";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get list of all communication templates.";
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["communicationTemplates"];
                        readonly properties: {
                            readonly communicationTemplates: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:tools.ozone.communication.defs#templateView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ToolsOzoneCommunicationUpdateTemplate: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.communication.updateTemplate";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["id"];
                        readonly properties: {
                            readonly id: {
                                readonly type: "string";
                                readonly description: "ID of the template to be updated.";
                            };
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Name of the template.";
                            };
                            readonly lang: {
                                readonly type: "string";
                                readonly format: "language";
                                readonly description: "Message language.";
                            };
                            readonly contentMarkdown: {
                                readonly type: "string";
                                readonly description: "Content of the template, markdown supported, can contain variable placeholders.";
                            };
                            readonly subject: {
                                readonly type: "string";
                                readonly description: "Subject of the message, used in emails.";
                            };
                            readonly updatedBy: {
                                readonly type: "string";
                                readonly format: "did";
                                readonly description: "DID of the user who is updating the template.";
                            };
                            readonly disabled: {
                                readonly type: "boolean";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.communication.defs#templateView";
                    };
                };
                readonly errors: [{
                    readonly name: "DuplicateTemplateName";
                }];
            };
        };
    };
    readonly ToolsOzoneModerationDefs: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.moderation.defs";
        readonly defs: {
            readonly modEventView: {
                readonly type: "object";
                readonly required: ["id", "event", "subject", "subjectBlobCids", "createdBy", "createdAt"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly event: {
                        readonly type: "union";
                        readonly refs: ["lex:tools.ozone.moderation.defs#modEventTakedown", "lex:tools.ozone.moderation.defs#modEventReverseTakedown", "lex:tools.ozone.moderation.defs#modEventComment", "lex:tools.ozone.moderation.defs#modEventReport", "lex:tools.ozone.moderation.defs#modEventLabel", "lex:tools.ozone.moderation.defs#modEventAcknowledge", "lex:tools.ozone.moderation.defs#modEventEscalate", "lex:tools.ozone.moderation.defs#modEventMute", "lex:tools.ozone.moderation.defs#modEventUnmute", "lex:tools.ozone.moderation.defs#modEventMuteReporter", "lex:tools.ozone.moderation.defs#modEventUnmuteReporter", "lex:tools.ozone.moderation.defs#modEventEmail", "lex:tools.ozone.moderation.defs#modEventResolveAppeal", "lex:tools.ozone.moderation.defs#modEventDivert", "lex:tools.ozone.moderation.defs#modEventTag", "lex:tools.ozone.moderation.defs#accountEvent", "lex:tools.ozone.moderation.defs#identityEvent", "lex:tools.ozone.moderation.defs#recordEvent", "lex:tools.ozone.moderation.defs#modEventPriorityScore"];
                    };
                    readonly subject: {
                        readonly type: "union";
                        readonly refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef", "lex:chat.bsky.convo.defs#messageRef"];
                    };
                    readonly subjectBlobCids: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly createdBy: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly creatorHandle: {
                        readonly type: "string";
                    };
                    readonly subjectHandle: {
                        readonly type: "string";
                    };
                };
            };
            readonly modEventViewDetail: {
                readonly type: "object";
                readonly required: ["id", "event", "subject", "subjectBlobs", "createdBy", "createdAt"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly event: {
                        readonly type: "union";
                        readonly refs: ["lex:tools.ozone.moderation.defs#modEventTakedown", "lex:tools.ozone.moderation.defs#modEventReverseTakedown", "lex:tools.ozone.moderation.defs#modEventComment", "lex:tools.ozone.moderation.defs#modEventReport", "lex:tools.ozone.moderation.defs#modEventLabel", "lex:tools.ozone.moderation.defs#modEventAcknowledge", "lex:tools.ozone.moderation.defs#modEventEscalate", "lex:tools.ozone.moderation.defs#modEventMute", "lex:tools.ozone.moderation.defs#modEventUnmute", "lex:tools.ozone.moderation.defs#modEventMuteReporter", "lex:tools.ozone.moderation.defs#modEventUnmuteReporter", "lex:tools.ozone.moderation.defs#modEventEmail", "lex:tools.ozone.moderation.defs#modEventResolveAppeal", "lex:tools.ozone.moderation.defs#modEventDivert", "lex:tools.ozone.moderation.defs#modEventTag", "lex:tools.ozone.moderation.defs#accountEvent", "lex:tools.ozone.moderation.defs#identityEvent", "lex:tools.ozone.moderation.defs#recordEvent", "lex:tools.ozone.moderation.defs#modEventPriorityScore"];
                    };
                    readonly subject: {
                        readonly type: "union";
                        readonly refs: ["lex:tools.ozone.moderation.defs#repoView", "lex:tools.ozone.moderation.defs#repoViewNotFound", "lex:tools.ozone.moderation.defs#recordView", "lex:tools.ozone.moderation.defs#recordViewNotFound"];
                    };
                    readonly subjectBlobs: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:tools.ozone.moderation.defs#blobView";
                        };
                    };
                    readonly createdBy: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
            readonly subjectStatusView: {
                readonly type: "object";
                readonly required: ["id", "subject", "createdAt", "updatedAt", "reviewState"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                    readonly subject: {
                        readonly type: "union";
                        readonly refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef"];
                    };
                    readonly hosting: {
                        readonly type: "union";
                        readonly refs: ["lex:tools.ozone.moderation.defs#accountHosting", "lex:tools.ozone.moderation.defs#recordHosting"];
                    };
                    readonly subjectBlobCids: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly format: "cid";
                        };
                    };
                    readonly subjectRepoHandle: {
                        readonly type: "string";
                    };
                    readonly updatedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                        readonly description: "Timestamp referencing when the last update was made to the moderation status of the subject";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                        readonly description: "Timestamp referencing the first moderation status impacting event was emitted on the subject";
                    };
                    readonly reviewState: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.moderation.defs#subjectReviewState";
                    };
                    readonly comment: {
                        readonly type: "string";
                        readonly description: "Sticky comment on the subject.";
                    };
                    readonly priorityScore: {
                        readonly type: "integer";
                        readonly description: "Numeric value representing the level of priority. Higher score means higher priority.";
                        readonly minimum: 0;
                        readonly maximum: 100;
                    };
                    readonly muteUntil: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly muteReportingUntil: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly lastReviewedBy: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly lastReviewedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly lastReportedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly lastAppealedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                        readonly description: "Timestamp referencing when the author of the subject appealed a moderation action";
                    };
                    readonly takendown: {
                        readonly type: "boolean";
                    };
                    readonly appealed: {
                        readonly type: "boolean";
                        readonly description: "True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators.";
                    };
                    readonly suspendUntil: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly tags: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly accountStats: {
                        readonly description: "Statistics related to the account subject";
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.moderation.defs#accountStats";
                    };
                    readonly recordsStats: {
                        readonly description: "Statistics related to the record subjects authored by the subject's account";
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.moderation.defs#recordsStats";
                    };
                };
            };
            readonly accountStats: {
                readonly description: "Statistics about a particular account subject";
                readonly type: "object";
                readonly properties: {
                    readonly reportCount: {
                        readonly description: "Total number of reports on the account";
                        readonly type: "integer";
                    };
                    readonly appealCount: {
                        readonly description: "Total number of appeals against a moderation action on the account";
                        readonly type: "integer";
                    };
                    readonly suspendCount: {
                        readonly description: "Number of times the account was suspended";
                        readonly type: "integer";
                    };
                    readonly escalateCount: {
                        readonly description: "Number of times the account was escalated";
                        readonly type: "integer";
                    };
                    readonly takedownCount: {
                        readonly description: "Number of times the account was taken down";
                        readonly type: "integer";
                    };
                };
            };
            readonly recordsStats: {
                readonly description: "Statistics about a set of record subject items";
                readonly type: "object";
                readonly properties: {
                    readonly totalReports: {
                        readonly description: "Cumulative sum of the number of reports on the items in the set";
                        readonly type: "integer";
                    };
                    readonly reportedCount: {
                        readonly description: "Number of items that were reported at least once";
                        readonly type: "integer";
                    };
                    readonly escalatedCount: {
                        readonly description: "Number of items that were escalated at least once";
                        readonly type: "integer";
                    };
                    readonly appealedCount: {
                        readonly description: "Number of items that were appealed at least once";
                        readonly type: "integer";
                    };
                    readonly subjectCount: {
                        readonly description: "Total number of item in the set";
                        readonly type: "integer";
                    };
                    readonly pendingCount: {
                        readonly description: "Number of item currently in \"reviewOpen\" or \"reviewEscalated\" state";
                        readonly type: "integer";
                    };
                    readonly processedCount: {
                        readonly description: "Number of item currently in \"reviewNone\" or \"reviewClosed\" state";
                        readonly type: "integer";
                    };
                    readonly takendownCount: {
                        readonly description: "Number of item currently taken down";
                        readonly type: "integer";
                    };
                };
            };
            readonly subjectReviewState: {
                readonly type: "string";
                readonly knownValues: ["lex:tools.ozone.moderation.defs#reviewOpen", "lex:tools.ozone.moderation.defs#reviewEscalated", "lex:tools.ozone.moderation.defs#reviewClosed", "lex:tools.ozone.moderation.defs#reviewNone"];
            };
            readonly reviewOpen: {
                readonly type: "token";
                readonly description: "Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator";
            };
            readonly reviewEscalated: {
                readonly type: "token";
                readonly description: "Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator";
            };
            readonly reviewClosed: {
                readonly type: "token";
                readonly description: "Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator";
            };
            readonly reviewNone: {
                readonly type: "token";
                readonly description: "Moderator review status of a subject: Unnecessary. Indicates that the subject does not need a review at the moment but there is probably some moderation related metadata available for it";
            };
            readonly modEventTakedown: {
                readonly type: "object";
                readonly description: "Take down a subject permanently or temporarily";
                readonly properties: {
                    readonly comment: {
                        readonly type: "string";
                    };
                    readonly durationInHours: {
                        readonly type: "integer";
                        readonly description: "Indicates how long the takedown should be in effect before automatically expiring.";
                    };
                    readonly acknowledgeAccountSubjects: {
                        readonly type: "boolean";
                        readonly description: "If true, all other reports on content authored by this account will be resolved (acknowledged).";
                    };
                    readonly policies: {
                        readonly type: "array";
                        readonly maxLength: 5;
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "Names/Keywords of the policies that drove the decision.";
                    };
                };
            };
            readonly modEventReverseTakedown: {
                readonly type: "object";
                readonly description: "Revert take down action on a subject";
                readonly properties: {
                    readonly comment: {
                        readonly type: "string";
                        readonly description: "Describe reasoning behind the reversal.";
                    };
                };
            };
            readonly modEventResolveAppeal: {
                readonly type: "object";
                readonly description: "Resolve appeal on a subject";
                readonly properties: {
                    readonly comment: {
                        readonly type: "string";
                        readonly description: "Describe resolution.";
                    };
                };
            };
            readonly modEventComment: {
                readonly type: "object";
                readonly description: "Add a comment to a subject";
                readonly required: ["comment"];
                readonly properties: {
                    readonly comment: {
                        readonly type: "string";
                    };
                    readonly sticky: {
                        readonly type: "boolean";
                        readonly description: "Make the comment persistent on the subject";
                    };
                };
            };
            readonly modEventReport: {
                readonly type: "object";
                readonly description: "Report a subject";
                readonly required: ["reportType"];
                readonly properties: {
                    readonly comment: {
                        readonly type: "string";
                    };
                    readonly isReporterMuted: {
                        readonly type: "boolean";
                        readonly description: "Set to true if the reporter was muted from reporting at the time of the event. These reports won't impact the reviewState of the subject.";
                    };
                    readonly reportType: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.moderation.defs#reasonType";
                    };
                };
            };
            readonly modEventLabel: {
                readonly type: "object";
                readonly description: "Apply/Negate labels on a subject";
                readonly required: ["createLabelVals", "negateLabelVals"];
                readonly properties: {
                    readonly comment: {
                        readonly type: "string";
                    };
                    readonly createLabelVals: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly negateLabelVals: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly durationInHours: {
                        readonly type: "integer";
                        readonly description: "Indicates how long the label will remain on the subject. Only applies on labels that are being added.";
                    };
                };
            };
            readonly modEventPriorityScore: {
                readonly type: "object";
                readonly description: "Set priority score of the subject. Higher score means higher priority.";
                readonly required: ["score"];
                readonly properties: {
                    readonly comment: {
                        readonly type: "string";
                    };
                    readonly score: {
                        readonly type: "integer";
                        readonly minimum: 0;
                        readonly maximum: 100;
                    };
                };
            };
            readonly modEventAcknowledge: {
                readonly type: "object";
                readonly properties: {
                    readonly comment: {
                        readonly type: "string";
                    };
                    readonly acknowledgeAccountSubjects: {
                        readonly type: "boolean";
                        readonly description: "If true, all other reports on content authored by this account will be resolved (acknowledged).";
                    };
                };
            };
            readonly modEventEscalate: {
                readonly type: "object";
                readonly properties: {
                    readonly comment: {
                        readonly type: "string";
                    };
                };
            };
            readonly modEventMute: {
                readonly type: "object";
                readonly description: "Mute incoming reports on a subject";
                readonly required: ["durationInHours"];
                readonly properties: {
                    readonly comment: {
                        readonly type: "string";
                    };
                    readonly durationInHours: {
                        readonly type: "integer";
                        readonly description: "Indicates how long the subject should remain muted.";
                    };
                };
            };
            readonly modEventUnmute: {
                readonly type: "object";
                readonly description: "Unmute action on a subject";
                readonly properties: {
                    readonly comment: {
                        readonly type: "string";
                        readonly description: "Describe reasoning behind the reversal.";
                    };
                };
            };
            readonly modEventMuteReporter: {
                readonly type: "object";
                readonly description: "Mute incoming reports from an account";
                readonly properties: {
                    readonly comment: {
                        readonly type: "string";
                    };
                    readonly durationInHours: {
                        readonly type: "integer";
                        readonly description: "Indicates how long the account should remain muted. Falsy value here means a permanent mute.";
                    };
                };
            };
            readonly modEventUnmuteReporter: {
                readonly type: "object";
                readonly description: "Unmute incoming reports from an account";
                readonly properties: {
                    readonly comment: {
                        readonly type: "string";
                        readonly description: "Describe reasoning behind the reversal.";
                    };
                };
            };
            readonly modEventEmail: {
                readonly type: "object";
                readonly description: "Keep a log of outgoing email to a user";
                readonly required: ["subjectLine"];
                readonly properties: {
                    readonly subjectLine: {
                        readonly type: "string";
                        readonly description: "The subject line of the email sent to the user.";
                    };
                    readonly content: {
                        readonly type: "string";
                        readonly description: "The content of the email sent to the user.";
                    };
                    readonly comment: {
                        readonly type: "string";
                        readonly description: "Additional comment about the outgoing comm.";
                    };
                };
            };
            readonly modEventDivert: {
                readonly type: "object";
                readonly description: "Divert a record's blobs to a 3rd party service for further scanning/tagging";
                readonly properties: {
                    readonly comment: {
                        readonly type: "string";
                    };
                };
            };
            readonly modEventTag: {
                readonly type: "object";
                readonly description: "Add/Remove a tag on a subject";
                readonly required: ["add", "remove"];
                readonly properties: {
                    readonly add: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "Tags to be added to the subject. If already exists, won't be duplicated.";
                    };
                    readonly remove: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "Tags to be removed to the subject. Ignores a tag If it doesn't exist, won't be duplicated.";
                    };
                    readonly comment: {
                        readonly type: "string";
                        readonly description: "Additional comment about added/removed tags.";
                    };
                };
            };
            readonly accountEvent: {
                readonly type: "object";
                readonly description: "Logs account status related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.";
                readonly required: ["timestamp", "active"];
                readonly properties: {
                    readonly comment: {
                        readonly type: "string";
                    };
                    readonly active: {
                        readonly type: "boolean";
                        readonly description: "Indicates that the account has a repository which can be fetched from the host that emitted this event.";
                    };
                    readonly status: {
                        readonly type: "string";
                        readonly knownValues: ["unknown", "deactivated", "deleted", "takendown", "suspended", "tombstoned"];
                    };
                    readonly timestamp: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
            readonly identityEvent: {
                readonly type: "object";
                readonly description: "Logs identity related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.";
                readonly required: ["timestamp"];
                readonly properties: {
                    readonly comment: {
                        readonly type: "string";
                    };
                    readonly handle: {
                        readonly type: "string";
                        readonly format: "handle";
                    };
                    readonly pdsHost: {
                        readonly type: "string";
                        readonly format: "uri";
                    };
                    readonly tombstone: {
                        readonly type: "boolean";
                    };
                    readonly timestamp: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
            readonly recordEvent: {
                readonly type: "object";
                readonly description: "Logs lifecycle event on a record subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.";
                readonly required: ["timestamp", "op"];
                readonly properties: {
                    readonly comment: {
                        readonly type: "string";
                    };
                    readonly op: {
                        readonly type: "string";
                        readonly knownValues: ["create", "update", "delete"];
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly timestamp: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
            readonly repoView: {
                readonly type: "object";
                readonly required: ["did", "handle", "relatedRecords", "indexedAt", "moderation"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly handle: {
                        readonly type: "string";
                        readonly format: "handle";
                    };
                    readonly email: {
                        readonly type: "string";
                    };
                    readonly relatedRecords: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "unknown";
                        };
                    };
                    readonly indexedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly moderation: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.moderation.defs#moderation";
                    };
                    readonly invitedBy: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.server.defs#inviteCode";
                    };
                    readonly invitesDisabled: {
                        readonly type: "boolean";
                    };
                    readonly inviteNote: {
                        readonly type: "string";
                    };
                    readonly deactivatedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly threatSignatures: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.admin.defs#threatSignature";
                        };
                    };
                };
            };
            readonly repoViewDetail: {
                readonly type: "object";
                readonly required: ["did", "handle", "relatedRecords", "indexedAt", "moderation"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly handle: {
                        readonly type: "string";
                        readonly format: "handle";
                    };
                    readonly email: {
                        readonly type: "string";
                    };
                    readonly relatedRecords: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "unknown";
                        };
                    };
                    readonly indexedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly moderation: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.moderation.defs#moderationDetail";
                    };
                    readonly labels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#label";
                        };
                    };
                    readonly invitedBy: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.server.defs#inviteCode";
                    };
                    readonly invites: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.server.defs#inviteCode";
                        };
                    };
                    readonly invitesDisabled: {
                        readonly type: "boolean";
                    };
                    readonly inviteNote: {
                        readonly type: "string";
                    };
                    readonly emailConfirmedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly deactivatedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly threatSignatures: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.admin.defs#threatSignature";
                        };
                    };
                };
            };
            readonly repoViewNotFound: {
                readonly type: "object";
                readonly required: ["did"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                };
            };
            readonly recordView: {
                readonly type: "object";
                readonly required: ["uri", "cid", "value", "blobCids", "indexedAt", "moderation", "repo"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly value: {
                        readonly type: "unknown";
                    };
                    readonly blobCids: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly format: "cid";
                        };
                    };
                    readonly indexedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly moderation: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.moderation.defs#moderation";
                    };
                    readonly repo: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.moderation.defs#repoView";
                    };
                };
            };
            readonly recordViewDetail: {
                readonly type: "object";
                readonly required: ["uri", "cid", "value", "blobs", "indexedAt", "moderation", "repo"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly value: {
                        readonly type: "unknown";
                    };
                    readonly blobs: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:tools.ozone.moderation.defs#blobView";
                        };
                    };
                    readonly labels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.label.defs#label";
                        };
                    };
                    readonly indexedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly moderation: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.moderation.defs#moderationDetail";
                    };
                    readonly repo: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.moderation.defs#repoView";
                    };
                };
            };
            readonly recordViewNotFound: {
                readonly type: "object";
                readonly required: ["uri"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                };
            };
            readonly moderation: {
                readonly type: "object";
                readonly properties: {
                    readonly subjectStatus: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.moderation.defs#subjectStatusView";
                    };
                };
            };
            readonly moderationDetail: {
                readonly type: "object";
                readonly properties: {
                    readonly subjectStatus: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.moderation.defs#subjectStatusView";
                    };
                };
            };
            readonly blobView: {
                readonly type: "object";
                readonly required: ["cid", "mimeType", "size", "createdAt"];
                readonly properties: {
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                    readonly mimeType: {
                        readonly type: "string";
                    };
                    readonly size: {
                        readonly type: "integer";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly details: {
                        readonly type: "union";
                        readonly refs: ["lex:tools.ozone.moderation.defs#imageDetails", "lex:tools.ozone.moderation.defs#videoDetails"];
                    };
                    readonly moderation: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.moderation.defs#moderation";
                    };
                };
            };
            readonly imageDetails: {
                readonly type: "object";
                readonly required: ["width", "height"];
                readonly properties: {
                    readonly width: {
                        readonly type: "integer";
                    };
                    readonly height: {
                        readonly type: "integer";
                    };
                };
            };
            readonly videoDetails: {
                readonly type: "object";
                readonly required: ["width", "height", "length"];
                readonly properties: {
                    readonly width: {
                        readonly type: "integer";
                    };
                    readonly height: {
                        readonly type: "integer";
                    };
                    readonly length: {
                        readonly type: "integer";
                    };
                };
            };
            readonly accountHosting: {
                readonly type: "object";
                readonly required: ["status"];
                readonly properties: {
                    readonly status: {
                        readonly type: "string";
                        readonly knownValues: ["takendown", "suspended", "deleted", "deactivated", "unknown"];
                    };
                    readonly updatedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly deletedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly deactivatedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly reactivatedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
            readonly recordHosting: {
                readonly type: "object";
                readonly required: ["status"];
                readonly properties: {
                    readonly status: {
                        readonly type: "string";
                        readonly knownValues: ["deleted", "unknown"];
                    };
                    readonly updatedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly deletedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
        };
    };
    readonly ToolsOzoneModerationEmitEvent: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.moderation.emitEvent";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Take a moderation action on an actor.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["event", "subject", "createdBy"];
                        readonly properties: {
                            readonly event: {
                                readonly type: "union";
                                readonly refs: ["lex:tools.ozone.moderation.defs#modEventTakedown", "lex:tools.ozone.moderation.defs#modEventAcknowledge", "lex:tools.ozone.moderation.defs#modEventEscalate", "lex:tools.ozone.moderation.defs#modEventComment", "lex:tools.ozone.moderation.defs#modEventLabel", "lex:tools.ozone.moderation.defs#modEventReport", "lex:tools.ozone.moderation.defs#modEventMute", "lex:tools.ozone.moderation.defs#modEventUnmute", "lex:tools.ozone.moderation.defs#modEventMuteReporter", "lex:tools.ozone.moderation.defs#modEventUnmuteReporter", "lex:tools.ozone.moderation.defs#modEventReverseTakedown", "lex:tools.ozone.moderation.defs#modEventResolveAppeal", "lex:tools.ozone.moderation.defs#modEventEmail", "lex:tools.ozone.moderation.defs#modEventTag", "lex:tools.ozone.moderation.defs#accountEvent", "lex:tools.ozone.moderation.defs#identityEvent", "lex:tools.ozone.moderation.defs#recordEvent", "lex:tools.ozone.moderation.defs#modEventPriorityScore"];
                            };
                            readonly subject: {
                                readonly type: "union";
                                readonly refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef"];
                            };
                            readonly subjectBlobCids: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                    readonly format: "cid";
                                };
                            };
                            readonly createdBy: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.moderation.defs#modEventView";
                    };
                };
                readonly errors: [{
                    readonly name: "SubjectHasAction";
                }];
            };
        };
    };
    readonly ToolsOzoneModerationGetEvent: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.moderation.getEvent";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get details about a moderation event.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["id"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "integer";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.moderation.defs#modEventViewDetail";
                    };
                };
            };
        };
    };
    readonly ToolsOzoneModerationGetRecord: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.moderation.getRecord";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get details about a record.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["uri"];
                    readonly properties: {
                        readonly uri: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                        readonly cid: {
                            readonly type: "string";
                            readonly format: "cid";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.moderation.defs#recordViewDetail";
                    };
                };
                readonly errors: [{
                    readonly name: "RecordNotFound";
                }];
            };
        };
    };
    readonly ToolsOzoneModerationGetRecords: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.moderation.getRecords";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get details about some records.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["uris"];
                    readonly properties: {
                        readonly uris: {
                            readonly type: "array";
                            readonly maxLength: 100;
                            readonly items: {
                                readonly type: "string";
                                readonly format: "at-uri";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["records"];
                        readonly properties: {
                            readonly records: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "union";
                                    readonly refs: ["lex:tools.ozone.moderation.defs#recordViewDetail", "lex:tools.ozone.moderation.defs#recordViewNotFound"];
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ToolsOzoneModerationGetRepo: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.moderation.getRepo";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get details about a repository.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["did"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.moderation.defs#repoViewDetail";
                    };
                };
                readonly errors: [{
                    readonly name: "RepoNotFound";
                }];
            };
        };
    };
    readonly ToolsOzoneModerationGetRepos: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.moderation.getRepos";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get details about some repositories.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["dids"];
                    readonly properties: {
                        readonly dids: {
                            readonly type: "array";
                            readonly maxLength: 100;
                            readonly items: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["repos"];
                        readonly properties: {
                            readonly repos: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "union";
                                    readonly refs: ["lex:tools.ozone.moderation.defs#repoViewDetail", "lex:tools.ozone.moderation.defs#repoViewNotFound"];
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ToolsOzoneModerationQueryEvents: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.moderation.queryEvents";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "List moderation events related to a subject.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly types: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent<name>) to filter by. If not specified, all events are returned.";
                        };
                        readonly createdBy: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly sortDirection: {
                            readonly type: "string";
                            readonly default: "desc";
                            readonly enum: ["asc", "desc"];
                            readonly description: "Sort direction for the events. Defaults to descending order of created at timestamp.";
                        };
                        readonly createdAfter: {
                            readonly type: "string";
                            readonly format: "datetime";
                            readonly description: "Retrieve events created after a given timestamp";
                        };
                        readonly createdBefore: {
                            readonly type: "string";
                            readonly format: "datetime";
                            readonly description: "Retrieve events created before a given timestamp";
                        };
                        readonly subject: {
                            readonly type: "string";
                            readonly format: "uri";
                        };
                        readonly collections: {
                            readonly type: "array";
                            readonly maxLength: 20;
                            readonly description: "If specified, only events where the subject belongs to the given collections will be returned. When subjectType is set to 'account', this will be ignored.";
                            readonly items: {
                                readonly type: "string";
                                readonly format: "nsid";
                            };
                        };
                        readonly subjectType: {
                            readonly type: "string";
                            readonly description: "If specified, only events where the subject is of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.";
                            readonly knownValues: ["account", "record"];
                        };
                        readonly includeAllUserRecords: {
                            readonly type: "boolean";
                            readonly default: false;
                            readonly description: "If true, events on all record types (posts, lists, profile etc.) or records from given 'collections' param, owned by the did are returned.";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly hasComment: {
                            readonly type: "boolean";
                            readonly description: "If true, only events with comments are returned";
                        };
                        readonly comment: {
                            readonly type: "string";
                            readonly description: "If specified, only events with comments containing the keyword are returned. Apply || separator to use multiple keywords and match using OR condition.";
                        };
                        readonly addedLabels: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "If specified, only events where all of these labels were added are returned";
                        };
                        readonly removedLabels: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "If specified, only events where all of these labels were removed are returned";
                        };
                        readonly addedTags: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "If specified, only events where all of these tags were added are returned";
                        };
                        readonly removedTags: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "If specified, only events where all of these tags were removed are returned";
                        };
                        readonly reportTypes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly policies: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly description: "If specified, only events where the action policies match any of the given policies are returned";
                            };
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["events"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly events: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:tools.ozone.moderation.defs#modEventView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ToolsOzoneModerationQueryStatuses: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.moderation.queryStatuses";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "View moderation statuses of subjects (record or repo).";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly queueCount: {
                            readonly type: "integer";
                            readonly description: "Number of queues being used by moderators. Subjects will be split among all queues.";
                        };
                        readonly queueIndex: {
                            readonly type: "integer";
                            readonly description: "Index of the queue to fetch subjects from. Works only when queueCount value is specified.";
                        };
                        readonly queueSeed: {
                            readonly type: "string";
                            readonly description: "A seeder to shuffle/balance the queue items.";
                        };
                        readonly includeAllUserRecords: {
                            readonly type: "boolean";
                            readonly description: "All subjects, or subjects from given 'collections' param, belonging to the account specified in the 'subject' param will be returned.";
                        };
                        readonly subject: {
                            readonly type: "string";
                            readonly format: "uri";
                            readonly description: "The subject to get the status for.";
                        };
                        readonly comment: {
                            readonly type: "string";
                            readonly description: "Search subjects by keyword from comments";
                        };
                        readonly reportedAfter: {
                            readonly type: "string";
                            readonly format: "datetime";
                            readonly description: "Search subjects reported after a given timestamp";
                        };
                        readonly reportedBefore: {
                            readonly type: "string";
                            readonly format: "datetime";
                            readonly description: "Search subjects reported before a given timestamp";
                        };
                        readonly reviewedAfter: {
                            readonly type: "string";
                            readonly format: "datetime";
                            readonly description: "Search subjects reviewed after a given timestamp";
                        };
                        readonly hostingDeletedAfter: {
                            readonly type: "string";
                            readonly format: "datetime";
                            readonly description: "Search subjects where the associated record/account was deleted after a given timestamp";
                        };
                        readonly hostingDeletedBefore: {
                            readonly type: "string";
                            readonly format: "datetime";
                            readonly description: "Search subjects where the associated record/account was deleted before a given timestamp";
                        };
                        readonly hostingUpdatedAfter: {
                            readonly type: "string";
                            readonly format: "datetime";
                            readonly description: "Search subjects where the associated record/account was updated after a given timestamp";
                        };
                        readonly hostingUpdatedBefore: {
                            readonly type: "string";
                            readonly format: "datetime";
                            readonly description: "Search subjects where the associated record/account was updated before a given timestamp";
                        };
                        readonly hostingStatuses: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "Search subjects by the status of the associated record/account";
                        };
                        readonly reviewedBefore: {
                            readonly type: "string";
                            readonly format: "datetime";
                            readonly description: "Search subjects reviewed before a given timestamp";
                        };
                        readonly includeMuted: {
                            readonly type: "boolean";
                            readonly description: "By default, we don't include muted subjects in the results. Set this to true to include them.";
                        };
                        readonly onlyMuted: {
                            readonly type: "boolean";
                            readonly description: "When set to true, only muted subjects and reporters will be returned.";
                        };
                        readonly reviewState: {
                            readonly type: "string";
                            readonly description: "Specify when fetching subjects in a certain state";
                        };
                        readonly ignoreSubjects: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly format: "uri";
                            };
                        };
                        readonly lastReviewedBy: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "Get all subject statuses that were reviewed by a specific moderator";
                        };
                        readonly sortField: {
                            readonly type: "string";
                            readonly default: "lastReportedAt";
                            readonly enum: ["lastReviewedAt", "lastReportedAt", "reportedRecordsCount", "takendownRecordsCount", "priorityScore"];
                        };
                        readonly sortDirection: {
                            readonly type: "string";
                            readonly default: "desc";
                            readonly enum: ["asc", "desc"];
                        };
                        readonly takendown: {
                            readonly type: "boolean";
                            readonly description: "Get subjects that were taken down";
                        };
                        readonly appealed: {
                            readonly type: "boolean";
                            readonly description: "Get subjects in unresolved appealed status";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly tags: {
                            readonly type: "array";
                            readonly maxLength: 25;
                            readonly items: {
                                readonly type: "string";
                                readonly description: "Items in this array are applied with OR filters. To apply AND filter, put all tags in the same string and separate using && characters";
                            };
                        };
                        readonly excludeTags: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly collections: {
                            readonly type: "array";
                            readonly maxLength: 20;
                            readonly description: "If specified, subjects belonging to the given collections will be returned. When subjectType is set to 'account', this will be ignored.";
                            readonly items: {
                                readonly type: "string";
                                readonly format: "nsid";
                            };
                        };
                        readonly subjectType: {
                            readonly type: "string";
                            readonly description: "If specified, subjects of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.";
                            readonly knownValues: ["account", "record"];
                        };
                        readonly minAccountSuspendCount: {
                            readonly type: "integer";
                            readonly description: "If specified, only subjects that belong to an account that has at least this many suspensions will be returned.";
                        };
                        readonly minReportedRecordsCount: {
                            readonly type: "integer";
                            readonly description: "If specified, only subjects that belong to an account that has at least this many reported records will be returned.";
                        };
                        readonly minTakendownRecordsCount: {
                            readonly type: "integer";
                            readonly description: "If specified, only subjects that belong to an account that has at least this many taken down records will be returned.";
                        };
                        readonly minPriorityScore: {
                            readonly minimum: 0;
                            readonly maximum: 100;
                            readonly type: "integer";
                            readonly description: "If specified, only subjects that have priority score value above the given value will be returned.";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["subjectStatuses"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly subjectStatuses: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:tools.ozone.moderation.defs#subjectStatusView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ToolsOzoneModerationSearchRepos: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.moderation.searchRepos";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Find repositories based on a search term.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly term: {
                            readonly type: "string";
                            readonly description: "DEPRECATED: use 'q' instead";
                        };
                        readonly q: {
                            readonly type: "string";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["repos"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly repos: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:tools.ozone.moderation.defs#repoView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ToolsOzoneServerGetConfig: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.server.getConfig";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get details about ozone's server configuration.";
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly properties: {
                            readonly appview: {
                                readonly type: "ref";
                                readonly ref: "lex:tools.ozone.server.getConfig#serviceConfig";
                            };
                            readonly pds: {
                                readonly type: "ref";
                                readonly ref: "lex:tools.ozone.server.getConfig#serviceConfig";
                            };
                            readonly blobDivert: {
                                readonly type: "ref";
                                readonly ref: "lex:tools.ozone.server.getConfig#serviceConfig";
                            };
                            readonly chat: {
                                readonly type: "ref";
                                readonly ref: "lex:tools.ozone.server.getConfig#serviceConfig";
                            };
                            readonly viewer: {
                                readonly type: "ref";
                                readonly ref: "lex:tools.ozone.server.getConfig#viewerConfig";
                            };
                        };
                    };
                };
            };
            readonly serviceConfig: {
                readonly type: "object";
                readonly properties: {
                    readonly url: {
                        readonly type: "string";
                        readonly format: "uri";
                    };
                };
            };
            readonly viewerConfig: {
                readonly type: "object";
                readonly properties: {
                    readonly role: {
                        readonly type: "string";
                        readonly knownValues: ["tools.ozone.team.defs#roleAdmin", "tools.ozone.team.defs#roleModerator", "tools.ozone.team.defs#roleTriage"];
                    };
                };
            };
        };
    };
    readonly ToolsOzoneSetAddValues: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.set.addValues";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Add values to a specific set. Attempting to add values to a set that does not exist will result in an error.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["name", "values"];
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Name of the set to add values to";
                            };
                            readonly values: {
                                readonly type: "array";
                                readonly minLength: 1;
                                readonly maxLength: 1000;
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "Array of string values to add to the set";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ToolsOzoneSetDefs: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.set.defs";
        readonly defs: {
            readonly set: {
                readonly type: "object";
                readonly required: ["name"];
                readonly properties: {
                    readonly name: {
                        readonly type: "string";
                        readonly minLength: 3;
                        readonly maxLength: 128;
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly maxGraphemes: 1024;
                        readonly maxLength: 10240;
                    };
                };
            };
            readonly setView: {
                readonly type: "object";
                readonly required: ["name", "setSize", "createdAt", "updatedAt"];
                readonly properties: {
                    readonly name: {
                        readonly type: "string";
                        readonly minLength: 3;
                        readonly maxLength: 128;
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly maxGraphemes: 1024;
                        readonly maxLength: 10240;
                    };
                    readonly setSize: {
                        readonly type: "integer";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly updatedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
        };
    };
    readonly ToolsOzoneSetDeleteSet: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.set.deleteSet";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Delete an entire set. Attempting to delete a set that does not exist will result in an error.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["name"];
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Name of the set to delete";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly properties: {};
                    };
                };
                readonly errors: [{
                    readonly name: "SetNotFound";
                    readonly description: "set with the given name does not exist";
                }];
            };
        };
    };
    readonly ToolsOzoneSetDeleteValues: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.set.deleteValues";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Delete values from a specific set. Attempting to delete values that are not in the set will not result in an error";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["name", "values"];
                        readonly properties: {
                            readonly name: {
                                readonly type: "string";
                                readonly description: "Name of the set to delete values from";
                            };
                            readonly values: {
                                readonly type: "array";
                                readonly minLength: 1;
                                readonly items: {
                                    readonly type: "string";
                                };
                                readonly description: "Array of string values to delete from the set";
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "SetNotFound";
                    readonly description: "set with the given name does not exist";
                }];
            };
        };
    };
    readonly ToolsOzoneSetGetValues: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.set.getValues";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get a specific set and its values";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["name"];
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 1000;
                            readonly default: 100;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["set", "values"];
                        readonly properties: {
                            readonly set: {
                                readonly type: "ref";
                                readonly ref: "lex:tools.ozone.set.defs#setView";
                            };
                            readonly values: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "string";
                                };
                            };
                            readonly cursor: {
                                readonly type: "string";
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "SetNotFound";
                    readonly description: "set with the given name does not exist";
                }];
            };
        };
    };
    readonly ToolsOzoneSetQuerySets: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.set.querySets";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Query available sets";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly namePrefix: {
                            readonly type: "string";
                        };
                        readonly sortBy: {
                            readonly type: "string";
                            readonly enum: ["name", "createdAt", "updatedAt"];
                            readonly default: "name";
                        };
                        readonly sortDirection: {
                            readonly type: "string";
                            readonly default: "asc";
                            readonly enum: ["asc", "desc"];
                            readonly description: "Defaults to ascending order of name field.";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["sets"];
                        readonly properties: {
                            readonly sets: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:tools.ozone.set.defs#setView";
                                };
                            };
                            readonly cursor: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ToolsOzoneSetUpsertSet: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.set.upsertSet";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Create or update set metadata";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.set.defs#set";
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.set.defs#setView";
                    };
                };
            };
        };
    };
    readonly ToolsOzoneSettingDefs: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.setting.defs";
        readonly defs: {
            readonly option: {
                readonly type: "object";
                readonly required: ["key", "value", "did", "scope", "createdBy", "lastUpdatedBy"];
                readonly properties: {
                    readonly key: {
                        readonly type: "string";
                        readonly format: "nsid";
                    };
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly value: {
                        readonly type: "unknown";
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly maxGraphemes: 1024;
                        readonly maxLength: 10240;
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly updatedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly managerRole: {
                        readonly type: "string";
                        readonly knownValues: ["tools.ozone.team.defs#roleModerator", "tools.ozone.team.defs#roleTriage", "tools.ozone.team.defs#roleAdmin"];
                    };
                    readonly scope: {
                        readonly type: "string";
                        readonly knownValues: ["instance", "personal"];
                    };
                    readonly createdBy: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly lastUpdatedBy: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                };
            };
        };
    };
    readonly ToolsOzoneSettingListOptions: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.setting.listOptions";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "List settings with optional filtering";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly scope: {
                            readonly type: "string";
                            readonly knownValues: ["instance", "personal"];
                            readonly default: "instance";
                        };
                        readonly prefix: {
                            readonly type: "string";
                            readonly description: "Filter keys by prefix";
                        };
                        readonly keys: {
                            readonly type: "array";
                            readonly maxLength: 100;
                            readonly items: {
                                readonly type: "string";
                                readonly format: "nsid";
                            };
                            readonly description: "Filter for only the specified keys. Ignored if prefix is provided";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["options"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly options: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:tools.ozone.setting.defs#option";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ToolsOzoneSettingRemoveOptions: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.setting.removeOptions";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Delete settings by key";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["keys", "scope"];
                        readonly properties: {
                            readonly keys: {
                                readonly type: "array";
                                readonly minLength: 1;
                                readonly maxLength: 200;
                                readonly items: {
                                    readonly type: "string";
                                    readonly format: "nsid";
                                };
                            };
                            readonly scope: {
                                readonly type: "string";
                                readonly knownValues: ["instance", "personal"];
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly properties: {};
                    };
                };
            };
        };
    };
    readonly ToolsOzoneSettingUpsertOption: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.setting.upsertOption";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Create or update setting option";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["key", "scope", "value"];
                        readonly properties: {
                            readonly key: {
                                readonly type: "string";
                                readonly format: "nsid";
                            };
                            readonly scope: {
                                readonly type: "string";
                                readonly knownValues: ["instance", "personal"];
                            };
                            readonly value: {
                                readonly type: "unknown";
                            };
                            readonly description: {
                                readonly type: "string";
                                readonly maxLength: 2000;
                            };
                            readonly managerRole: {
                                readonly type: "string";
                                readonly knownValues: ["tools.ozone.team.defs#roleModerator", "tools.ozone.team.defs#roleTriage", "tools.ozone.team.defs#roleAdmin"];
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["option"];
                        readonly properties: {
                            readonly option: {
                                readonly type: "ref";
                                readonly ref: "lex:tools.ozone.setting.defs#option";
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ToolsOzoneSignatureDefs: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.signature.defs";
        readonly defs: {
            readonly sigDetail: {
                readonly type: "object";
                readonly required: ["property", "value"];
                readonly properties: {
                    readonly property: {
                        readonly type: "string";
                    };
                    readonly value: {
                        readonly type: "string";
                    };
                };
            };
        };
    };
    readonly ToolsOzoneSignatureFindCorrelation: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.signature.findCorrelation";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Find all correlated threat signatures between 2 or more accounts.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["dids"];
                    readonly properties: {
                        readonly dids: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["details"];
                        readonly properties: {
                            readonly details: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:tools.ozone.signature.defs#sigDetail";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ToolsOzoneSignatureFindRelatedAccounts: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.signature.findRelatedAccounts";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Get accounts that share some matching threat signatures with the root account.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["did"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["accounts"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly accounts: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:tools.ozone.signature.findRelatedAccounts#relatedAccount";
                                };
                            };
                        };
                    };
                };
            };
            readonly relatedAccount: {
                readonly type: "object";
                readonly required: ["account"];
                readonly properties: {
                    readonly account: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.admin.defs#accountView";
                    };
                    readonly similarities: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:tools.ozone.signature.defs#sigDetail";
                        };
                    };
                };
            };
        };
    };
    readonly ToolsOzoneSignatureSearchAccounts: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.signature.searchAccounts";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "Search for accounts that match one or more threat signature values.";
                readonly parameters: {
                    readonly type: "params";
                    readonly required: ["values"];
                    readonly properties: {
                        readonly values: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["accounts"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly accounts: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:com.atproto.admin.defs#accountView";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ToolsOzoneTeamAddMember: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.team.addMember";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Add a member to the ozone team. Requires admin role.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["did", "role"];
                        readonly properties: {
                            readonly did: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                            readonly role: {
                                readonly type: "string";
                                readonly knownValues: ["tools.ozone.team.defs#roleAdmin", "tools.ozone.team.defs#roleModerator", "tools.ozone.team.defs#roleTriage"];
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.team.defs#member";
                    };
                };
                readonly errors: [{
                    readonly name: "MemberAlreadyExists";
                    readonly description: "Member already exists in the team.";
                }];
            };
        };
    };
    readonly ToolsOzoneTeamDefs: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.team.defs";
        readonly defs: {
            readonly member: {
                readonly type: "object";
                readonly required: ["did", "role"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly disabled: {
                        readonly type: "boolean";
                    };
                    readonly profile: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileViewDetailed";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly updatedAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly lastUpdatedBy: {
                        readonly type: "string";
                    };
                    readonly role: {
                        readonly type: "string";
                        readonly knownValues: ["lex:tools.ozone.team.defs#roleAdmin", "lex:tools.ozone.team.defs#roleModerator", "lex:tools.ozone.team.defs#roleTriage"];
                    };
                };
            };
            readonly roleAdmin: {
                readonly type: "token";
                readonly description: "Admin role. Highest level of access, can perform all actions.";
            };
            readonly roleModerator: {
                readonly type: "token";
                readonly description: "Moderator role. Can perform most actions.";
            };
            readonly roleTriage: {
                readonly type: "token";
                readonly description: "Triage role. Mostly intended for monitoring and escalating issues.";
            };
        };
    };
    readonly ToolsOzoneTeamDeleteMember: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.team.deleteMember";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Delete a member from ozone team. Requires admin role.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["did"];
                        readonly properties: {
                            readonly did: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                        };
                    };
                };
                readonly errors: [{
                    readonly name: "MemberNotFound";
                    readonly description: "The member being deleted does not exist";
                }, {
                    readonly name: "CannotDeleteSelf";
                    readonly description: "You can not delete yourself from the team";
                }];
            };
        };
    };
    readonly ToolsOzoneTeamListMembers: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.team.listMembers";
        readonly defs: {
            readonly main: {
                readonly type: "query";
                readonly description: "List all members with access to the ozone service.";
                readonly parameters: {
                    readonly type: "params";
                    readonly properties: {
                        readonly limit: {
                            readonly type: "integer";
                            readonly minimum: 1;
                            readonly maximum: 100;
                            readonly default: 50;
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["members"];
                        readonly properties: {
                            readonly cursor: {
                                readonly type: "string";
                            };
                            readonly members: {
                                readonly type: "array";
                                readonly items: {
                                    readonly type: "ref";
                                    readonly ref: "lex:tools.ozone.team.defs#member";
                                };
                            };
                        };
                    };
                };
            };
        };
    };
    readonly ToolsOzoneTeamUpdateMember: {
        readonly lexicon: 1;
        readonly id: "tools.ozone.team.updateMember";
        readonly defs: {
            readonly main: {
                readonly type: "procedure";
                readonly description: "Update a member in the ozone service. Requires admin role.";
                readonly input: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "object";
                        readonly required: ["did"];
                        readonly properties: {
                            readonly did: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                            readonly disabled: {
                                readonly type: "boolean";
                            };
                            readonly role: {
                                readonly type: "string";
                                readonly knownValues: ["tools.ozone.team.defs#roleAdmin", "tools.ozone.team.defs#roleModerator", "tools.ozone.team.defs#roleTriage"];
                            };
                        };
                    };
                };
                readonly output: {
                    readonly encoding: "application/json";
                    readonly schema: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.team.defs#member";
                    };
                };
                readonly errors: [{
                    readonly name: "MemberNotFound";
                    readonly description: "The member being updated does not exist in the team";
                }];
            };
        };
    };
};
export declare const schemas: ({
    readonly lexicon: 1;
    readonly id: "com.atproto.admin.defs";
    readonly defs: {
        readonly statusAttr: {
            readonly type: "object";
            readonly required: ["applied"];
            readonly properties: {
                readonly applied: {
                    readonly type: "boolean";
                };
                readonly ref: {
                    readonly type: "string";
                };
            };
        };
        readonly accountView: {
            readonly type: "object";
            readonly required: ["did", "handle", "indexedAt"];
            readonly properties: {
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly handle: {
                    readonly type: "string";
                    readonly format: "handle";
                };
                readonly email: {
                    readonly type: "string";
                };
                readonly relatedRecords: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "unknown";
                    };
                };
                readonly indexedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly invitedBy: {
                    readonly type: "ref";
                    readonly ref: "lex:com.atproto.server.defs#inviteCode";
                };
                readonly invites: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.server.defs#inviteCode";
                    };
                };
                readonly invitesDisabled: {
                    readonly type: "boolean";
                };
                readonly emailConfirmedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly inviteNote: {
                    readonly type: "string";
                };
                readonly deactivatedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly threatSignatures: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.admin.defs#threatSignature";
                    };
                };
            };
        };
        readonly repoRef: {
            readonly type: "object";
            readonly required: ["did"];
            readonly properties: {
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
            };
        };
        readonly repoBlobRef: {
            readonly type: "object";
            readonly required: ["did", "cid"];
            readonly properties: {
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly recordUri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
            };
        };
        readonly threatSignature: {
            readonly type: "object";
            readonly required: ["property", "value"];
            readonly properties: {
                readonly property: {
                    readonly type: "string";
                };
                readonly value: {
                    readonly type: "string";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.admin.deleteAccount";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Delete a user account as an administrator.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["did"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.admin.disableAccountInvites";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Disable an account from receiving new invite codes, but does not invalidate existing codes.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["account"];
                    readonly properties: {
                        readonly account: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly note: {
                            readonly type: "string";
                            readonly description: "Optional reason for disabled invites.";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.admin.disableInviteCodes";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Disable some set of codes and/or all codes associated with a set of users.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly properties: {
                        readonly codes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly accounts: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.admin.enableAccountInvites";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Re-enable an account's ability to receive invite codes.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["account"];
                    readonly properties: {
                        readonly account: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly note: {
                            readonly type: "string";
                            readonly description: "Optional reason for enabled invites.";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.admin.getAccountInfo";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get details about an account.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["did"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "ref";
                    readonly ref: "lex:com.atproto.admin.defs#accountView";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.admin.getAccountInfos";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get details about some accounts.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["dids"];
                readonly properties: {
                    readonly dids: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["infos"];
                    readonly properties: {
                        readonly infos: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.admin.defs#accountView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.admin.getInviteCodes";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get an admin view of invite codes.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly sort: {
                        readonly type: "string";
                        readonly knownValues: ["recent", "usage"];
                        readonly default: "recent";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 500;
                        readonly default: 100;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["codes"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly codes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.server.defs#inviteCode";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.admin.getSubjectStatus";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get the service-specific admin status of a subject (account, record, or blob).";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly blob: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["subject"];
                    readonly properties: {
                        readonly subject: {
                            readonly type: "union";
                            readonly refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef", "lex:com.atproto.admin.defs#repoBlobRef"];
                        };
                        readonly takedown: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.admin.defs#statusAttr";
                        };
                        readonly deactivated: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.admin.defs#statusAttr";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.admin.searchAccounts";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get list of accounts that matches your search query.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly email: {
                        readonly type: "string";
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["accounts"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly accounts: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.admin.defs#accountView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.admin.sendEmail";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Send email to a user's account email address.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["recipientDid", "content", "senderDid"];
                    readonly properties: {
                        readonly recipientDid: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly content: {
                            readonly type: "string";
                        };
                        readonly subject: {
                            readonly type: "string";
                        };
                        readonly senderDid: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly comment: {
                            readonly type: "string";
                            readonly description: "Additional comment by the sender that won't be used in the email itself but helpful to provide more context for moderators/reviewers";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["sent"];
                    readonly properties: {
                        readonly sent: {
                            readonly type: "boolean";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.admin.updateAccountEmail";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Administrative action to update an account's email.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["account", "email"];
                    readonly properties: {
                        readonly account: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                            readonly description: "The handle or DID of the repo.";
                        };
                        readonly email: {
                            readonly type: "string";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.admin.updateAccountHandle";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Administrative action to update an account's handle.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["did", "handle"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly handle: {
                            readonly type: "string";
                            readonly format: "handle";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.admin.updateAccountPassword";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Update the password for a user account as an administrator.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["did", "password"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly password: {
                            readonly type: "string";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.admin.updateSubjectStatus";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Update the service-specific admin status of a subject (account, record, or blob).";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["subject"];
                    readonly properties: {
                        readonly subject: {
                            readonly type: "union";
                            readonly refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef", "lex:com.atproto.admin.defs#repoBlobRef"];
                        };
                        readonly takedown: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.admin.defs#statusAttr";
                        };
                        readonly deactivated: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.admin.defs#statusAttr";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["subject"];
                    readonly properties: {
                        readonly subject: {
                            readonly type: "union";
                            readonly refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef", "lex:com.atproto.admin.defs#repoBlobRef"];
                        };
                        readonly takedown: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.admin.defs#statusAttr";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.identity.getRecommendedDidCredentials";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Describe the credentials that should be included in the DID doc of an account that is migrating to this service.";
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly properties: {
                        readonly rotationKeys: {
                            readonly description: "Recommended rotation keys for PLC dids. Should be undefined (or ignored) for did:webs.";
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly alsoKnownAs: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly verificationMethods: {
                            readonly type: "unknown";
                        };
                        readonly services: {
                            readonly type: "unknown";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.identity.requestPlcOperationSignature";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Request an email with a code to in order to request a signed PLC operation. Requires Auth.";
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.identity.resolveHandle";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Resolves a handle (domain name) to a DID.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["handle"];
                readonly properties: {
                    readonly handle: {
                        readonly type: "string";
                        readonly format: "handle";
                        readonly description: "The handle to resolve.";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["did"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.identity.signPlcOperation";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Signs a PLC operation to update some value(s) in the requesting DID's document.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly properties: {
                        readonly token: {
                            readonly description: "A token received through com.atproto.identity.requestPlcOperationSignature";
                            readonly type: "string";
                        };
                        readonly rotationKeys: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly alsoKnownAs: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly verificationMethods: {
                            readonly type: "unknown";
                        };
                        readonly services: {
                            readonly type: "unknown";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["operation"];
                    readonly properties: {
                        readonly operation: {
                            readonly type: "unknown";
                            readonly description: "A signed DID PLC operation.";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.identity.submitPlcOperation";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Validates a PLC operation to ensure that it doesn't violate a service's constraints or get the identity into a bad state, then submits it to the PLC registry";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["operation"];
                    readonly properties: {
                        readonly operation: {
                            readonly type: "unknown";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.identity.updateHandle";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Updates the current account's handle. Verifies handle validity, and updates did:plc document if necessary. Implemented by PDS, and requires auth.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["handle"];
                    readonly properties: {
                        readonly handle: {
                            readonly type: "string";
                            readonly format: "handle";
                            readonly description: "The new handle.";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.label.defs";
    readonly defs: {
        readonly label: {
            readonly type: "object";
            readonly description: "Metadata tag on an atproto resource (eg, repo or record).";
            readonly required: ["src", "uri", "val", "cts"];
            readonly properties: {
                readonly ver: {
                    readonly type: "integer";
                    readonly description: "The AT Protocol version of the label object.";
                };
                readonly src: {
                    readonly type: "string";
                    readonly format: "did";
                    readonly description: "DID of the actor who created this label.";
                };
                readonly uri: {
                    readonly type: "string";
                    readonly format: "uri";
                    readonly description: "AT URI of the record, repository (account), or other resource that this label applies to.";
                };
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                    readonly description: "Optionally, CID specifying the specific version of 'uri' resource this label applies to.";
                };
                readonly val: {
                    readonly type: "string";
                    readonly maxLength: 128;
                    readonly description: "The short string name of the value or type of this label.";
                };
                readonly neg: {
                    readonly type: "boolean";
                    readonly description: "If true, this is a negation label, overwriting a previous label.";
                };
                readonly cts: {
                    readonly type: "string";
                    readonly format: "datetime";
                    readonly description: "Timestamp when this label was created.";
                };
                readonly exp: {
                    readonly type: "string";
                    readonly format: "datetime";
                    readonly description: "Timestamp at which this label expires (no longer applies).";
                };
                readonly sig: {
                    readonly type: "bytes";
                    readonly description: "Signature of dag-cbor encoded label.";
                };
            };
        };
        readonly selfLabels: {
            readonly type: "object";
            readonly description: "Metadata tags on an atproto record, published by the author within the record.";
            readonly required: ["values"];
            readonly properties: {
                readonly values: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#selfLabel";
                    };
                    readonly maxLength: 10;
                };
            };
        };
        readonly selfLabel: {
            readonly type: "object";
            readonly description: "Metadata tag on an atproto record, published by the author within the record. Note that schemas should use #selfLabels, not #selfLabel.";
            readonly required: ["val"];
            readonly properties: {
                readonly val: {
                    readonly type: "string";
                    readonly maxLength: 128;
                    readonly description: "The short string name of the value or type of this label.";
                };
            };
        };
        readonly labelValueDefinition: {
            readonly type: "object";
            readonly description: "Declares a label value and its expected interpretations and behaviors.";
            readonly required: ["identifier", "severity", "blurs", "locales"];
            readonly properties: {
                readonly identifier: {
                    readonly type: "string";
                    readonly description: "The value of the label being defined. Must only include lowercase ascii and the '-' character ([a-z-]+).";
                    readonly maxLength: 100;
                    readonly maxGraphemes: 100;
                };
                readonly severity: {
                    readonly type: "string";
                    readonly description: "How should a client visually convey this label? 'inform' means neutral and informational; 'alert' means negative and warning; 'none' means show nothing.";
                    readonly knownValues: ["inform", "alert", "none"];
                };
                readonly blurs: {
                    readonly type: "string";
                    readonly description: "What should this label hide in the UI, if applied? 'content' hides all of the target; 'media' hides the images/video/audio; 'none' hides nothing.";
                    readonly knownValues: ["content", "media", "none"];
                };
                readonly defaultSetting: {
                    readonly type: "string";
                    readonly description: "The default setting for this label.";
                    readonly knownValues: ["ignore", "warn", "hide"];
                    readonly default: "warn";
                };
                readonly adultOnly: {
                    readonly type: "boolean";
                    readonly description: "Does the user need to have adult content enabled in order to configure this label?";
                };
                readonly locales: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#labelValueDefinitionStrings";
                    };
                };
            };
        };
        readonly labelValueDefinitionStrings: {
            readonly type: "object";
            readonly description: "Strings which describe the label in the UI, localized into a specific language.";
            readonly required: ["lang", "name", "description"];
            readonly properties: {
                readonly lang: {
                    readonly type: "string";
                    readonly description: "The code of the language these strings are written in.";
                    readonly format: "language";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "A short human-readable name for the label.";
                    readonly maxGraphemes: 64;
                    readonly maxLength: 640;
                };
                readonly description: {
                    readonly type: "string";
                    readonly description: "A longer description of what the label means and why it might be applied.";
                    readonly maxGraphemes: 10000;
                    readonly maxLength: 100000;
                };
            };
        };
        readonly labelValue: {
            readonly type: "string";
            readonly knownValues: ["!hide", "!no-promote", "!warn", "!no-unauthenticated", "dmca-violation", "doxxing", "porn", "sexual", "nudity", "nsfl", "gore"];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.label.queryLabels";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Find labels relevant to the provided AT-URI patterns. Public endpoint for moderation services, though may return different or additional results with auth.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["uriPatterns"];
                readonly properties: {
                    readonly uriPatterns: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "List of AT URI patterns to match (boolean 'OR'). Each may be a prefix (ending with '*'; will match inclusive of the string leading to '*'), or a full URI.";
                    };
                    readonly sources: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly description: "Optional list of label sources (DIDs) to filter on.";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 250;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["labels"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly labels: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.label.defs#label";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.label.subscribeLabels";
    readonly defs: {
        readonly main: {
            readonly type: "subscription";
            readonly description: "Subscribe to stream of labels (and negations). Public endpoint implemented by mod services. Uses same sequencing scheme as repo event stream.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly cursor: {
                        readonly type: "integer";
                        readonly description: "The last known event seq number to backfill from.";
                    };
                };
            };
            readonly message: {
                readonly schema: {
                    readonly type: "union";
                    readonly refs: ["lex:com.atproto.label.subscribeLabels#labels", "lex:com.atproto.label.subscribeLabels#info"];
                };
            };
            readonly errors: [{
                readonly name: "FutureCursor";
            }];
        };
        readonly labels: {
            readonly type: "object";
            readonly required: ["seq", "labels"];
            readonly properties: {
                readonly seq: {
                    readonly type: "integer";
                };
                readonly labels: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#label";
                    };
                };
            };
        };
        readonly info: {
            readonly type: "object";
            readonly required: ["name"];
            readonly properties: {
                readonly name: {
                    readonly type: "string";
                    readonly knownValues: ["OutdatedCursor"];
                };
                readonly message: {
                    readonly type: "string";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.lexicon.schema";
    readonly defs: {
        readonly main: {
            readonly type: "record";
            readonly description: "Representation of Lexicon schemas themselves, when published as atproto records. Note that the schema language is not defined in Lexicon; this meta schema currently only includes a single version field ('lexicon'). See the atproto specifications for description of the other expected top-level fields ('id', 'defs', etc).";
            readonly key: "nsid";
            readonly record: {
                readonly type: "object";
                readonly required: ["lexicon"];
                readonly properties: {
                    readonly lexicon: {
                        readonly type: "integer";
                        readonly description: "Indicates the 'version' of the Lexicon language. Must be '1' for the current atproto/Lexicon schema system.";
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.moderation.createReport";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Submit a moderation report regarding an atproto account or record. Implemented by moderation services (with PDS proxying), and requires auth.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["reasonType", "subject"];
                    readonly properties: {
                        readonly reasonType: {
                            readonly type: "ref";
                            readonly description: "Indicates the broad category of violation the report is for.";
                            readonly ref: "lex:com.atproto.moderation.defs#reasonType";
                        };
                        readonly reason: {
                            readonly type: "string";
                            readonly maxGraphemes: 2000;
                            readonly maxLength: 20000;
                            readonly description: "Additional context about the content and violation.";
                        };
                        readonly subject: {
                            readonly type: "union";
                            readonly refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef"];
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["id", "reasonType", "subject", "reportedBy", "createdAt"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "integer";
                        };
                        readonly reasonType: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.moderation.defs#reasonType";
                        };
                        readonly reason: {
                            readonly type: "string";
                            readonly maxGraphemes: 2000;
                            readonly maxLength: 20000;
                        };
                        readonly subject: {
                            readonly type: "union";
                            readonly refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef"];
                        };
                        readonly reportedBy: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly createdAt: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.moderation.defs";
    readonly defs: {
        readonly reasonType: {
            readonly type: "string";
            readonly knownValues: ["com.atproto.moderation.defs#reasonSpam", "com.atproto.moderation.defs#reasonViolation", "com.atproto.moderation.defs#reasonMisleading", "com.atproto.moderation.defs#reasonSexual", "com.atproto.moderation.defs#reasonRude", "com.atproto.moderation.defs#reasonOther", "com.atproto.moderation.defs#reasonAppeal"];
        };
        readonly reasonSpam: {
            readonly type: "token";
            readonly description: "Spam: frequent unwanted promotion, replies, mentions";
        };
        readonly reasonViolation: {
            readonly type: "token";
            readonly description: "Direct violation of server rules, laws, terms of service";
        };
        readonly reasonMisleading: {
            readonly type: "token";
            readonly description: "Misleading identity, affiliation, or content";
        };
        readonly reasonSexual: {
            readonly type: "token";
            readonly description: "Unwanted or mislabeled sexual content";
        };
        readonly reasonRude: {
            readonly type: "token";
            readonly description: "Rude, harassing, explicit, or otherwise unwelcoming behavior";
        };
        readonly reasonOther: {
            readonly type: "token";
            readonly description: "Other: reports not falling under another report category";
        };
        readonly reasonAppeal: {
            readonly type: "token";
            readonly description: "Appeal: appeal a previously taken moderation action";
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.repo.applyWrites";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Apply a batch transaction of repository creates, updates, and deletes. Requires auth, implemented by PDS.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["repo", "writes"];
                    readonly properties: {
                        readonly repo: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                            readonly description: "The handle or DID of the repo (aka, current account).";
                        };
                        readonly validate: {
                            readonly type: "boolean";
                            readonly description: "Can be set to 'false' to skip Lexicon schema validation of record data across all operations, 'true' to require it, or leave unset to validate only for known Lexicons.";
                        };
                        readonly writes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "union";
                                readonly refs: ["lex:com.atproto.repo.applyWrites#create", "lex:com.atproto.repo.applyWrites#update", "lex:com.atproto.repo.applyWrites#delete"];
                                readonly closed: true;
                            };
                        };
                        readonly swapCommit: {
                            readonly type: "string";
                            readonly description: "If provided, the entire operation will fail if the current repo commit CID does not match this value. Used to prevent conflicting repo mutations.";
                            readonly format: "cid";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: [];
                    readonly properties: {
                        readonly commit: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.repo.defs#commitMeta";
                        };
                        readonly results: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "union";
                                readonly refs: ["lex:com.atproto.repo.applyWrites#createResult", "lex:com.atproto.repo.applyWrites#updateResult", "lex:com.atproto.repo.applyWrites#deleteResult"];
                                readonly closed: true;
                            };
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "InvalidSwap";
                readonly description: "Indicates that the 'swapCommit' parameter did not match current commit.";
            }];
        };
        readonly create: {
            readonly type: "object";
            readonly description: "Operation which creates a new record.";
            readonly required: ["collection", "value"];
            readonly properties: {
                readonly collection: {
                    readonly type: "string";
                    readonly format: "nsid";
                };
                readonly rkey: {
                    readonly type: "string";
                    readonly maxLength: 512;
                };
                readonly value: {
                    readonly type: "unknown";
                };
            };
        };
        readonly update: {
            readonly type: "object";
            readonly description: "Operation which updates an existing record.";
            readonly required: ["collection", "rkey", "value"];
            readonly properties: {
                readonly collection: {
                    readonly type: "string";
                    readonly format: "nsid";
                };
                readonly rkey: {
                    readonly type: "string";
                };
                readonly value: {
                    readonly type: "unknown";
                };
            };
        };
        readonly delete: {
            readonly type: "object";
            readonly description: "Operation which deletes an existing record.";
            readonly required: ["collection", "rkey"];
            readonly properties: {
                readonly collection: {
                    readonly type: "string";
                    readonly format: "nsid";
                };
                readonly rkey: {
                    readonly type: "string";
                };
            };
        };
        readonly createResult: {
            readonly type: "object";
            readonly required: ["uri", "cid"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly validationStatus: {
                    readonly type: "string";
                    readonly knownValues: ["valid", "unknown"];
                };
            };
        };
        readonly updateResult: {
            readonly type: "object";
            readonly required: ["uri", "cid"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly validationStatus: {
                    readonly type: "string";
                    readonly knownValues: ["valid", "unknown"];
                };
            };
        };
        readonly deleteResult: {
            readonly type: "object";
            readonly required: [];
            readonly properties: {};
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.repo.createRecord";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Create a single new repository record. Requires auth, implemented by PDS.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["repo", "collection", "record"];
                    readonly properties: {
                        readonly repo: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                            readonly description: "The handle or DID of the repo (aka, current account).";
                        };
                        readonly collection: {
                            readonly type: "string";
                            readonly format: "nsid";
                            readonly description: "The NSID of the record collection.";
                        };
                        readonly rkey: {
                            readonly type: "string";
                            readonly description: "The Record Key.";
                            readonly maxLength: 512;
                        };
                        readonly validate: {
                            readonly type: "boolean";
                            readonly description: "Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons.";
                        };
                        readonly record: {
                            readonly type: "unknown";
                            readonly description: "The record itself. Must contain a $type field.";
                        };
                        readonly swapCommit: {
                            readonly type: "string";
                            readonly format: "cid";
                            readonly description: "Compare and swap with the previous commit by CID.";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["uri", "cid"];
                    readonly properties: {
                        readonly uri: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                        readonly cid: {
                            readonly type: "string";
                            readonly format: "cid";
                        };
                        readonly commit: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.repo.defs#commitMeta";
                        };
                        readonly validationStatus: {
                            readonly type: "string";
                            readonly knownValues: ["valid", "unknown"];
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "InvalidSwap";
                readonly description: "Indicates that 'swapCommit' didn't match current repo commit.";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.repo.defs";
    readonly defs: {
        readonly commitMeta: {
            readonly type: "object";
            readonly required: ["cid", "rev"];
            readonly properties: {
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly rev: {
                    readonly type: "string";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.repo.deleteRecord";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Delete a repository record, or ensure it doesn't exist. Requires auth, implemented by PDS.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["repo", "collection", "rkey"];
                    readonly properties: {
                        readonly repo: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                            readonly description: "The handle or DID of the repo (aka, current account).";
                        };
                        readonly collection: {
                            readonly type: "string";
                            readonly format: "nsid";
                            readonly description: "The NSID of the record collection.";
                        };
                        readonly rkey: {
                            readonly type: "string";
                            readonly description: "The Record Key.";
                        };
                        readonly swapRecord: {
                            readonly type: "string";
                            readonly format: "cid";
                            readonly description: "Compare and swap with the previous record by CID.";
                        };
                        readonly swapCommit: {
                            readonly type: "string";
                            readonly format: "cid";
                            readonly description: "Compare and swap with the previous commit by CID.";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly properties: {
                        readonly commit: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.repo.defs#commitMeta";
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "InvalidSwap";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.repo.describeRepo";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get information about an account and repository, including the list of collections. Does not require auth.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["repo"];
                readonly properties: {
                    readonly repo: {
                        readonly type: "string";
                        readonly format: "at-identifier";
                        readonly description: "The handle or DID of the repo.";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["handle", "did", "didDoc", "collections", "handleIsCorrect"];
                    readonly properties: {
                        readonly handle: {
                            readonly type: "string";
                            readonly format: "handle";
                        };
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly didDoc: {
                            readonly type: "unknown";
                            readonly description: "The complete DID document for this account.";
                        };
                        readonly collections: {
                            readonly type: "array";
                            readonly description: "List of all the collections (NSIDs) for which this repo contains at least one record.";
                            readonly items: {
                                readonly type: "string";
                                readonly format: "nsid";
                            };
                        };
                        readonly handleIsCorrect: {
                            readonly type: "boolean";
                            readonly description: "Indicates if handle is currently valid (resolves bi-directionally)";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.repo.getRecord";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get a single record from a repository. Does not require auth.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["repo", "collection", "rkey"];
                readonly properties: {
                    readonly repo: {
                        readonly type: "string";
                        readonly format: "at-identifier";
                        readonly description: "The handle or DID of the repo.";
                    };
                    readonly collection: {
                        readonly type: "string";
                        readonly format: "nsid";
                        readonly description: "The NSID of the record collection.";
                    };
                    readonly rkey: {
                        readonly type: "string";
                        readonly description: "The Record Key.";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                        readonly description: "The CID of the version of the record. If not specified, then return the most recent version.";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["uri", "value"];
                    readonly properties: {
                        readonly uri: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                        readonly cid: {
                            readonly type: "string";
                            readonly format: "cid";
                        };
                        readonly value: {
                            readonly type: "unknown";
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "RecordNotFound";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.repo.importRepo";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Import a repo in the form of a CAR file. Requires Content-Length HTTP header to be set.";
            readonly input: {
                readonly encoding: "application/vnd.ipld.car";
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.repo.listMissingBlobs";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Returns a list of missing blobs for the requesting account. Intended to be used in the account migration flow.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 1000;
                        readonly default: 500;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["blobs"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly blobs: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.repo.listMissingBlobs#recordBlob";
                            };
                        };
                    };
                };
            };
        };
        readonly recordBlob: {
            readonly type: "object";
            readonly required: ["cid", "recordUri"];
            readonly properties: {
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly recordUri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.repo.listRecords";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "List a range of records in a repository, matching a specific collection. Does not require auth.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["repo", "collection"];
                readonly properties: {
                    readonly repo: {
                        readonly type: "string";
                        readonly format: "at-identifier";
                        readonly description: "The handle or DID of the repo.";
                    };
                    readonly collection: {
                        readonly type: "string";
                        readonly format: "nsid";
                        readonly description: "The NSID of the record type.";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                        readonly description: "The number of records to return.";
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                    readonly rkeyStart: {
                        readonly type: "string";
                        readonly description: "DEPRECATED: The lowest sort-ordered rkey to start from (exclusive)";
                    };
                    readonly rkeyEnd: {
                        readonly type: "string";
                        readonly description: "DEPRECATED: The highest sort-ordered rkey to stop at (exclusive)";
                    };
                    readonly reverse: {
                        readonly type: "boolean";
                        readonly description: "Flag to reverse the order of the returned records.";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["records"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly records: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.repo.listRecords#record";
                            };
                        };
                    };
                };
            };
        };
        readonly record: {
            readonly type: "object";
            readonly required: ["uri", "cid", "value"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly value: {
                    readonly type: "unknown";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.repo.putRecord";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Write a repository record, creating or updating it as needed. Requires auth, implemented by PDS.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["repo", "collection", "rkey", "record"];
                    readonly nullable: ["swapRecord"];
                    readonly properties: {
                        readonly repo: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                            readonly description: "The handle or DID of the repo (aka, current account).";
                        };
                        readonly collection: {
                            readonly type: "string";
                            readonly format: "nsid";
                            readonly description: "The NSID of the record collection.";
                        };
                        readonly rkey: {
                            readonly type: "string";
                            readonly description: "The Record Key.";
                            readonly maxLength: 512;
                        };
                        readonly validate: {
                            readonly type: "boolean";
                            readonly description: "Can be set to 'false' to skip Lexicon schema validation of record data, 'true' to require it, or leave unset to validate only for known Lexicons.";
                        };
                        readonly record: {
                            readonly type: "unknown";
                            readonly description: "The record to write.";
                        };
                        readonly swapRecord: {
                            readonly type: "string";
                            readonly format: "cid";
                            readonly description: "Compare and swap with the previous record by CID. WARNING: nullable and optional field; may cause problems with golang implementation";
                        };
                        readonly swapCommit: {
                            readonly type: "string";
                            readonly format: "cid";
                            readonly description: "Compare and swap with the previous commit by CID.";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["uri", "cid"];
                    readonly properties: {
                        readonly uri: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                        readonly cid: {
                            readonly type: "string";
                            readonly format: "cid";
                        };
                        readonly commit: {
                            readonly type: "ref";
                            readonly ref: "lex:com.atproto.repo.defs#commitMeta";
                        };
                        readonly validationStatus: {
                            readonly type: "string";
                            readonly knownValues: ["valid", "unknown"];
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "InvalidSwap";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.repo.strongRef";
    readonly description: "A URI with a content-hash fingerprint.";
    readonly defs: {
        readonly main: {
            readonly type: "object";
            readonly required: ["uri", "cid"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.repo.uploadBlob";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Upload a new blob, to be referenced from a repository record. The blob will be deleted if it is not referenced within a time window (eg, minutes). Blob restrictions (mimetype, size, etc) are enforced when the reference is created. Requires auth, implemented by PDS.";
            readonly input: {
                readonly encoding: "*/*";
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["blob"];
                    readonly properties: {
                        readonly blob: {
                            readonly type: "blob";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.activateAccount";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Activates a currently deactivated account. Used to finalize account migration after the account's repo is imported and identity is setup.";
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.checkAccountStatus";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Returns the status of an account, especially as pertaining to import or recovery. Can be called many times over the course of an account migration. Requires auth and can only be called pertaining to oneself.";
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["activated", "validDid", "repoCommit", "repoRev", "repoBlocks", "indexedRecords", "privateStateValues", "expectedBlobs", "importedBlobs"];
                    readonly properties: {
                        readonly activated: {
                            readonly type: "boolean";
                        };
                        readonly validDid: {
                            readonly type: "boolean";
                        };
                        readonly repoCommit: {
                            readonly type: "string";
                            readonly format: "cid";
                        };
                        readonly repoRev: {
                            readonly type: "string";
                        };
                        readonly repoBlocks: {
                            readonly type: "integer";
                        };
                        readonly indexedRecords: {
                            readonly type: "integer";
                        };
                        readonly privateStateValues: {
                            readonly type: "integer";
                        };
                        readonly expectedBlobs: {
                            readonly type: "integer";
                        };
                        readonly importedBlobs: {
                            readonly type: "integer";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.confirmEmail";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Confirm an email using a token from com.atproto.server.requestEmailConfirmation.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["email", "token"];
                    readonly properties: {
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly token: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "AccountNotFound";
            }, {
                readonly name: "ExpiredToken";
            }, {
                readonly name: "InvalidToken";
            }, {
                readonly name: "InvalidEmail";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.createAccount";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Create an account. Implemented by PDS.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["handle"];
                    readonly properties: {
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly handle: {
                            readonly type: "string";
                            readonly format: "handle";
                            readonly description: "Requested handle for the account.";
                        };
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "Pre-existing atproto DID, being imported to a new account.";
                        };
                        readonly inviteCode: {
                            readonly type: "string";
                        };
                        readonly verificationCode: {
                            readonly type: "string";
                        };
                        readonly verificationPhone: {
                            readonly type: "string";
                        };
                        readonly password: {
                            readonly type: "string";
                            readonly description: "Initial account password. May need to meet instance-specific password strength requirements.";
                        };
                        readonly recoveryKey: {
                            readonly type: "string";
                            readonly description: "DID PLC rotation key (aka, recovery key) to be included in PLC creation operation.";
                        };
                        readonly plcOp: {
                            readonly type: "unknown";
                            readonly description: "A signed DID PLC operation to be submitted as part of importing an existing account to this instance. NOTE: this optional field may be updated when full account migration is implemented.";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly description: "Account login session returned on successful account creation.";
                    readonly required: ["accessJwt", "refreshJwt", "handle", "did"];
                    readonly properties: {
                        readonly accessJwt: {
                            readonly type: "string";
                        };
                        readonly refreshJwt: {
                            readonly type: "string";
                        };
                        readonly handle: {
                            readonly type: "string";
                            readonly format: "handle";
                        };
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "The DID of the new account.";
                        };
                        readonly didDoc: {
                            readonly type: "unknown";
                            readonly description: "Complete DID document.";
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "InvalidHandle";
            }, {
                readonly name: "InvalidPassword";
            }, {
                readonly name: "InvalidInviteCode";
            }, {
                readonly name: "HandleNotAvailable";
            }, {
                readonly name: "UnsupportedDomain";
            }, {
                readonly name: "UnresolvableDid";
            }, {
                readonly name: "IncompatibleDidDoc";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.createAppPassword";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Create an App Password.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["name"];
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "A short name for the App Password, to help distinguish them.";
                        };
                        readonly privileged: {
                            readonly type: "boolean";
                            readonly description: "If an app password has 'privileged' access to possibly sensitive account state. Meant for use with trusted clients.";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "ref";
                    readonly ref: "lex:com.atproto.server.createAppPassword#appPassword";
                };
            };
            readonly errors: [{
                readonly name: "AccountTakedown";
            }];
        };
        readonly appPassword: {
            readonly type: "object";
            readonly required: ["name", "password", "createdAt"];
            readonly properties: {
                readonly name: {
                    readonly type: "string";
                };
                readonly password: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly privileged: {
                    readonly type: "boolean";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.createInviteCode";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Create an invite code.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["useCount"];
                    readonly properties: {
                        readonly useCount: {
                            readonly type: "integer";
                        };
                        readonly forAccount: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["code"];
                    readonly properties: {
                        readonly code: {
                            readonly type: "string";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.createInviteCodes";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Create invite codes.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["codeCount", "useCount"];
                    readonly properties: {
                        readonly codeCount: {
                            readonly type: "integer";
                            readonly default: 1;
                        };
                        readonly useCount: {
                            readonly type: "integer";
                        };
                        readonly forAccounts: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly format: "did";
                            };
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["codes"];
                    readonly properties: {
                        readonly codes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.server.createInviteCodes#accountCodes";
                            };
                        };
                    };
                };
            };
        };
        readonly accountCodes: {
            readonly type: "object";
            readonly required: ["account", "codes"];
            readonly properties: {
                readonly account: {
                    readonly type: "string";
                };
                readonly codes: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.createSession";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Create an authentication session.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["identifier", "password"];
                    readonly properties: {
                        readonly identifier: {
                            readonly type: "string";
                            readonly description: "Handle or other identifier supported by the server for the authenticating user.";
                        };
                        readonly password: {
                            readonly type: "string";
                        };
                        readonly authFactorToken: {
                            readonly type: "string";
                        };
                        readonly allowTakendown: {
                            readonly type: "boolean";
                            readonly description: "When true, instead of throwing error for takendown accounts, a valid response with a narrow scoped token will be returned";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["accessJwt", "refreshJwt", "handle", "did"];
                    readonly properties: {
                        readonly accessJwt: {
                            readonly type: "string";
                        };
                        readonly refreshJwt: {
                            readonly type: "string";
                        };
                        readonly handle: {
                            readonly type: "string";
                            readonly format: "handle";
                        };
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly didDoc: {
                            readonly type: "unknown";
                        };
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly emailConfirmed: {
                            readonly type: "boolean";
                        };
                        readonly emailAuthFactor: {
                            readonly type: "boolean";
                        };
                        readonly active: {
                            readonly type: "boolean";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.";
                            readonly knownValues: ["takendown", "suspended", "deactivated"];
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "AccountTakedown";
            }, {
                readonly name: "AuthFactorTokenRequired";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.deactivateAccount";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Deactivates a currently active account. Stops serving of repo, and future writes to repo until reactivated. Used to finalize account migration with the old host after the account has been activated on the new host.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly properties: {
                        readonly deleteAfter: {
                            readonly type: "string";
                            readonly format: "datetime";
                            readonly description: "A recommendation to server as to how long they should hold onto the deactivated account before deleting.";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.defs";
    readonly defs: {
        readonly inviteCode: {
            readonly type: "object";
            readonly required: ["code", "available", "disabled", "forAccount", "createdBy", "createdAt", "uses"];
            readonly properties: {
                readonly code: {
                    readonly type: "string";
                };
                readonly available: {
                    readonly type: "integer";
                };
                readonly disabled: {
                    readonly type: "boolean";
                };
                readonly forAccount: {
                    readonly type: "string";
                };
                readonly createdBy: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly uses: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.server.defs#inviteCodeUse";
                    };
                };
            };
        };
        readonly inviteCodeUse: {
            readonly type: "object";
            readonly required: ["usedBy", "usedAt"];
            readonly properties: {
                readonly usedBy: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly usedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.deleteAccount";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Delete an actor's account with a token and password. Can only be called after requesting a deletion token. Requires auth.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["did", "password", "token"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly password: {
                            readonly type: "string";
                        };
                        readonly token: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "ExpiredToken";
            }, {
                readonly name: "InvalidToken";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.deleteSession";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Delete the current session. Requires auth.";
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.describeServer";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Describes the server's account creation requirements and capabilities. Implemented by PDS.";
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["did", "availableUserDomains"];
                    readonly properties: {
                        readonly inviteCodeRequired: {
                            readonly type: "boolean";
                            readonly description: "If true, an invite code must be supplied to create an account on this instance.";
                        };
                        readonly phoneVerificationRequired: {
                            readonly type: "boolean";
                            readonly description: "If true, a phone verification token must be supplied to create an account on this instance.";
                        };
                        readonly availableUserDomains: {
                            readonly type: "array";
                            readonly description: "List of domain suffixes that can be used in account handles.";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly links: {
                            readonly type: "ref";
                            readonly description: "URLs of service policy documents.";
                            readonly ref: "lex:com.atproto.server.describeServer#links";
                        };
                        readonly contact: {
                            readonly type: "ref";
                            readonly description: "Contact information";
                            readonly ref: "lex:com.atproto.server.describeServer#contact";
                        };
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                    };
                };
            };
        };
        readonly links: {
            readonly type: "object";
            readonly properties: {
                readonly privacyPolicy: {
                    readonly type: "string";
                    readonly format: "uri";
                };
                readonly termsOfService: {
                    readonly type: "string";
                    readonly format: "uri";
                };
            };
        };
        readonly contact: {
            readonly type: "object";
            readonly properties: {
                readonly email: {
                    readonly type: "string";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.getAccountInviteCodes";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get all invite codes for the current account. Requires auth.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly includeUsed: {
                        readonly type: "boolean";
                        readonly default: true;
                    };
                    readonly createAvailable: {
                        readonly type: "boolean";
                        readonly default: true;
                        readonly description: "Controls whether any new 'earned' but not 'created' invites should be created.";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["codes"];
                    readonly properties: {
                        readonly codes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.server.defs#inviteCode";
                            };
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "DuplicateCreate";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.getServiceAuth";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get a signed token on behalf of the requesting DID for the requested service.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["aud"];
                readonly properties: {
                    readonly aud: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "The DID of the service that the token will be used to authenticate with";
                    };
                    readonly exp: {
                        readonly type: "integer";
                        readonly description: "The time in Unix Epoch seconds that the JWT expires. Defaults to 60 seconds in the future. The service may enforce certain time bounds on tokens depending on the requested scope.";
                    };
                    readonly lxm: {
                        readonly type: "string";
                        readonly format: "nsid";
                        readonly description: "Lexicon (XRPC) method to bind the requested token to";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["token"];
                    readonly properties: {
                        readonly token: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "BadExpiration";
                readonly description: "Indicates that the requested expiration date is not a valid. May be in the past or may be reliant on the requested scopes.";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.getSession";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get information about the current auth session. Requires auth.";
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["handle", "did"];
                    readonly properties: {
                        readonly handle: {
                            readonly type: "string";
                            readonly format: "handle";
                        };
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly emailConfirmed: {
                            readonly type: "boolean";
                        };
                        readonly emailAuthFactor: {
                            readonly type: "boolean";
                        };
                        readonly didDoc: {
                            readonly type: "unknown";
                        };
                        readonly active: {
                            readonly type: "boolean";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.";
                            readonly knownValues: ["takendown", "suspended", "deactivated"];
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.listAppPasswords";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "List all App Passwords.";
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["passwords"];
                    readonly properties: {
                        readonly passwords: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.server.listAppPasswords#appPassword";
                            };
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "AccountTakedown";
            }];
        };
        readonly appPassword: {
            readonly type: "object";
            readonly required: ["name", "createdAt"];
            readonly properties: {
                readonly name: {
                    readonly type: "string";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly privileged: {
                    readonly type: "boolean";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.refreshSession";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Refresh an authentication session. Requires auth using the 'refreshJwt' (not the 'accessJwt').";
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["accessJwt", "refreshJwt", "handle", "did"];
                    readonly properties: {
                        readonly accessJwt: {
                            readonly type: "string";
                        };
                        readonly refreshJwt: {
                            readonly type: "string";
                        };
                        readonly handle: {
                            readonly type: "string";
                            readonly format: "handle";
                        };
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly didDoc: {
                            readonly type: "unknown";
                        };
                        readonly active: {
                            readonly type: "boolean";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "Hosting status of the account. If not specified, then assume 'active'.";
                            readonly knownValues: ["takendown", "suspended", "deactivated"];
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "AccountTakedown";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.requestAccountDelete";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Initiate a user account deletion via email.";
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.requestEmailConfirmation";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Request an email with a code to confirm ownership of email.";
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.requestEmailUpdate";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Request a token in order to update email.";
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["tokenRequired"];
                    readonly properties: {
                        readonly tokenRequired: {
                            readonly type: "boolean";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.requestPasswordReset";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Initiate a user account password reset via email.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["email"];
                    readonly properties: {
                        readonly email: {
                            readonly type: "string";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.reserveSigningKey";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Reserve a repo signing key, for use with account creation. Necessary so that a DID PLC update operation can be constructed during an account migraiton. Public and does not require auth; implemented by PDS. NOTE: this endpoint may change when full account migration is implemented.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "The DID to reserve a key for.";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["signingKey"];
                    readonly properties: {
                        readonly signingKey: {
                            readonly type: "string";
                            readonly description: "The public key for the reserved signing key, in did:key serialization.";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.resetPassword";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Reset a user account password using a token.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["token", "password"];
                    readonly properties: {
                        readonly token: {
                            readonly type: "string";
                        };
                        readonly password: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "ExpiredToken";
            }, {
                readonly name: "InvalidToken";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.revokeAppPassword";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Revoke an App Password by name.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["name"];
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.server.updateEmail";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Update an account's email.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["email"];
                    readonly properties: {
                        readonly email: {
                            readonly type: "string";
                        };
                        readonly emailAuthFactor: {
                            readonly type: "boolean";
                        };
                        readonly token: {
                            readonly type: "string";
                            readonly description: "Requires a token from com.atproto.sever.requestEmailUpdate if the account's email has been confirmed.";
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "ExpiredToken";
            }, {
                readonly name: "InvalidToken";
            }, {
                readonly name: "TokenRequired";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.sync.getBlob";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get a blob associated with a given account. Returns the full blob as originally uploaded. Does not require auth; implemented by PDS.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["did", "cid"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "The DID of the account.";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                        readonly description: "The CID of the blob to fetch";
                    };
                };
            };
            readonly output: {
                readonly encoding: "*/*";
            };
            readonly errors: [{
                readonly name: "BlobNotFound";
            }, {
                readonly name: "RepoNotFound";
            }, {
                readonly name: "RepoTakendown";
            }, {
                readonly name: "RepoSuspended";
            }, {
                readonly name: "RepoDeactivated";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.sync.getBlocks";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get data blocks from a given repo, by CID. For example, intermediate MST nodes, or records. Does not require auth; implemented by PDS.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["did", "cids"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "The DID of the repo.";
                    };
                    readonly cids: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly format: "cid";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/vnd.ipld.car";
            };
            readonly errors: [{
                readonly name: "BlockNotFound";
            }, {
                readonly name: "RepoNotFound";
            }, {
                readonly name: "RepoTakendown";
            }, {
                readonly name: "RepoSuspended";
            }, {
                readonly name: "RepoDeactivated";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.sync.getCheckout";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "DEPRECATED - please use com.atproto.sync.getRepo instead";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["did"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "The DID of the repo.";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/vnd.ipld.car";
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.sync.getHead";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "DEPRECATED - please use com.atproto.sync.getLatestCommit instead";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["did"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "The DID of the repo.";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["root"];
                    readonly properties: {
                        readonly root: {
                            readonly type: "string";
                            readonly format: "cid";
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "HeadNotFound";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.sync.getLatestCommit";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get the current commit CID & revision of the specified repo. Does not require auth.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["did"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "The DID of the repo.";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["cid", "rev"];
                    readonly properties: {
                        readonly cid: {
                            readonly type: "string";
                            readonly format: "cid";
                        };
                        readonly rev: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "RepoNotFound";
            }, {
                readonly name: "RepoTakendown";
            }, {
                readonly name: "RepoSuspended";
            }, {
                readonly name: "RepoDeactivated";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.sync.getRecord";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get data blocks needed to prove the existence or non-existence of record in the current version of repo. Does not require auth.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["did", "collection", "rkey"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "The DID of the repo.";
                    };
                    readonly collection: {
                        readonly type: "string";
                        readonly format: "nsid";
                    };
                    readonly rkey: {
                        readonly type: "string";
                        readonly description: "Record Key";
                    };
                    readonly commit: {
                        readonly type: "string";
                        readonly format: "cid";
                        readonly description: "DEPRECATED: referenced a repo commit by CID, and retrieved record as of that commit";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/vnd.ipld.car";
            };
            readonly errors: [{
                readonly name: "RecordNotFound";
            }, {
                readonly name: "RepoNotFound";
            }, {
                readonly name: "RepoTakendown";
            }, {
                readonly name: "RepoSuspended";
            }, {
                readonly name: "RepoDeactivated";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.sync.getRepo";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Download a repository export as CAR file. Optionally only a 'diff' since a previous revision. Does not require auth; implemented by PDS.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["did"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "The DID of the repo.";
                    };
                    readonly since: {
                        readonly type: "string";
                        readonly description: "The revision ('rev') of the repo to create a diff from.";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/vnd.ipld.car";
            };
            readonly errors: [{
                readonly name: "RepoNotFound";
            }, {
                readonly name: "RepoTakendown";
            }, {
                readonly name: "RepoSuspended";
            }, {
                readonly name: "RepoDeactivated";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.sync.getRepoStatus";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get the hosting status for a repository, on this server. Expected to be implemented by PDS and Relay.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["did"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "The DID of the repo.";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["did", "active"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly active: {
                            readonly type: "boolean";
                        };
                        readonly status: {
                            readonly type: "string";
                            readonly description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.";
                            readonly knownValues: ["takendown", "suspended", "deactivated"];
                        };
                        readonly rev: {
                            readonly type: "string";
                            readonly description: "Optional field, the current rev of the repo, if active=true";
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "RepoNotFound";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.sync.listBlobs";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "List blob CIDs for an account, since some repo revision. Does not require auth; implemented by PDS.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["did"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "The DID of the repo.";
                    };
                    readonly since: {
                        readonly type: "string";
                        readonly description: "Optional revision of the repo to list blobs since.";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 1000;
                        readonly default: 500;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["cids"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly cids: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly format: "cid";
                            };
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "RepoNotFound";
            }, {
                readonly name: "RepoTakendown";
            }, {
                readonly name: "RepoSuspended";
            }, {
                readonly name: "RepoDeactivated";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.sync.listRepos";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Enumerates all the DID, rev, and commit CID for all repos hosted by this service. Does not require auth; implemented by PDS and Relay.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 1000;
                        readonly default: 500;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["repos"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly repos: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.sync.listRepos#repo";
                            };
                        };
                    };
                };
            };
        };
        readonly repo: {
            readonly type: "object";
            readonly required: ["did", "head", "rev"];
            readonly properties: {
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly head: {
                    readonly type: "string";
                    readonly format: "cid";
                    readonly description: "Current repo commit CID";
                };
                readonly rev: {
                    readonly type: "string";
                };
                readonly active: {
                    readonly type: "boolean";
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "If active=false, this optional field indicates a possible reason for why the account is not active. If active=false and no status is supplied, then the host makes no claim for why the repository is no longer being hosted.";
                    readonly knownValues: ["takendown", "suspended", "deactivated"];
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.sync.notifyOfUpdate";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Notify a crawling service of a recent update, and that crawling should resume. Intended use is after a gap between repo stream events caused the crawling service to disconnect. Does not require auth; implemented by Relay.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["hostname"];
                    readonly properties: {
                        readonly hostname: {
                            readonly type: "string";
                            readonly description: "Hostname of the current service (usually a PDS) that is notifying of update.";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.sync.requestCrawl";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Request a service to persistently crawl hosted repos. Expected use is new PDS instances declaring their existence to Relays. Does not require auth.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["hostname"];
                    readonly properties: {
                        readonly hostname: {
                            readonly type: "string";
                            readonly description: "Hostname of the current service (eg, PDS) that is requesting to be crawled.";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.sync.subscribeRepos";
    readonly defs: {
        readonly main: {
            readonly type: "subscription";
            readonly description: "Repository event stream, aka Firehose endpoint. Outputs repo commits with diff data, and identity update events, for all repositories on the current server. See the atproto specifications for details around stream sequencing, repo versioning, CAR diff format, and more. Public and does not require auth; implemented by PDS and Relay.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly cursor: {
                        readonly type: "integer";
                        readonly description: "The last known event seq number to backfill from.";
                    };
                };
            };
            readonly message: {
                readonly schema: {
                    readonly type: "union";
                    readonly refs: ["lex:com.atproto.sync.subscribeRepos#commit", "lex:com.atproto.sync.subscribeRepos#identity", "lex:com.atproto.sync.subscribeRepos#account", "lex:com.atproto.sync.subscribeRepos#handle", "lex:com.atproto.sync.subscribeRepos#migrate", "lex:com.atproto.sync.subscribeRepos#tombstone", "lex:com.atproto.sync.subscribeRepos#info"];
                };
            };
            readonly errors: [{
                readonly name: "FutureCursor";
            }, {
                readonly name: "ConsumerTooSlow";
                readonly description: "If the consumer of the stream can not keep up with events, and a backlog gets too large, the server will drop the connection.";
            }];
        };
        readonly commit: {
            readonly type: "object";
            readonly description: "Represents an update of repository state. Note that empty commits are allowed, which include no repo data changes, but an update to rev and signature.";
            readonly required: ["seq", "rebase", "tooBig", "repo", "commit", "rev", "since", "blocks", "ops", "blobs", "time"];
            readonly nullable: ["prev", "since"];
            readonly properties: {
                readonly seq: {
                    readonly type: "integer";
                    readonly description: "The stream sequence number of this message.";
                };
                readonly rebase: {
                    readonly type: "boolean";
                    readonly description: "DEPRECATED -- unused";
                };
                readonly tooBig: {
                    readonly type: "boolean";
                    readonly description: "Indicates that this commit contained too many ops, or data size was too large. Consumers will need to make a separate request to get missing data.";
                };
                readonly repo: {
                    readonly type: "string";
                    readonly format: "did";
                    readonly description: "The repo this event comes from.";
                };
                readonly commit: {
                    readonly type: "cid-link";
                    readonly description: "Repo commit object CID.";
                };
                readonly prev: {
                    readonly type: "cid-link";
                    readonly description: "DEPRECATED -- unused. WARNING -- nullable and optional; stick with optional to ensure golang interoperability.";
                };
                readonly rev: {
                    readonly type: "string";
                    readonly description: "The rev of the emitted commit. Note that this information is also in the commit object included in blocks, unless this is a tooBig event.";
                };
                readonly since: {
                    readonly type: "string";
                    readonly description: "The rev of the last emitted commit from this repo (if any).";
                };
                readonly blocks: {
                    readonly type: "bytes";
                    readonly description: "CAR file containing relevant blocks, as a diff since the previous repo state.";
                    readonly maxLength: 1000000;
                };
                readonly ops: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.sync.subscribeRepos#repoOp";
                        readonly description: "List of repo mutation operations in this commit (eg, records created, updated, or deleted).";
                    };
                    readonly maxLength: 200;
                };
                readonly blobs: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "cid-link";
                        readonly description: "List of new blobs (by CID) referenced by records in this commit.";
                    };
                };
                readonly time: {
                    readonly type: "string";
                    readonly format: "datetime";
                    readonly description: "Timestamp of when this message was originally broadcast.";
                };
            };
        };
        readonly identity: {
            readonly type: "object";
            readonly description: "Represents a change to an account's identity. Could be an updated handle, signing key, or pds hosting endpoint. Serves as a prod to all downstream services to refresh their identity cache.";
            readonly required: ["seq", "did", "time"];
            readonly properties: {
                readonly seq: {
                    readonly type: "integer";
                };
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly time: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly handle: {
                    readonly type: "string";
                    readonly format: "handle";
                    readonly description: "The current handle for the account, or 'handle.invalid' if validation fails. This field is optional, might have been validated or passed-through from an upstream source. Semantics and behaviors for PDS vs Relay may evolve in the future; see atproto specs for more details.";
                };
            };
        };
        readonly account: {
            readonly type: "object";
            readonly description: "Represents a change to an account's status on a host (eg, PDS or Relay). The semantics of this event are that the status is at the host which emitted the event, not necessarily that at the currently active PDS. Eg, a Relay takedown would emit a takedown with active=false, even if the PDS is still active.";
            readonly required: ["seq", "did", "time", "active"];
            readonly properties: {
                readonly seq: {
                    readonly type: "integer";
                };
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly time: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "Indicates that the account has a repository which can be fetched from the host that emitted this event.";
                };
                readonly status: {
                    readonly type: "string";
                    readonly description: "If active=false, this optional field indicates a reason for why the account is not active.";
                    readonly knownValues: ["takendown", "suspended", "deleted", "deactivated"];
                };
            };
        };
        readonly handle: {
            readonly type: "object";
            readonly description: "DEPRECATED -- Use #identity event instead";
            readonly required: ["seq", "did", "handle", "time"];
            readonly properties: {
                readonly seq: {
                    readonly type: "integer";
                };
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly handle: {
                    readonly type: "string";
                    readonly format: "handle";
                };
                readonly time: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
        readonly migrate: {
            readonly type: "object";
            readonly description: "DEPRECATED -- Use #account event instead";
            readonly required: ["seq", "did", "migrateTo", "time"];
            readonly nullable: ["migrateTo"];
            readonly properties: {
                readonly seq: {
                    readonly type: "integer";
                };
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly migrateTo: {
                    readonly type: "string";
                };
                readonly time: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
        readonly tombstone: {
            readonly type: "object";
            readonly description: "DEPRECATED -- Use #account event instead";
            readonly required: ["seq", "did", "time"];
            readonly properties: {
                readonly seq: {
                    readonly type: "integer";
                };
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly time: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
        readonly info: {
            readonly type: "object";
            readonly required: ["name"];
            readonly properties: {
                readonly name: {
                    readonly type: "string";
                    readonly knownValues: ["OutdatedCursor"];
                };
                readonly message: {
                    readonly type: "string";
                };
            };
        };
        readonly repoOp: {
            readonly type: "object";
            readonly description: "A repo operation, ie a mutation of a single record.";
            readonly required: ["action", "path", "cid"];
            readonly nullable: ["cid"];
            readonly properties: {
                readonly action: {
                    readonly type: "string";
                    readonly knownValues: ["create", "update", "delete"];
                };
                readonly path: {
                    readonly type: "string";
                };
                readonly cid: {
                    readonly type: "cid-link";
                    readonly description: "For creates and updates, the new record CID. For deletions, null.";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.temp.addReservedHandle";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Add a handle to the set of reserved handles.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["handle"];
                    readonly properties: {
                        readonly handle: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly properties: {};
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.temp.checkSignupQueue";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Check accounts location in signup queue.";
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["activated"];
                    readonly properties: {
                        readonly activated: {
                            readonly type: "boolean";
                        };
                        readonly placeInQueue: {
                            readonly type: "integer";
                        };
                        readonly estimatedTimeMs: {
                            readonly type: "integer";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.temp.fetchLabels";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "DEPRECATED: use queryLabels or subscribeLabels instead -- Fetch all labels from a labeler created after a certain date.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly since: {
                        readonly type: "integer";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 250;
                        readonly default: 50;
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["labels"];
                    readonly properties: {
                        readonly labels: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.label.defs#label";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "com.atproto.temp.requestPhoneVerification";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Request a verification code to be sent to the supplied phone number";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["phoneNumber"];
                    readonly properties: {
                        readonly phoneNumber: {
                            readonly type: "string";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.actor.defs";
    readonly defs: {
        readonly profileViewBasic: {
            readonly type: "object";
            readonly required: ["did", "handle"];
            readonly properties: {
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly handle: {
                    readonly type: "string";
                    readonly format: "handle";
                };
                readonly displayName: {
                    readonly type: "string";
                    readonly maxGraphemes: 64;
                    readonly maxLength: 640;
                };
                readonly avatar: {
                    readonly type: "string";
                    readonly format: "uri";
                };
                readonly associated: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#profileAssociated";
                };
                readonly viewer: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#viewerState";
                };
                readonly labels: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#label";
                    };
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
        readonly profileView: {
            readonly type: "object";
            readonly required: ["did", "handle"];
            readonly properties: {
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly handle: {
                    readonly type: "string";
                    readonly format: "handle";
                };
                readonly displayName: {
                    readonly type: "string";
                    readonly maxGraphemes: 64;
                    readonly maxLength: 640;
                };
                readonly description: {
                    readonly type: "string";
                    readonly maxGraphemes: 256;
                    readonly maxLength: 2560;
                };
                readonly avatar: {
                    readonly type: "string";
                    readonly format: "uri";
                };
                readonly associated: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#profileAssociated";
                };
                readonly indexedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly viewer: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#viewerState";
                };
                readonly labels: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#label";
                    };
                };
            };
        };
        readonly profileViewDetailed: {
            readonly type: "object";
            readonly required: ["did", "handle"];
            readonly properties: {
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly handle: {
                    readonly type: "string";
                    readonly format: "handle";
                };
                readonly displayName: {
                    readonly type: "string";
                    readonly maxGraphemes: 64;
                    readonly maxLength: 640;
                };
                readonly description: {
                    readonly type: "string";
                    readonly maxGraphemes: 256;
                    readonly maxLength: 2560;
                };
                readonly avatar: {
                    readonly type: "string";
                    readonly format: "uri";
                };
                readonly banner: {
                    readonly type: "string";
                    readonly format: "uri";
                };
                readonly followersCount: {
                    readonly type: "integer";
                };
                readonly followsCount: {
                    readonly type: "integer";
                };
                readonly postsCount: {
                    readonly type: "integer";
                };
                readonly associated: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#profileAssociated";
                };
                readonly joinedViaStarterPack: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.graph.defs#starterPackViewBasic";
                };
                readonly indexedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly viewer: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#viewerState";
                };
                readonly labels: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#label";
                    };
                };
                readonly pinnedPost: {
                    readonly type: "ref";
                    readonly ref: "lex:com.atproto.repo.strongRef";
                };
            };
        };
        readonly profileAssociated: {
            readonly type: "object";
            readonly properties: {
                readonly lists: {
                    readonly type: "integer";
                };
                readonly feedgens: {
                    readonly type: "integer";
                };
                readonly starterPacks: {
                    readonly type: "integer";
                };
                readonly labeler: {
                    readonly type: "boolean";
                };
                readonly chat: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#profileAssociatedChat";
                };
            };
        };
        readonly profileAssociatedChat: {
            readonly type: "object";
            readonly required: ["allowIncoming"];
            readonly properties: {
                readonly allowIncoming: {
                    readonly type: "string";
                    readonly knownValues: ["all", "none", "following"];
                };
            };
        };
        readonly viewerState: {
            readonly type: "object";
            readonly description: "Metadata about the requesting account's relationship with the subject account. Only has meaningful content for authed requests.";
            readonly properties: {
                readonly muted: {
                    readonly type: "boolean";
                };
                readonly mutedByList: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.graph.defs#listViewBasic";
                };
                readonly blockedBy: {
                    readonly type: "boolean";
                };
                readonly blocking: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly blockingByList: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.graph.defs#listViewBasic";
                };
                readonly following: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly followedBy: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly knownFollowers: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#knownFollowers";
                };
            };
        };
        readonly knownFollowers: {
            readonly type: "object";
            readonly description: "The subject's followers whom you also follow";
            readonly required: ["count", "followers"];
            readonly properties: {
                readonly count: {
                    readonly type: "integer";
                };
                readonly followers: {
                    readonly type: "array";
                    readonly minLength: 0;
                    readonly maxLength: 5;
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#profileViewBasic";
                    };
                };
            };
        };
        readonly preferences: {
            readonly type: "array";
            readonly items: {
                readonly type: "union";
                readonly refs: ["lex:app.bsky.actor.defs#adultContentPref", "lex:app.bsky.actor.defs#contentLabelPref", "lex:app.bsky.actor.defs#savedFeedsPref", "lex:app.bsky.actor.defs#savedFeedsPrefV2", "lex:app.bsky.actor.defs#personalDetailsPref", "lex:app.bsky.actor.defs#feedViewPref", "lex:app.bsky.actor.defs#threadViewPref", "lex:app.bsky.actor.defs#interestsPref", "lex:app.bsky.actor.defs#mutedWordsPref", "lex:app.bsky.actor.defs#hiddenPostsPref", "lex:app.bsky.actor.defs#bskyAppStatePref", "lex:app.bsky.actor.defs#labelersPref", "lex:app.bsky.actor.defs#postInteractionSettingsPref"];
            };
        };
        readonly adultContentPref: {
            readonly type: "object";
            readonly required: ["enabled"];
            readonly properties: {
                readonly enabled: {
                    readonly type: "boolean";
                    readonly default: false;
                };
            };
        };
        readonly contentLabelPref: {
            readonly type: "object";
            readonly required: ["label", "visibility"];
            readonly properties: {
                readonly labelerDid: {
                    readonly type: "string";
                    readonly description: "Which labeler does this preference apply to? If undefined, applies globally.";
                    readonly format: "did";
                };
                readonly label: {
                    readonly type: "string";
                };
                readonly visibility: {
                    readonly type: "string";
                    readonly knownValues: ["ignore", "show", "warn", "hide"];
                };
            };
        };
        readonly savedFeed: {
            readonly type: "object";
            readonly required: ["id", "type", "value", "pinned"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly type: {
                    readonly type: "string";
                    readonly knownValues: ["feed", "list", "timeline"];
                };
                readonly value: {
                    readonly type: "string";
                };
                readonly pinned: {
                    readonly type: "boolean";
                };
            };
        };
        readonly savedFeedsPrefV2: {
            readonly type: "object";
            readonly required: ["items"];
            readonly properties: {
                readonly items: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#savedFeed";
                    };
                };
            };
        };
        readonly savedFeedsPref: {
            readonly type: "object";
            readonly required: ["pinned", "saved"];
            readonly properties: {
                readonly pinned: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                };
                readonly saved: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                };
                readonly timelineIndex: {
                    readonly type: "integer";
                };
            };
        };
        readonly personalDetailsPref: {
            readonly type: "object";
            readonly properties: {
                readonly birthDate: {
                    readonly type: "string";
                    readonly format: "datetime";
                    readonly description: "The birth date of account owner.";
                };
            };
        };
        readonly feedViewPref: {
            readonly type: "object";
            readonly required: ["feed"];
            readonly properties: {
                readonly feed: {
                    readonly type: "string";
                    readonly description: "The URI of the feed, or an identifier which describes the feed.";
                };
                readonly hideReplies: {
                    readonly type: "boolean";
                    readonly description: "Hide replies in the feed.";
                };
                readonly hideRepliesByUnfollowed: {
                    readonly type: "boolean";
                    readonly description: "Hide replies in the feed if they are not by followed users.";
                    readonly default: true;
                };
                readonly hideRepliesByLikeCount: {
                    readonly type: "integer";
                    readonly description: "Hide replies in the feed if they do not have this number of likes.";
                };
                readonly hideReposts: {
                    readonly type: "boolean";
                    readonly description: "Hide reposts in the feed.";
                };
                readonly hideQuotePosts: {
                    readonly type: "boolean";
                    readonly description: "Hide quote posts in the feed.";
                };
            };
        };
        readonly threadViewPref: {
            readonly type: "object";
            readonly properties: {
                readonly sort: {
                    readonly type: "string";
                    readonly description: "Sorting mode for threads.";
                    readonly knownValues: ["oldest", "newest", "most-likes", "random", "hotness"];
                };
                readonly prioritizeFollowedUsers: {
                    readonly type: "boolean";
                    readonly description: "Show followed users at the top of all replies.";
                };
            };
        };
        readonly interestsPref: {
            readonly type: "object";
            readonly required: ["tags"];
            readonly properties: {
                readonly tags: {
                    readonly type: "array";
                    readonly maxLength: 100;
                    readonly items: {
                        readonly type: "string";
                        readonly maxLength: 640;
                        readonly maxGraphemes: 64;
                    };
                    readonly description: "A list of tags which describe the account owner's interests gathered during onboarding.";
                };
            };
        };
        readonly mutedWordTarget: {
            readonly type: "string";
            readonly knownValues: ["content", "tag"];
            readonly maxLength: 640;
            readonly maxGraphemes: 64;
        };
        readonly mutedWord: {
            readonly type: "object";
            readonly description: "A word that the account owner has muted.";
            readonly required: ["value", "targets"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly value: {
                    readonly type: "string";
                    readonly description: "The muted word itself.";
                    readonly maxLength: 10000;
                    readonly maxGraphemes: 1000;
                };
                readonly targets: {
                    readonly type: "array";
                    readonly description: "The intended targets of the muted word.";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#mutedWordTarget";
                    };
                };
                readonly actorTarget: {
                    readonly type: "string";
                    readonly description: "Groups of users to apply the muted word to. If undefined, applies to all users.";
                    readonly knownValues: ["all", "exclude-following"];
                    readonly default: "all";
                };
                readonly expiresAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                    readonly description: "The date and time at which the muted word will expire and no longer be applied.";
                };
            };
        };
        readonly mutedWordsPref: {
            readonly type: "object";
            readonly required: ["items"];
            readonly properties: {
                readonly items: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#mutedWord";
                    };
                    readonly description: "A list of words the account owner has muted.";
                };
            };
        };
        readonly hiddenPostsPref: {
            readonly type: "object";
            readonly required: ["items"];
            readonly properties: {
                readonly items: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly description: "A list of URIs of posts the account owner has hidden.";
                };
            };
        };
        readonly labelersPref: {
            readonly type: "object";
            readonly required: ["labelers"];
            readonly properties: {
                readonly labelers: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#labelerPrefItem";
                    };
                };
            };
        };
        readonly labelerPrefItem: {
            readonly type: "object";
            readonly required: ["did"];
            readonly properties: {
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
            };
        };
        readonly bskyAppStatePref: {
            readonly description: "A grab bag of state that's specific to the bsky.app program. Third-party apps shouldn't use this.";
            readonly type: "object";
            readonly properties: {
                readonly activeProgressGuide: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#bskyAppProgressGuide";
                };
                readonly queuedNudges: {
                    readonly description: "An array of tokens which identify nudges (modals, popups, tours, highlight dots) that should be shown to the user.";
                    readonly type: "array";
                    readonly maxLength: 1000;
                    readonly items: {
                        readonly type: "string";
                        readonly maxLength: 100;
                    };
                };
                readonly nuxs: {
                    readonly description: "Storage for NUXs the user has encountered.";
                    readonly type: "array";
                    readonly maxLength: 100;
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.actor.defs#nux";
                    };
                };
            };
        };
        readonly bskyAppProgressGuide: {
            readonly description: "If set, an active progress guide. Once completed, can be set to undefined. Should have unspecced fields tracking progress.";
            readonly type: "object";
            readonly required: ["guide"];
            readonly properties: {
                readonly guide: {
                    readonly type: "string";
                    readonly maxLength: 100;
                };
            };
        };
        readonly nux: {
            readonly type: "object";
            readonly description: "A new user experiences (NUX) storage object";
            readonly required: ["id", "completed"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                    readonly maxLength: 100;
                };
                readonly completed: {
                    readonly type: "boolean";
                    readonly default: false;
                };
                readonly data: {
                    readonly description: "Arbitrary data for the NUX. The structure is defined by the NUX itself. Limited to 300 characters.";
                    readonly type: "string";
                    readonly maxLength: 3000;
                    readonly maxGraphemes: 300;
                };
                readonly expiresAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                    readonly description: "The date and time at which the NUX will expire and should be considered completed.";
                };
            };
        };
        readonly postInteractionSettingsPref: {
            readonly type: "object";
            readonly description: "Default post interaction settings for the account. These values should be applied as default values when creating new posts. These refs should mirror the threadgate and postgate records exactly.";
            readonly required: [];
            readonly properties: {
                readonly threadgateAllowRules: {
                    readonly description: "Matches threadgate record. List of rules defining who can reply to this users posts. If value is an empty array, no one can reply. If value is undefined, anyone can reply.";
                    readonly type: "array";
                    readonly maxLength: 5;
                    readonly items: {
                        readonly type: "union";
                        readonly refs: ["lex:app.bsky.feed.threadgate#mentionRule", "lex:app.bsky.feed.threadgate#followerRule", "lex:app.bsky.feed.threadgate#followingRule", "lex:app.bsky.feed.threadgate#listRule"];
                    };
                };
                readonly postgateEmbeddingRules: {
                    readonly description: "Matches postgate record. List of rules defining who can embed this users posts. If value is an empty array or is undefined, no particular rules apply and anyone can embed.";
                    readonly type: "array";
                    readonly maxLength: 5;
                    readonly items: {
                        readonly type: "union";
                        readonly refs: ["lex:app.bsky.feed.postgate#disableRule"];
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.actor.getPreferences";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get private preferences attached to the current account. Expected use is synchronization between multiple devices, and import/export during account migration. Requires auth.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {};
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["preferences"];
                    readonly properties: {
                        readonly preferences: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.actor.defs#preferences";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.actor.getProfile";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get detailed profile view of an actor. Does not require auth, but contains relevant metadata with auth.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["actor"];
                readonly properties: {
                    readonly actor: {
                        readonly type: "string";
                        readonly format: "at-identifier";
                        readonly description: "Handle or DID of account to fetch profile of.";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#profileViewDetailed";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.actor.getProfiles";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get detailed profile views of multiple actors.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["actors"];
                readonly properties: {
                    readonly actors: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                        };
                        readonly maxLength: 25;
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["profiles"];
                    readonly properties: {
                        readonly profiles: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.actor.defs#profileViewDetailed";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.actor.getSuggestions";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get a list of suggested actors. Expected use is discovery of accounts to follow during new account onboarding.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["actors"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly actors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.actor.defs#profileView";
                            };
                        };
                        readonly recId: {
                            readonly type: "integer";
                            readonly description: "Snowflake for this recommendation, use when submitting recommendation events.";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.actor.profile";
    readonly defs: {
        readonly main: {
            readonly type: "record";
            readonly description: "A declaration of a Bluesky account profile.";
            readonly key: "literal:self";
            readonly record: {
                readonly type: "object";
                readonly properties: {
                    readonly displayName: {
                        readonly type: "string";
                        readonly maxGraphemes: 64;
                        readonly maxLength: 640;
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly description: "Free-form profile description text.";
                        readonly maxGraphemes: 256;
                        readonly maxLength: 2560;
                    };
                    readonly avatar: {
                        readonly type: "blob";
                        readonly description: "Small image to be displayed next to posts from account. AKA, 'profile picture'";
                        readonly accept: ["image/png", "image/jpeg"];
                        readonly maxSize: 1000000;
                    };
                    readonly banner: {
                        readonly type: "blob";
                        readonly description: "Larger horizontal image to display behind profile view.";
                        readonly accept: ["image/png", "image/jpeg"];
                        readonly maxSize: 1000000;
                    };
                    readonly labels: {
                        readonly type: "union";
                        readonly description: "Self-label values, specific to the Bluesky application, on the overall account.";
                        readonly refs: ["lex:com.atproto.label.defs#selfLabels"];
                    };
                    readonly joinedViaStarterPack: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.repo.strongRef";
                    };
                    readonly pinnedPost: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.repo.strongRef";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.actor.putPreferences";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Set the private preferences attached to the account.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["preferences"];
                    readonly properties: {
                        readonly preferences: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.actor.defs#preferences";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.actor.searchActors";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Find actors (profiles) matching search criteria. Does not require auth.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly term: {
                        readonly type: "string";
                        readonly description: "DEPRECATED: use 'q' instead.";
                    };
                    readonly q: {
                        readonly type: "string";
                        readonly description: "Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 25;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["actors"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly actors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.actor.defs#profileView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.actor.searchActorsTypeahead";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Find actor suggestions for a prefix search term. Expected use is for auto-completion during text field entry. Does not require auth.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly term: {
                        readonly type: "string";
                        readonly description: "DEPRECATED: use 'q' instead.";
                    };
                    readonly q: {
                        readonly type: "string";
                        readonly description: "Search query prefix; not a full query string.";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 10;
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["actors"];
                    readonly properties: {
                        readonly actors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.actor.defs#profileViewBasic";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.embed.defs";
    readonly defs: {
        readonly aspectRatio: {
            readonly type: "object";
            readonly description: "width:height represents an aspect ratio. It may be approximate, and may not correspond to absolute dimensions in any given unit.";
            readonly required: ["width", "height"];
            readonly properties: {
                readonly width: {
                    readonly type: "integer";
                    readonly minimum: 1;
                };
                readonly height: {
                    readonly type: "integer";
                    readonly minimum: 1;
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.embed.external";
    readonly defs: {
        readonly main: {
            readonly type: "object";
            readonly description: "A representation of some externally linked content (eg, a URL and 'card'), embedded in a Bluesky record (eg, a post).";
            readonly required: ["external"];
            readonly properties: {
                readonly external: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.embed.external#external";
                };
            };
        };
        readonly external: {
            readonly type: "object";
            readonly required: ["uri", "title", "description"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "uri";
                };
                readonly title: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly thumb: {
                    readonly type: "blob";
                    readonly accept: ["image/*"];
                    readonly maxSize: 1000000;
                };
            };
        };
        readonly view: {
            readonly type: "object";
            readonly required: ["external"];
            readonly properties: {
                readonly external: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.embed.external#viewExternal";
                };
            };
        };
        readonly viewExternal: {
            readonly type: "object";
            readonly required: ["uri", "title", "description"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "uri";
                };
                readonly title: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly thumb: {
                    readonly type: "string";
                    readonly format: "uri";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.embed.images";
    readonly description: "A set of images embedded in a Bluesky record (eg, a post).";
    readonly defs: {
        readonly main: {
            readonly type: "object";
            readonly required: ["images"];
            readonly properties: {
                readonly images: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.embed.images#image";
                    };
                    readonly maxLength: 4;
                };
            };
        };
        readonly image: {
            readonly type: "object";
            readonly required: ["image", "alt"];
            readonly properties: {
                readonly image: {
                    readonly type: "blob";
                    readonly accept: ["image/*"];
                    readonly maxSize: 1000000;
                };
                readonly alt: {
                    readonly type: "string";
                    readonly description: "Alt text description of the image, for accessibility.";
                };
                readonly aspectRatio: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.embed.defs#aspectRatio";
                };
            };
        };
        readonly view: {
            readonly type: "object";
            readonly required: ["images"];
            readonly properties: {
                readonly images: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.embed.images#viewImage";
                    };
                    readonly maxLength: 4;
                };
            };
        };
        readonly viewImage: {
            readonly type: "object";
            readonly required: ["thumb", "fullsize", "alt"];
            readonly properties: {
                readonly thumb: {
                    readonly type: "string";
                    readonly format: "uri";
                    readonly description: "Fully-qualified URL where a thumbnail of the image can be fetched. For example, CDN location provided by the App View.";
                };
                readonly fullsize: {
                    readonly type: "string";
                    readonly format: "uri";
                    readonly description: "Fully-qualified URL where a large version of the image can be fetched. May or may not be the exact original blob. For example, CDN location provided by the App View.";
                };
                readonly alt: {
                    readonly type: "string";
                    readonly description: "Alt text description of the image, for accessibility.";
                };
                readonly aspectRatio: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.embed.defs#aspectRatio";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.embed.record";
    readonly description: "A representation of a record embedded in a Bluesky record (eg, a post). For example, a quote-post, or sharing a feed generator record.";
    readonly defs: {
        readonly main: {
            readonly type: "object";
            readonly required: ["record"];
            readonly properties: {
                readonly record: {
                    readonly type: "ref";
                    readonly ref: "lex:com.atproto.repo.strongRef";
                };
            };
        };
        readonly view: {
            readonly type: "object";
            readonly required: ["record"];
            readonly properties: {
                readonly record: {
                    readonly type: "union";
                    readonly refs: ["lex:app.bsky.embed.record#viewRecord", "lex:app.bsky.embed.record#viewNotFound", "lex:app.bsky.embed.record#viewBlocked", "lex:app.bsky.embed.record#viewDetached", "lex:app.bsky.feed.defs#generatorView", "lex:app.bsky.graph.defs#listView", "lex:app.bsky.labeler.defs#labelerView", "lex:app.bsky.graph.defs#starterPackViewBasic"];
                };
            };
        };
        readonly viewRecord: {
            readonly type: "object";
            readonly required: ["uri", "cid", "author", "value", "indexedAt"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly author: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#profileViewBasic";
                };
                readonly value: {
                    readonly type: "unknown";
                    readonly description: "The record data itself.";
                };
                readonly labels: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#label";
                    };
                };
                readonly replyCount: {
                    readonly type: "integer";
                };
                readonly repostCount: {
                    readonly type: "integer";
                };
                readonly likeCount: {
                    readonly type: "integer";
                };
                readonly quoteCount: {
                    readonly type: "integer";
                };
                readonly embeds: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "union";
                        readonly refs: ["lex:app.bsky.embed.images#view", "lex:app.bsky.embed.video#view", "lex:app.bsky.embed.external#view", "lex:app.bsky.embed.record#view", "lex:app.bsky.embed.recordWithMedia#view"];
                    };
                };
                readonly indexedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
        readonly viewNotFound: {
            readonly type: "object";
            readonly required: ["uri", "notFound"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly notFound: {
                    readonly type: "boolean";
                    readonly const: true;
                };
            };
        };
        readonly viewBlocked: {
            readonly type: "object";
            readonly required: ["uri", "blocked", "author"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly blocked: {
                    readonly type: "boolean";
                    readonly const: true;
                };
                readonly author: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.feed.defs#blockedAuthor";
                };
            };
        };
        readonly viewDetached: {
            readonly type: "object";
            readonly required: ["uri", "detached"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly detached: {
                    readonly type: "boolean";
                    readonly const: true;
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.embed.recordWithMedia";
    readonly description: "A representation of a record embedded in a Bluesky record (eg, a post), alongside other compatible embeds. For example, a quote post and image, or a quote post and external URL card.";
    readonly defs: {
        readonly main: {
            readonly type: "object";
            readonly required: ["record", "media"];
            readonly properties: {
                readonly record: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.embed.record";
                };
                readonly media: {
                    readonly type: "union";
                    readonly refs: ["lex:app.bsky.embed.images", "lex:app.bsky.embed.video", "lex:app.bsky.embed.external"];
                };
            };
        };
        readonly view: {
            readonly type: "object";
            readonly required: ["record", "media"];
            readonly properties: {
                readonly record: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.embed.record#view";
                };
                readonly media: {
                    readonly type: "union";
                    readonly refs: ["lex:app.bsky.embed.images#view", "lex:app.bsky.embed.video#view", "lex:app.bsky.embed.external#view"];
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.embed.video";
    readonly description: "A video embedded in a Bluesky record (eg, a post).";
    readonly defs: {
        readonly main: {
            readonly type: "object";
            readonly required: ["video"];
            readonly properties: {
                readonly video: {
                    readonly type: "blob";
                    readonly accept: ["video/mp4"];
                    readonly maxSize: 50000000;
                };
                readonly captions: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.embed.video#caption";
                    };
                    readonly maxLength: 20;
                };
                readonly alt: {
                    readonly type: "string";
                    readonly description: "Alt text description of the video, for accessibility.";
                    readonly maxGraphemes: 1000;
                    readonly maxLength: 10000;
                };
                readonly aspectRatio: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.embed.defs#aspectRatio";
                };
            };
        };
        readonly caption: {
            readonly type: "object";
            readonly required: ["lang", "file"];
            readonly properties: {
                readonly lang: {
                    readonly type: "string";
                    readonly format: "language";
                };
                readonly file: {
                    readonly type: "blob";
                    readonly accept: ["text/vtt"];
                    readonly maxSize: 20000;
                };
            };
        };
        readonly view: {
            readonly type: "object";
            readonly required: ["cid", "playlist"];
            readonly properties: {
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly playlist: {
                    readonly type: "string";
                    readonly format: "uri";
                };
                readonly thumbnail: {
                    readonly type: "string";
                    readonly format: "uri";
                };
                readonly alt: {
                    readonly type: "string";
                    readonly maxGraphemes: 1000;
                    readonly maxLength: 10000;
                };
                readonly aspectRatio: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.embed.defs#aspectRatio";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.defs";
    readonly defs: {
        readonly postView: {
            readonly type: "object";
            readonly required: ["uri", "cid", "author", "record", "indexedAt"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly author: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#profileViewBasic";
                };
                readonly record: {
                    readonly type: "unknown";
                };
                readonly embed: {
                    readonly type: "union";
                    readonly refs: ["lex:app.bsky.embed.images#view", "lex:app.bsky.embed.video#view", "lex:app.bsky.embed.external#view", "lex:app.bsky.embed.record#view", "lex:app.bsky.embed.recordWithMedia#view"];
                };
                readonly replyCount: {
                    readonly type: "integer";
                };
                readonly repostCount: {
                    readonly type: "integer";
                };
                readonly likeCount: {
                    readonly type: "integer";
                };
                readonly quoteCount: {
                    readonly type: "integer";
                };
                readonly indexedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly viewer: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.feed.defs#viewerState";
                };
                readonly labels: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#label";
                    };
                };
                readonly threadgate: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.feed.defs#threadgateView";
                };
            };
        };
        readonly viewerState: {
            readonly type: "object";
            readonly description: "Metadata about the requesting account's relationship with the subject content. Only has meaningful content for authed requests.";
            readonly properties: {
                readonly repost: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly like: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly threadMuted: {
                    readonly type: "boolean";
                };
                readonly replyDisabled: {
                    readonly type: "boolean";
                };
                readonly embeddingDisabled: {
                    readonly type: "boolean";
                };
                readonly pinned: {
                    readonly type: "boolean";
                };
            };
        };
        readonly threadContext: {
            readonly type: "object";
            readonly description: "Metadata about this post within the context of the thread it is in.";
            readonly properties: {
                readonly rootAuthorLike: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
            };
        };
        readonly feedViewPost: {
            readonly type: "object";
            readonly required: ["post"];
            readonly properties: {
                readonly post: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.feed.defs#postView";
                };
                readonly reply: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.feed.defs#replyRef";
                };
                readonly reason: {
                    readonly type: "union";
                    readonly refs: ["lex:app.bsky.feed.defs#reasonRepost", "lex:app.bsky.feed.defs#reasonPin"];
                };
                readonly feedContext: {
                    readonly type: "string";
                    readonly description: "Context provided by feed generator that may be passed back alongside interactions.";
                    readonly maxLength: 2000;
                };
            };
        };
        readonly replyRef: {
            readonly type: "object";
            readonly required: ["root", "parent"];
            readonly properties: {
                readonly root: {
                    readonly type: "union";
                    readonly refs: ["lex:app.bsky.feed.defs#postView", "lex:app.bsky.feed.defs#notFoundPost", "lex:app.bsky.feed.defs#blockedPost"];
                };
                readonly parent: {
                    readonly type: "union";
                    readonly refs: ["lex:app.bsky.feed.defs#postView", "lex:app.bsky.feed.defs#notFoundPost", "lex:app.bsky.feed.defs#blockedPost"];
                };
                readonly grandparentAuthor: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#profileViewBasic";
                    readonly description: "When parent is a reply to another post, this is the author of that post.";
                };
            };
        };
        readonly reasonRepost: {
            readonly type: "object";
            readonly required: ["by", "indexedAt"];
            readonly properties: {
                readonly by: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#profileViewBasic";
                };
                readonly indexedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
        readonly reasonPin: {
            readonly type: "object";
            readonly properties: {};
        };
        readonly threadViewPost: {
            readonly type: "object";
            readonly required: ["post"];
            readonly properties: {
                readonly post: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.feed.defs#postView";
                };
                readonly parent: {
                    readonly type: "union";
                    readonly refs: ["lex:app.bsky.feed.defs#threadViewPost", "lex:app.bsky.feed.defs#notFoundPost", "lex:app.bsky.feed.defs#blockedPost"];
                };
                readonly replies: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "union";
                        readonly refs: ["lex:app.bsky.feed.defs#threadViewPost", "lex:app.bsky.feed.defs#notFoundPost", "lex:app.bsky.feed.defs#blockedPost"];
                    };
                };
                readonly threadContext: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.feed.defs#threadContext";
                };
            };
        };
        readonly notFoundPost: {
            readonly type: "object";
            readonly required: ["uri", "notFound"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly notFound: {
                    readonly type: "boolean";
                    readonly const: true;
                };
            };
        };
        readonly blockedPost: {
            readonly type: "object";
            readonly required: ["uri", "blocked", "author"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly blocked: {
                    readonly type: "boolean";
                    readonly const: true;
                };
                readonly author: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.feed.defs#blockedAuthor";
                };
            };
        };
        readonly blockedAuthor: {
            readonly type: "object";
            readonly required: ["did"];
            readonly properties: {
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly viewer: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#viewerState";
                };
            };
        };
        readonly generatorView: {
            readonly type: "object";
            readonly required: ["uri", "cid", "did", "creator", "displayName", "indexedAt"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly creator: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#profileView";
                };
                readonly displayName: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                    readonly maxGraphemes: 300;
                    readonly maxLength: 3000;
                };
                readonly descriptionFacets: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.richtext.facet";
                    };
                };
                readonly avatar: {
                    readonly type: "string";
                    readonly format: "uri";
                };
                readonly likeCount: {
                    readonly type: "integer";
                    readonly minimum: 0;
                };
                readonly acceptsInteractions: {
                    readonly type: "boolean";
                };
                readonly labels: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#label";
                    };
                };
                readonly viewer: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.feed.defs#generatorViewerState";
                };
                readonly contentMode: {
                    readonly type: "string";
                    readonly knownValues: ["app.bsky.feed.defs#contentModeUnspecified", "app.bsky.feed.defs#contentModeVideo"];
                };
                readonly indexedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
        readonly generatorViewerState: {
            readonly type: "object";
            readonly properties: {
                readonly like: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
            };
        };
        readonly skeletonFeedPost: {
            readonly type: "object";
            readonly required: ["post"];
            readonly properties: {
                readonly post: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly reason: {
                    readonly type: "union";
                    readonly refs: ["lex:app.bsky.feed.defs#skeletonReasonRepost", "lex:app.bsky.feed.defs#skeletonReasonPin"];
                };
                readonly feedContext: {
                    readonly type: "string";
                    readonly description: "Context that will be passed through to client and may be passed to feed generator back alongside interactions.";
                    readonly maxLength: 2000;
                };
            };
        };
        readonly skeletonReasonRepost: {
            readonly type: "object";
            readonly required: ["repost"];
            readonly properties: {
                readonly repost: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
            };
        };
        readonly skeletonReasonPin: {
            readonly type: "object";
            readonly properties: {};
        };
        readonly threadgateView: {
            readonly type: "object";
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly record: {
                    readonly type: "unknown";
                };
                readonly lists: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.graph.defs#listViewBasic";
                    };
                };
            };
        };
        readonly interaction: {
            readonly type: "object";
            readonly properties: {
                readonly item: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly event: {
                    readonly type: "string";
                    readonly knownValues: ["app.bsky.feed.defs#requestLess", "app.bsky.feed.defs#requestMore", "app.bsky.feed.defs#clickthroughItem", "app.bsky.feed.defs#clickthroughAuthor", "app.bsky.feed.defs#clickthroughReposter", "app.bsky.feed.defs#clickthroughEmbed", "app.bsky.feed.defs#interactionSeen", "app.bsky.feed.defs#interactionLike", "app.bsky.feed.defs#interactionRepost", "app.bsky.feed.defs#interactionReply", "app.bsky.feed.defs#interactionQuote", "app.bsky.feed.defs#interactionShare"];
                };
                readonly feedContext: {
                    readonly type: "string";
                    readonly description: "Context on a feed item that was originally supplied by the feed generator on getFeedSkeleton.";
                    readonly maxLength: 2000;
                };
            };
        };
        readonly requestLess: {
            readonly type: "token";
            readonly description: "Request that less content like the given feed item be shown in the feed";
        };
        readonly requestMore: {
            readonly type: "token";
            readonly description: "Request that more content like the given feed item be shown in the feed";
        };
        readonly clickthroughItem: {
            readonly type: "token";
            readonly description: "User clicked through to the feed item";
        };
        readonly clickthroughAuthor: {
            readonly type: "token";
            readonly description: "User clicked through to the author of the feed item";
        };
        readonly clickthroughReposter: {
            readonly type: "token";
            readonly description: "User clicked through to the reposter of the feed item";
        };
        readonly clickthroughEmbed: {
            readonly type: "token";
            readonly description: "User clicked through to the embedded content of the feed item";
        };
        readonly contentModeUnspecified: {
            readonly type: "token";
            readonly description: "Declares the feed generator returns any types of posts.";
        };
        readonly contentModeVideo: {
            readonly type: "token";
            readonly description: "Declares the feed generator returns posts containing app.bsky.embed.video embeds.";
        };
        readonly interactionSeen: {
            readonly type: "token";
            readonly description: "Feed item was seen by user";
        };
        readonly interactionLike: {
            readonly type: "token";
            readonly description: "User liked the feed item";
        };
        readonly interactionRepost: {
            readonly type: "token";
            readonly description: "User reposted the feed item";
        };
        readonly interactionReply: {
            readonly type: "token";
            readonly description: "User replied to the feed item";
        };
        readonly interactionQuote: {
            readonly type: "token";
            readonly description: "User quoted the feed item";
        };
        readonly interactionShare: {
            readonly type: "token";
            readonly description: "User shared the feed item";
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.describeFeedGenerator";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get information about a feed generator, including policies and offered feed URIs. Does not require auth; implemented by Feed Generator services (not App View).";
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["did", "feeds"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly feeds: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.feed.describeFeedGenerator#feed";
                            };
                        };
                        readonly links: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.feed.describeFeedGenerator#links";
                        };
                    };
                };
            };
        };
        readonly feed: {
            readonly type: "object";
            readonly required: ["uri"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
            };
        };
        readonly links: {
            readonly type: "object";
            readonly properties: {
                readonly privacyPolicy: {
                    readonly type: "string";
                };
                readonly termsOfService: {
                    readonly type: "string";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.generator";
    readonly defs: {
        readonly main: {
            readonly type: "record";
            readonly description: "Record declaring of the existence of a feed generator, and containing metadata about it. The record can exist in any repository.";
            readonly key: "any";
            readonly record: {
                readonly type: "object";
                readonly required: ["did", "displayName", "createdAt"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly displayName: {
                        readonly type: "string";
                        readonly maxGraphemes: 24;
                        readonly maxLength: 240;
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly maxGraphemes: 300;
                        readonly maxLength: 3000;
                    };
                    readonly descriptionFacets: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.richtext.facet";
                        };
                    };
                    readonly avatar: {
                        readonly type: "blob";
                        readonly accept: ["image/png", "image/jpeg"];
                        readonly maxSize: 1000000;
                    };
                    readonly acceptsInteractions: {
                        readonly type: "boolean";
                        readonly description: "Declaration that a feed accepts feedback interactions from a client through app.bsky.feed.sendInteractions";
                    };
                    readonly labels: {
                        readonly type: "union";
                        readonly description: "Self-label values";
                        readonly refs: ["lex:com.atproto.label.defs#selfLabels"];
                    };
                    readonly contentMode: {
                        readonly type: "string";
                        readonly knownValues: ["app.bsky.feed.defs#contentModeUnspecified", "app.bsky.feed.defs#contentModeVideo"];
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.getActorFeeds";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get a list of feeds (feed generator records) created by the actor (in the actor's repo).";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["actor"];
                readonly properties: {
                    readonly actor: {
                        readonly type: "string";
                        readonly format: "at-identifier";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["feeds"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly feeds: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.feed.defs#generatorView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.getActorLikes";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get a list of posts liked by an actor. Requires auth, actor must be the requesting account.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["actor"];
                readonly properties: {
                    readonly actor: {
                        readonly type: "string";
                        readonly format: "at-identifier";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["feed"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly feed: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.feed.defs#feedViewPost";
                            };
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "BlockedActor";
            }, {
                readonly name: "BlockedByActor";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.getAuthorFeed";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get a view of an actor's 'author feed' (post and reposts by the author). Does not require auth.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["actor"];
                readonly properties: {
                    readonly actor: {
                        readonly type: "string";
                        readonly format: "at-identifier";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                    readonly filter: {
                        readonly type: "string";
                        readonly description: "Combinations of post/repost types to include in response.";
                        readonly knownValues: ["posts_with_replies", "posts_no_replies", "posts_with_media", "posts_and_author_threads", "posts_with_video"];
                        readonly default: "posts_with_replies";
                    };
                    readonly includePins: {
                        readonly type: "boolean";
                        readonly default: false;
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["feed"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly feed: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.feed.defs#feedViewPost";
                            };
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "BlockedActor";
            }, {
                readonly name: "BlockedByActor";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.getFeed";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get a hydrated feed from an actor's selected feed generator. Implemented by App View.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["feed"];
                readonly properties: {
                    readonly feed: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["feed"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly feed: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.feed.defs#feedViewPost";
                            };
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "UnknownFeed";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.getFeedGenerator";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get information about a feed generator. Implemented by AppView.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["feed"];
                readonly properties: {
                    readonly feed: {
                        readonly type: "string";
                        readonly format: "at-uri";
                        readonly description: "AT-URI of the feed generator record.";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["view", "isOnline", "isValid"];
                    readonly properties: {
                        readonly view: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.feed.defs#generatorView";
                        };
                        readonly isOnline: {
                            readonly type: "boolean";
                            readonly description: "Indicates whether the feed generator service has been online recently, or else seems to be inactive.";
                        };
                        readonly isValid: {
                            readonly type: "boolean";
                            readonly description: "Indicates whether the feed generator service is compatible with the record declaration.";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.getFeedGenerators";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get information about a list of feed generators.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["feeds"];
                readonly properties: {
                    readonly feeds: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["feeds"];
                    readonly properties: {
                        readonly feeds: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.feed.defs#generatorView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.getFeedSkeleton";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get a skeleton of a feed provided by a feed generator. Auth is optional, depending on provider requirements, and provides the DID of the requester. Implemented by Feed Generator Service.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["feed"];
                readonly properties: {
                    readonly feed: {
                        readonly type: "string";
                        readonly format: "at-uri";
                        readonly description: "Reference to feed generator record describing the specific feed being requested.";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["feed"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly feed: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.feed.defs#skeletonFeedPost";
                            };
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "UnknownFeed";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.getLikes";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get like records which reference a subject (by AT-URI and CID).";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["uri"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                        readonly description: "AT-URI of the subject (eg, a post record).";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                        readonly description: "CID of the subject record (aka, specific version of record), to filter likes.";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["uri", "likes"];
                    readonly properties: {
                        readonly uri: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                        readonly cid: {
                            readonly type: "string";
                            readonly format: "cid";
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly likes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.feed.getLikes#like";
                            };
                        };
                    };
                };
            };
        };
        readonly like: {
            readonly type: "object";
            readonly required: ["indexedAt", "createdAt", "actor"];
            readonly properties: {
                readonly indexedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly actor: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#profileView";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.getListFeed";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get a feed of recent posts from a list (posts and reposts from any actors on the list). Does not require auth.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["list"];
                readonly properties: {
                    readonly list: {
                        readonly type: "string";
                        readonly format: "at-uri";
                        readonly description: "Reference (AT-URI) to the list record.";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["feed"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly feed: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.feed.defs#feedViewPost";
                            };
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "UnknownList";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.getPostThread";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get posts in a thread. Does not require auth, but additional metadata and filtering will be applied for authed requests.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["uri"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                        readonly description: "Reference (AT-URI) to post record.";
                    };
                    readonly depth: {
                        readonly type: "integer";
                        readonly description: "How many levels of reply depth should be included in response.";
                        readonly default: 6;
                        readonly minimum: 0;
                        readonly maximum: 1000;
                    };
                    readonly parentHeight: {
                        readonly type: "integer";
                        readonly description: "How many levels of parent (and grandparent, etc) post to include.";
                        readonly default: 80;
                        readonly minimum: 0;
                        readonly maximum: 1000;
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["thread"];
                    readonly properties: {
                        readonly thread: {
                            readonly type: "union";
                            readonly refs: ["lex:app.bsky.feed.defs#threadViewPost", "lex:app.bsky.feed.defs#notFoundPost", "lex:app.bsky.feed.defs#blockedPost"];
                        };
                        readonly threadgate: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.feed.defs#threadgateView";
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "NotFound";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.getPosts";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Gets post views for a specified list of posts (by AT-URI). This is sometimes referred to as 'hydrating' a 'feed skeleton'.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["uris"];
                readonly properties: {
                    readonly uris: {
                        readonly type: "array";
                        readonly description: "List of post AT-URIs to return hydrated views for.";
                        readonly items: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                        readonly maxLength: 25;
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["posts"];
                    readonly properties: {
                        readonly posts: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.feed.defs#postView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.getQuotes";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get a list of quotes for a given post.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["uri"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                        readonly description: "Reference (AT-URI) of post record";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                        readonly description: "If supplied, filters to quotes of specific version (by CID) of the post record.";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["uri", "posts"];
                    readonly properties: {
                        readonly uri: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                        readonly cid: {
                            readonly type: "string";
                            readonly format: "cid";
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly posts: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.feed.defs#postView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.getRepostedBy";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get a list of reposts for a given post.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["uri"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                        readonly description: "Reference (AT-URI) of post record";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                        readonly description: "If supplied, filters to reposts of specific version (by CID) of the post record.";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["uri", "repostedBy"];
                    readonly properties: {
                        readonly uri: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                        readonly cid: {
                            readonly type: "string";
                            readonly format: "cid";
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly repostedBy: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.actor.defs#profileView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.getSuggestedFeeds";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get a list of suggested feeds (feed generators) for the requesting account.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["feeds"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly feeds: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.feed.defs#generatorView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.getTimeline";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get a view of the requesting account's home timeline. This is expected to be some form of reverse-chronological feed.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly algorithm: {
                        readonly type: "string";
                        readonly description: "Variant 'algorithm' for timeline. Implementation-specific. NOTE: most feed flexibility has been moved to feed generator mechanism.";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["feed"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly feed: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.feed.defs#feedViewPost";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.like";
    readonly defs: {
        readonly main: {
            readonly type: "record";
            readonly description: "Record declaring a 'like' of a piece of subject content.";
            readonly key: "tid";
            readonly record: {
                readonly type: "object";
                readonly required: ["subject", "createdAt"];
                readonly properties: {
                    readonly subject: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.repo.strongRef";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.post";
    readonly defs: {
        readonly main: {
            readonly type: "record";
            readonly description: "Record containing a Bluesky post.";
            readonly key: "tid";
            readonly record: {
                readonly type: "object";
                readonly required: ["text", "createdAt"];
                readonly properties: {
                    readonly text: {
                        readonly type: "string";
                        readonly maxLength: 3000;
                        readonly maxGraphemes: 300;
                        readonly description: "The primary post content. May be an empty string, if there are embeds.";
                    };
                    readonly entities: {
                        readonly type: "array";
                        readonly description: "DEPRECATED: replaced by app.bsky.richtext.facet.";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.feed.post#entity";
                        };
                    };
                    readonly facets: {
                        readonly type: "array";
                        readonly description: "Annotations of text (mentions, URLs, hashtags, etc)";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.richtext.facet";
                        };
                    };
                    readonly reply: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.feed.post#replyRef";
                    };
                    readonly embed: {
                        readonly type: "union";
                        readonly refs: ["lex:app.bsky.embed.images", "lex:app.bsky.embed.video", "lex:app.bsky.embed.external", "lex:app.bsky.embed.record", "lex:app.bsky.embed.recordWithMedia"];
                    };
                    readonly langs: {
                        readonly type: "array";
                        readonly description: "Indicates human language of post primary text content.";
                        readonly maxLength: 3;
                        readonly items: {
                            readonly type: "string";
                            readonly format: "language";
                        };
                    };
                    readonly labels: {
                        readonly type: "union";
                        readonly description: "Self-label values for this post. Effectively content warnings.";
                        readonly refs: ["lex:com.atproto.label.defs#selfLabels"];
                    };
                    readonly tags: {
                        readonly type: "array";
                        readonly description: "Additional hashtags, in addition to any included in post text and facets.";
                        readonly maxLength: 8;
                        readonly items: {
                            readonly type: "string";
                            readonly maxLength: 640;
                            readonly maxGraphemes: 64;
                        };
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                        readonly description: "Client-declared timestamp when this post was originally created.";
                    };
                };
            };
        };
        readonly replyRef: {
            readonly type: "object";
            readonly required: ["root", "parent"];
            readonly properties: {
                readonly root: {
                    readonly type: "ref";
                    readonly ref: "lex:com.atproto.repo.strongRef";
                };
                readonly parent: {
                    readonly type: "ref";
                    readonly ref: "lex:com.atproto.repo.strongRef";
                };
            };
        };
        readonly entity: {
            readonly type: "object";
            readonly description: "Deprecated: use facets instead.";
            readonly required: ["index", "type", "value"];
            readonly properties: {
                readonly index: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.feed.post#textSlice";
                };
                readonly type: {
                    readonly type: "string";
                    readonly description: "Expected values are 'mention' and 'link'.";
                };
                readonly value: {
                    readonly type: "string";
                };
            };
        };
        readonly textSlice: {
            readonly type: "object";
            readonly description: "Deprecated. Use app.bsky.richtext instead -- A text segment. Start is inclusive, end is exclusive. Indices are for utf16-encoded strings.";
            readonly required: ["start", "end"];
            readonly properties: {
                readonly start: {
                    readonly type: "integer";
                    readonly minimum: 0;
                };
                readonly end: {
                    readonly type: "integer";
                    readonly minimum: 0;
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.postgate";
    readonly defs: {
        readonly main: {
            readonly type: "record";
            readonly key: "tid";
            readonly description: "Record defining interaction rules for a post. The record key (rkey) of the postgate record must match the record key of the post, and that record must be in the same repository.";
            readonly record: {
                readonly type: "object";
                readonly required: ["post", "createdAt"];
                readonly properties: {
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly post: {
                        readonly type: "string";
                        readonly format: "at-uri";
                        readonly description: "Reference (AT-URI) to the post record.";
                    };
                    readonly detachedEmbeddingUris: {
                        readonly type: "array";
                        readonly maxLength: 50;
                        readonly items: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                        readonly description: "List of AT-URIs embedding this post that the author has detached from.";
                    };
                    readonly embeddingRules: {
                        readonly description: "List of rules defining who can embed this post. If value is an empty array or is undefined, no particular rules apply and anyone can embed.";
                        readonly type: "array";
                        readonly maxLength: 5;
                        readonly items: {
                            readonly type: "union";
                            readonly refs: ["lex:app.bsky.feed.postgate#disableRule"];
                        };
                    };
                };
            };
        };
        readonly disableRule: {
            readonly type: "object";
            readonly description: "Disables embedding of this post.";
            readonly properties: {};
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.repost";
    readonly defs: {
        readonly main: {
            readonly description: "Record representing a 'repost' of an existing Bluesky post.";
            readonly type: "record";
            readonly key: "tid";
            readonly record: {
                readonly type: "object";
                readonly required: ["subject", "createdAt"];
                readonly properties: {
                    readonly subject: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.repo.strongRef";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.searchPosts";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Find posts matching search criteria, returning views of those posts.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["q"];
                readonly properties: {
                    readonly q: {
                        readonly type: "string";
                        readonly description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.";
                    };
                    readonly sort: {
                        readonly type: "string";
                        readonly knownValues: ["top", "latest"];
                        readonly default: "latest";
                        readonly description: "Specifies the ranking order of results.";
                    };
                    readonly since: {
                        readonly type: "string";
                        readonly description: "Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD).";
                    };
                    readonly until: {
                        readonly type: "string";
                        readonly description: "Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD).";
                    };
                    readonly mentions: {
                        readonly type: "string";
                        readonly format: "at-identifier";
                        readonly description: "Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions.";
                    };
                    readonly author: {
                        readonly type: "string";
                        readonly format: "at-identifier";
                        readonly description: "Filter to posts by the given account. Handles are resolved to DID before query-time.";
                    };
                    readonly lang: {
                        readonly type: "string";
                        readonly format: "language";
                        readonly description: "Filter to posts in the given language. Expected to be based on post language field, though server may override language detection.";
                    };
                    readonly domain: {
                        readonly type: "string";
                        readonly description: "Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization.";
                    };
                    readonly url: {
                        readonly type: "string";
                        readonly format: "uri";
                        readonly description: "Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching.";
                    };
                    readonly tag: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly maxLength: 640;
                            readonly maxGraphemes: 64;
                        };
                        readonly description: "Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching.";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 25;
                    };
                    readonly cursor: {
                        readonly type: "string";
                        readonly description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set.";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["posts"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly hitsTotal: {
                            readonly type: "integer";
                            readonly description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.";
                        };
                        readonly posts: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.feed.defs#postView";
                            };
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "BadQueryString";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.sendInteractions";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Send information about interactions with feed items back to the feed generator that served them.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["interactions"];
                    readonly properties: {
                        readonly interactions: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.feed.defs#interaction";
                            };
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly properties: {};
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.feed.threadgate";
    readonly defs: {
        readonly main: {
            readonly type: "record";
            readonly key: "tid";
            readonly description: "Record defining interaction gating rules for a thread (aka, reply controls). The record key (rkey) of the threadgate record must match the record key of the thread's root post, and that record must be in the same repository.";
            readonly record: {
                readonly type: "object";
                readonly required: ["post", "createdAt"];
                readonly properties: {
                    readonly post: {
                        readonly type: "string";
                        readonly format: "at-uri";
                        readonly description: "Reference (AT-URI) to the post record.";
                    };
                    readonly allow: {
                        readonly description: "List of rules defining who can reply to this post. If value is an empty array, no one can reply. If value is undefined, anyone can reply.";
                        readonly type: "array";
                        readonly maxLength: 5;
                        readonly items: {
                            readonly type: "union";
                            readonly refs: ["lex:app.bsky.feed.threadgate#mentionRule", "lex:app.bsky.feed.threadgate#followerRule", "lex:app.bsky.feed.threadgate#followingRule", "lex:app.bsky.feed.threadgate#listRule"];
                        };
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                    readonly hiddenReplies: {
                        readonly type: "array";
                        readonly maxLength: 50;
                        readonly items: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                        readonly description: "List of hidden reply URIs.";
                    };
                };
            };
        };
        readonly mentionRule: {
            readonly type: "object";
            readonly description: "Allow replies from actors mentioned in your post.";
            readonly properties: {};
        };
        readonly followerRule: {
            readonly type: "object";
            readonly description: "Allow replies from actors who follow you.";
            readonly properties: {};
        };
        readonly followingRule: {
            readonly type: "object";
            readonly description: "Allow replies from actors you follow.";
            readonly properties: {};
        };
        readonly listRule: {
            readonly type: "object";
            readonly description: "Allow replies from actors on a list.";
            readonly required: ["list"];
            readonly properties: {
                readonly list: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.block";
    readonly defs: {
        readonly main: {
            readonly type: "record";
            readonly description: "Record declaring a 'block' relationship against another account. NOTE: blocks are public in Bluesky; see blog posts for details.";
            readonly key: "tid";
            readonly record: {
                readonly type: "object";
                readonly required: ["subject", "createdAt"];
                readonly properties: {
                    readonly subject: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "DID of the account to be blocked.";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.defs";
    readonly defs: {
        readonly listViewBasic: {
            readonly type: "object";
            readonly required: ["uri", "cid", "name", "purpose"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly name: {
                    readonly type: "string";
                    readonly maxLength: 64;
                    readonly minLength: 1;
                };
                readonly purpose: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.graph.defs#listPurpose";
                };
                readonly avatar: {
                    readonly type: "string";
                    readonly format: "uri";
                };
                readonly listItemCount: {
                    readonly type: "integer";
                    readonly minimum: 0;
                };
                readonly labels: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#label";
                    };
                };
                readonly viewer: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.graph.defs#listViewerState";
                };
                readonly indexedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
        readonly listView: {
            readonly type: "object";
            readonly required: ["uri", "cid", "creator", "name", "purpose", "indexedAt"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly creator: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#profileView";
                };
                readonly name: {
                    readonly type: "string";
                    readonly maxLength: 64;
                    readonly minLength: 1;
                };
                readonly purpose: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.graph.defs#listPurpose";
                };
                readonly description: {
                    readonly type: "string";
                    readonly maxGraphemes: 300;
                    readonly maxLength: 3000;
                };
                readonly descriptionFacets: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.richtext.facet";
                    };
                };
                readonly avatar: {
                    readonly type: "string";
                    readonly format: "uri";
                };
                readonly listItemCount: {
                    readonly type: "integer";
                    readonly minimum: 0;
                };
                readonly labels: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#label";
                    };
                };
                readonly viewer: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.graph.defs#listViewerState";
                };
                readonly indexedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
        readonly listItemView: {
            readonly type: "object";
            readonly required: ["uri", "subject"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly subject: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#profileView";
                };
            };
        };
        readonly starterPackView: {
            readonly type: "object";
            readonly required: ["uri", "cid", "record", "creator", "indexedAt"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly record: {
                    readonly type: "unknown";
                };
                readonly creator: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#profileViewBasic";
                };
                readonly list: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.graph.defs#listViewBasic";
                };
                readonly listItemsSample: {
                    readonly type: "array";
                    readonly maxLength: 12;
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.graph.defs#listItemView";
                    };
                };
                readonly feeds: {
                    readonly type: "array";
                    readonly maxLength: 3;
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.feed.defs#generatorView";
                    };
                };
                readonly joinedWeekCount: {
                    readonly type: "integer";
                    readonly minimum: 0;
                };
                readonly joinedAllTimeCount: {
                    readonly type: "integer";
                    readonly minimum: 0;
                };
                readonly labels: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#label";
                    };
                };
                readonly indexedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
        readonly starterPackViewBasic: {
            readonly type: "object";
            readonly required: ["uri", "cid", "record", "creator", "indexedAt"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly record: {
                    readonly type: "unknown";
                };
                readonly creator: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#profileViewBasic";
                };
                readonly listItemCount: {
                    readonly type: "integer";
                    readonly minimum: 0;
                };
                readonly joinedWeekCount: {
                    readonly type: "integer";
                    readonly minimum: 0;
                };
                readonly joinedAllTimeCount: {
                    readonly type: "integer";
                    readonly minimum: 0;
                };
                readonly labels: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#label";
                    };
                };
                readonly indexedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
        readonly listPurpose: {
            readonly type: "string";
            readonly knownValues: ["app.bsky.graph.defs#modlist", "app.bsky.graph.defs#curatelist", "app.bsky.graph.defs#referencelist"];
        };
        readonly modlist: {
            readonly type: "token";
            readonly description: "A list of actors to apply an aggregate moderation action (mute/block) on.";
        };
        readonly curatelist: {
            readonly type: "token";
            readonly description: "A list of actors used for curation purposes such as list feeds or interaction gating.";
        };
        readonly referencelist: {
            readonly type: "token";
            readonly description: "A list of actors used for only for reference purposes such as within a starter pack.";
        };
        readonly listViewerState: {
            readonly type: "object";
            readonly properties: {
                readonly muted: {
                    readonly type: "boolean";
                };
                readonly blocked: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
            };
        };
        readonly notFoundActor: {
            readonly type: "object";
            readonly description: "indicates that a handle or DID could not be resolved";
            readonly required: ["actor", "notFound"];
            readonly properties: {
                readonly actor: {
                    readonly type: "string";
                    readonly format: "at-identifier";
                };
                readonly notFound: {
                    readonly type: "boolean";
                    readonly const: true;
                };
            };
        };
        readonly relationship: {
            readonly type: "object";
            readonly description: "lists the bi-directional graph relationships between one actor (not indicated in the object), and the target actors (the DID included in the object)";
            readonly required: ["did"];
            readonly properties: {
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly following: {
                    readonly type: "string";
                    readonly format: "at-uri";
                    readonly description: "if the actor follows this DID, this is the AT-URI of the follow record";
                };
                readonly followedBy: {
                    readonly type: "string";
                    readonly format: "at-uri";
                    readonly description: "if the actor is followed by this DID, contains the AT-URI of the follow record";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.follow";
    readonly defs: {
        readonly main: {
            readonly type: "record";
            readonly description: "Record declaring a social 'follow' relationship of another account. Duplicate follows will be ignored by the AppView.";
            readonly key: "tid";
            readonly record: {
                readonly type: "object";
                readonly required: ["subject", "createdAt"];
                readonly properties: {
                    readonly subject: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.getActorStarterPacks";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get a list of starter packs created by the actor.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["actor"];
                readonly properties: {
                    readonly actor: {
                        readonly type: "string";
                        readonly format: "at-identifier";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["starterPacks"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly starterPacks: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.graph.defs#starterPackViewBasic";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.getBlocks";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Enumerates which accounts the requesting account is currently blocking. Requires auth.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["blocks"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly blocks: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.actor.defs#profileView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.getFollowers";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Enumerates accounts which follow a specified account (actor).";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["actor"];
                readonly properties: {
                    readonly actor: {
                        readonly type: "string";
                        readonly format: "at-identifier";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["subject", "followers"];
                    readonly properties: {
                        readonly subject: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.actor.defs#profileView";
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly followers: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.actor.defs#profileView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.getFollows";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Enumerates accounts which a specified account (actor) follows.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["actor"];
                readonly properties: {
                    readonly actor: {
                        readonly type: "string";
                        readonly format: "at-identifier";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["subject", "follows"];
                    readonly properties: {
                        readonly subject: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.actor.defs#profileView";
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly follows: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.actor.defs#profileView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.getKnownFollowers";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Enumerates accounts which follow a specified account (actor) and are followed by the viewer.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["actor"];
                readonly properties: {
                    readonly actor: {
                        readonly type: "string";
                        readonly format: "at-identifier";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["subject", "followers"];
                    readonly properties: {
                        readonly subject: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.actor.defs#profileView";
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly followers: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.actor.defs#profileView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.getList";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Gets a 'view' (with additional context) of a specified list.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["list"];
                readonly properties: {
                    readonly list: {
                        readonly type: "string";
                        readonly format: "at-uri";
                        readonly description: "Reference (AT-URI) of the list record to hydrate.";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["list", "items"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly list: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.graph.defs#listView";
                        };
                        readonly items: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.graph.defs#listItemView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.getListBlocks";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get mod lists that the requesting account (actor) is blocking. Requires auth.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["lists"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly lists: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.graph.defs#listView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.getListMutes";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Enumerates mod lists that the requesting account (actor) currently has muted. Requires auth.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["lists"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly lists: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.graph.defs#listView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.getLists";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Enumerates the lists created by a specified account (actor).";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["actor"];
                readonly properties: {
                    readonly actor: {
                        readonly type: "string";
                        readonly format: "at-identifier";
                        readonly description: "The account (actor) to enumerate lists from.";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["lists"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly lists: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.graph.defs#listView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.getMutes";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Enumerates accounts that the requesting account (actor) currently has muted. Requires auth.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["mutes"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly mutes: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.actor.defs#profileView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.getRelationships";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Enumerates public relationships between one account, and a list of other accounts. Does not require auth.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["actor"];
                readonly properties: {
                    readonly actor: {
                        readonly type: "string";
                        readonly format: "at-identifier";
                        readonly description: "Primary account requesting relationships for.";
                    };
                    readonly others: {
                        readonly type: "array";
                        readonly description: "List of 'other' accounts to be related back to the primary.";
                        readonly maxLength: 30;
                        readonly items: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["relationships"];
                    readonly properties: {
                        readonly actor: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly relationships: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "union";
                                readonly refs: ["lex:app.bsky.graph.defs#relationship", "lex:app.bsky.graph.defs#notFoundActor"];
                            };
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "ActorNotFound";
                readonly description: "the primary actor at-identifier could not be resolved";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.getStarterPack";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Gets a view of a starter pack.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["starterPack"];
                readonly properties: {
                    readonly starterPack: {
                        readonly type: "string";
                        readonly format: "at-uri";
                        readonly description: "Reference (AT-URI) of the starter pack record.";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["starterPack"];
                    readonly properties: {
                        readonly starterPack: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.graph.defs#starterPackView";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.getStarterPacks";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get views for a list of starter packs.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["uris"];
                readonly properties: {
                    readonly uris: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                        readonly maxLength: 25;
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["starterPacks"];
                    readonly properties: {
                        readonly starterPacks: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.graph.defs#starterPackViewBasic";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.getSuggestedFollowsByActor";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Enumerates follows similar to a given account (actor). Expected use is to recommend additional accounts immediately after following one account.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["actor"];
                readonly properties: {
                    readonly actor: {
                        readonly type: "string";
                        readonly format: "at-identifier";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["suggestions"];
                    readonly properties: {
                        readonly suggestions: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.actor.defs#profileView";
                            };
                        };
                        readonly isFallback: {
                            readonly type: "boolean";
                            readonly description: "If true, response has fallen-back to generic results, and is not scoped using relativeToDid";
                            readonly default: false;
                        };
                        readonly recId: {
                            readonly type: "integer";
                            readonly description: "Snowflake for this recommendation, use when submitting recommendation events.";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.list";
    readonly defs: {
        readonly main: {
            readonly type: "record";
            readonly description: "Record representing a list of accounts (actors). Scope includes both moderation-oriented lists and curration-oriented lists.";
            readonly key: "tid";
            readonly record: {
                readonly type: "object";
                readonly required: ["name", "purpose", "createdAt"];
                readonly properties: {
                    readonly purpose: {
                        readonly type: "ref";
                        readonly description: "Defines the purpose of the list (aka, moderation-oriented or curration-oriented)";
                        readonly ref: "lex:app.bsky.graph.defs#listPurpose";
                    };
                    readonly name: {
                        readonly type: "string";
                        readonly maxLength: 64;
                        readonly minLength: 1;
                        readonly description: "Display name for list; can not be empty.";
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly maxGraphemes: 300;
                        readonly maxLength: 3000;
                    };
                    readonly descriptionFacets: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.richtext.facet";
                        };
                    };
                    readonly avatar: {
                        readonly type: "blob";
                        readonly accept: ["image/png", "image/jpeg"];
                        readonly maxSize: 1000000;
                    };
                    readonly labels: {
                        readonly type: "union";
                        readonly refs: ["lex:com.atproto.label.defs#selfLabels"];
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.listblock";
    readonly defs: {
        readonly main: {
            readonly type: "record";
            readonly description: "Record representing a block relationship against an entire an entire list of accounts (actors).";
            readonly key: "tid";
            readonly record: {
                readonly type: "object";
                readonly required: ["subject", "createdAt"];
                readonly properties: {
                    readonly subject: {
                        readonly type: "string";
                        readonly format: "at-uri";
                        readonly description: "Reference (AT-URI) to the mod list record.";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.listitem";
    readonly defs: {
        readonly main: {
            readonly type: "record";
            readonly description: "Record representing an account's inclusion on a specific list. The AppView will ignore duplicate listitem records.";
            readonly key: "tid";
            readonly record: {
                readonly type: "object";
                readonly required: ["subject", "list", "createdAt"];
                readonly properties: {
                    readonly subject: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "The account which is included on the list.";
                    };
                    readonly list: {
                        readonly type: "string";
                        readonly format: "at-uri";
                        readonly description: "Reference (AT-URI) to the list record (app.bsky.graph.list).";
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.muteActor";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Creates a mute relationship for the specified account. Mutes are private in Bluesky. Requires auth.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["actor"];
                    readonly properties: {
                        readonly actor: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.muteActorList";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Creates a mute relationship for the specified list of accounts. Mutes are private in Bluesky. Requires auth.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["list"];
                    readonly properties: {
                        readonly list: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.muteThread";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Mutes a thread preventing notifications from the thread and any of its children. Mutes are private in Bluesky. Requires auth.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["root"];
                    readonly properties: {
                        readonly root: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.searchStarterPacks";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Find starter packs matching search criteria. Does not require auth.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["q"];
                readonly properties: {
                    readonly q: {
                        readonly type: "string";
                        readonly description: "Search query string. Syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 25;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["starterPacks"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly starterPacks: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.graph.defs#starterPackViewBasic";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.starterpack";
    readonly defs: {
        readonly main: {
            readonly type: "record";
            readonly description: "Record defining a starter pack of actors and feeds for new users.";
            readonly key: "tid";
            readonly record: {
                readonly type: "object";
                readonly required: ["name", "list", "createdAt"];
                readonly properties: {
                    readonly name: {
                        readonly type: "string";
                        readonly maxGraphemes: 50;
                        readonly maxLength: 500;
                        readonly minLength: 1;
                        readonly description: "Display name for starter pack; can not be empty.";
                    };
                    readonly description: {
                        readonly type: "string";
                        readonly maxGraphemes: 300;
                        readonly maxLength: 3000;
                    };
                    readonly descriptionFacets: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.richtext.facet";
                        };
                    };
                    readonly list: {
                        readonly type: "string";
                        readonly format: "at-uri";
                        readonly description: "Reference (AT-URI) to the list record.";
                    };
                    readonly feeds: {
                        readonly type: "array";
                        readonly maxLength: 3;
                        readonly items: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.graph.starterpack#feedItem";
                        };
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
        };
        readonly feedItem: {
            readonly type: "object";
            readonly required: ["uri"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.unmuteActor";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Unmutes the specified account. Requires auth.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["actor"];
                    readonly properties: {
                        readonly actor: {
                            readonly type: "string";
                            readonly format: "at-identifier";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.unmuteActorList";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Unmutes the specified list of accounts. Requires auth.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["list"];
                    readonly properties: {
                        readonly list: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.graph.unmuteThread";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Unmutes the specified thread. Requires auth.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["root"];
                    readonly properties: {
                        readonly root: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.labeler.defs";
    readonly defs: {
        readonly labelerView: {
            readonly type: "object";
            readonly required: ["uri", "cid", "creator", "indexedAt"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly creator: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#profileView";
                };
                readonly likeCount: {
                    readonly type: "integer";
                    readonly minimum: 0;
                };
                readonly viewer: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.labeler.defs#labelerViewerState";
                };
                readonly indexedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly labels: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#label";
                    };
                };
            };
        };
        readonly labelerViewDetailed: {
            readonly type: "object";
            readonly required: ["uri", "cid", "creator", "policies", "indexedAt"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly creator: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#profileView";
                };
                readonly policies: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.labeler.defs#labelerPolicies";
                };
                readonly likeCount: {
                    readonly type: "integer";
                    readonly minimum: 0;
                };
                readonly viewer: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.labeler.defs#labelerViewerState";
                };
                readonly indexedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly labels: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#label";
                    };
                };
            };
        };
        readonly labelerViewerState: {
            readonly type: "object";
            readonly properties: {
                readonly like: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
            };
        };
        readonly labelerPolicies: {
            readonly type: "object";
            readonly required: ["labelValues"];
            readonly properties: {
                readonly labelValues: {
                    readonly type: "array";
                    readonly description: "The label values which this labeler publishes. May include global or custom labels.";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#labelValue";
                    };
                };
                readonly labelValueDefinitions: {
                    readonly type: "array";
                    readonly description: "Label values created by this labeler and scoped exclusively to it. Labels defined here will override global label definitions for this labeler.";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#labelValueDefinition";
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.labeler.getServices";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get information about a list of labeler services.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["dids"];
                readonly properties: {
                    readonly dids: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                    };
                    readonly detailed: {
                        readonly type: "boolean";
                        readonly default: false;
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["views"];
                    readonly properties: {
                        readonly views: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "union";
                                readonly refs: ["lex:app.bsky.labeler.defs#labelerView", "lex:app.bsky.labeler.defs#labelerViewDetailed"];
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.labeler.service";
    readonly defs: {
        readonly main: {
            readonly type: "record";
            readonly description: "A declaration of the existence of labeler service.";
            readonly key: "literal:self";
            readonly record: {
                readonly type: "object";
                readonly required: ["policies", "createdAt"];
                readonly properties: {
                    readonly policies: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.labeler.defs#labelerPolicies";
                    };
                    readonly labels: {
                        readonly type: "union";
                        readonly refs: ["lex:com.atproto.label.defs#selfLabels"];
                    };
                    readonly createdAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.notification.getUnreadCount";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Count the number of unread notifications for the requesting account. Requires auth.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly priority: {
                        readonly type: "boolean";
                    };
                    readonly seenAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["count"];
                    readonly properties: {
                        readonly count: {
                            readonly type: "integer";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.notification.listNotifications";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Enumerate notifications for the requesting account. Requires auth.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly reasons: {
                        readonly description: "Notification reasons to include in response.";
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly description: "A reason that matches the reason property of #notification.";
                        };
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly priority: {
                        readonly type: "boolean";
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                    readonly seenAt: {
                        readonly type: "string";
                        readonly format: "datetime";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["notifications"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly notifications: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.notification.listNotifications#notification";
                            };
                        };
                        readonly priority: {
                            readonly type: "boolean";
                        };
                        readonly seenAt: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                    };
                };
            };
        };
        readonly notification: {
            readonly type: "object";
            readonly required: ["uri", "cid", "author", "reason", "record", "isRead", "indexedAt"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly author: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#profileView";
                };
                readonly reason: {
                    readonly type: "string";
                    readonly description: "Expected values are 'like', 'repost', 'follow', 'mention', 'reply', 'quote', and 'starterpack-joined'.";
                    readonly knownValues: ["like", "repost", "follow", "mention", "reply", "quote", "starterpack-joined"];
                };
                readonly reasonSubject: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly record: {
                    readonly type: "unknown";
                };
                readonly isRead: {
                    readonly type: "boolean";
                };
                readonly indexedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly labels: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#label";
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.notification.putPreferences";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Set notification-related preferences for an account. Requires auth.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["priority"];
                    readonly properties: {
                        readonly priority: {
                            readonly type: "boolean";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.notification.registerPush";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Register to receive push notifications, via a specified service, for the requesting account. Requires auth.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["serviceDid", "token", "platform", "appId"];
                    readonly properties: {
                        readonly serviceDid: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly token: {
                            readonly type: "string";
                        };
                        readonly platform: {
                            readonly type: "string";
                            readonly knownValues: ["ios", "android", "web"];
                        };
                        readonly appId: {
                            readonly type: "string";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.notification.updateSeen";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Notify server that the requesting account has seen notifications. Requires auth.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["seenAt"];
                    readonly properties: {
                        readonly seenAt: {
                            readonly type: "string";
                            readonly format: "datetime";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.richtext.facet";
    readonly defs: {
        readonly main: {
            readonly type: "object";
            readonly description: "Annotation of a sub-string within rich text.";
            readonly required: ["index", "features"];
            readonly properties: {
                readonly index: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.richtext.facet#byteSlice";
                };
                readonly features: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "union";
                        readonly refs: ["lex:app.bsky.richtext.facet#mention", "lex:app.bsky.richtext.facet#link", "lex:app.bsky.richtext.facet#tag"];
                    };
                };
            };
        };
        readonly mention: {
            readonly type: "object";
            readonly description: "Facet feature for mention of another account. The text is usually a handle, including a '@' prefix, but the facet reference is a DID.";
            readonly required: ["did"];
            readonly properties: {
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
            };
        };
        readonly link: {
            readonly type: "object";
            readonly description: "Facet feature for a URL. The text URL may have been simplified or truncated, but the facet reference should be a complete URL.";
            readonly required: ["uri"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "uri";
                };
            };
        };
        readonly tag: {
            readonly type: "object";
            readonly description: "Facet feature for a hashtag. The text usually includes a '#' prefix, but the facet reference should not (except in the case of 'double hash tags').";
            readonly required: ["tag"];
            readonly properties: {
                readonly tag: {
                    readonly type: "string";
                    readonly maxLength: 640;
                    readonly maxGraphemes: 64;
                };
            };
        };
        readonly byteSlice: {
            readonly type: "object";
            readonly description: "Specifies the sub-string range a facet feature applies to. Start index is inclusive, end index is exclusive. Indices are zero-indexed, counting bytes of the UTF-8 encoded text. NOTE: some languages, like Javascript, use UTF-16 or Unicode codepoints for string slice indexing; in these languages, convert to byte arrays before working with facets.";
            readonly required: ["byteStart", "byteEnd"];
            readonly properties: {
                readonly byteStart: {
                    readonly type: "integer";
                    readonly minimum: 0;
                };
                readonly byteEnd: {
                    readonly type: "integer";
                    readonly minimum: 0;
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.unspecced.defs";
    readonly defs: {
        readonly skeletonSearchPost: {
            readonly type: "object";
            readonly required: ["uri"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
            };
        };
        readonly skeletonSearchActor: {
            readonly type: "object";
            readonly required: ["did"];
            readonly properties: {
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
            };
        };
        readonly skeletonSearchStarterPack: {
            readonly type: "object";
            readonly required: ["uri"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
            };
        };
        readonly trendingTopic: {
            readonly type: "object";
            readonly required: ["topic", "link"];
            readonly properties: {
                readonly topic: {
                    readonly type: "string";
                };
                readonly displayName: {
                    readonly type: "string";
                };
                readonly description: {
                    readonly type: "string";
                };
                readonly link: {
                    readonly type: "string";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.unspecced.getConfig";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get miscellaneous runtime configuration.";
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: [];
                    readonly properties: {
                        readonly checkEmailConfirmed: {
                            readonly type: "boolean";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.unspecced.getPopularFeedGenerators";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "An unspecced view of globally popular feed generators.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                    readonly query: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["feeds"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly feeds: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.feed.defs#generatorView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.unspecced.getSuggestionsSkeleton";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get a skeleton of suggested actors. Intended to be called and then hydrated through app.bsky.actor.getSuggestions";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly viewer: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                    readonly relativeToDid: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "DID of the account to get suggestions relative to. If not provided, suggestions will be based on the viewer.";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["actors"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly actors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.unspecced.defs#skeletonSearchActor";
                            };
                        };
                        readonly relativeToDid: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "DID of the account these suggestions are relative to. If this is returned undefined, suggestions are based on the viewer.";
                        };
                        readonly recId: {
                            readonly type: "integer";
                            readonly description: "Snowflake for this recommendation, use when submitting recommendation events.";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.unspecced.getTaggedSuggestions";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get a list of suggestions (feeds and users) tagged with categories";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {};
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["suggestions"];
                    readonly properties: {
                        readonly suggestions: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.unspecced.getTaggedSuggestions#suggestion";
                            };
                        };
                    };
                };
            };
        };
        readonly suggestion: {
            readonly type: "object";
            readonly required: ["tag", "subjectType", "subject"];
            readonly properties: {
                readonly tag: {
                    readonly type: "string";
                };
                readonly subjectType: {
                    readonly type: "string";
                    readonly knownValues: ["actor", "feed"];
                };
                readonly subject: {
                    readonly type: "string";
                    readonly format: "uri";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.unspecced.getTrendingTopics";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get a list of trending topics";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly viewer: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 25;
                        readonly default: 10;
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["topics", "suggested"];
                    readonly properties: {
                        readonly topics: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.unspecced.defs#trendingTopic";
                            };
                        };
                        readonly suggested: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.unspecced.defs#trendingTopic";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.unspecced.searchActorsSkeleton";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Backend Actors (profile) search, returns only skeleton.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["q"];
                readonly properties: {
                    readonly q: {
                        readonly type: "string";
                        readonly description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended. For typeahead search, only simple term match is supported, not full syntax.";
                    };
                    readonly viewer: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "DID of the account making the request (not included for public/unauthenticated queries). Used to boost followed accounts in ranking.";
                    };
                    readonly typeahead: {
                        readonly type: "boolean";
                        readonly description: "If true, acts as fast/simple 'typeahead' query.";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 25;
                    };
                    readonly cursor: {
                        readonly type: "string";
                        readonly description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set.";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["actors"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly hitsTotal: {
                            readonly type: "integer";
                            readonly description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.";
                        };
                        readonly actors: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.unspecced.defs#skeletonSearchActor";
                            };
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "BadQueryString";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.unspecced.searchPostsSkeleton";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Backend Posts search, returns only skeleton";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["q"];
                readonly properties: {
                    readonly q: {
                        readonly type: "string";
                        readonly description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.";
                    };
                    readonly sort: {
                        readonly type: "string";
                        readonly knownValues: ["top", "latest"];
                        readonly default: "latest";
                        readonly description: "Specifies the ranking order of results.";
                    };
                    readonly since: {
                        readonly type: "string";
                        readonly description: "Filter results for posts after the indicated datetime (inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYYY-MM-DD).";
                    };
                    readonly until: {
                        readonly type: "string";
                        readonly description: "Filter results for posts before the indicated datetime (not inclusive). Expected to use 'sortAt' timestamp, which may not match 'createdAt'. Can be a datetime, or just an ISO date (YYY-MM-DD).";
                    };
                    readonly mentions: {
                        readonly type: "string";
                        readonly format: "at-identifier";
                        readonly description: "Filter to posts which mention the given account. Handles are resolved to DID before query-time. Only matches rich-text facet mentions.";
                    };
                    readonly author: {
                        readonly type: "string";
                        readonly format: "at-identifier";
                        readonly description: "Filter to posts by the given account. Handles are resolved to DID before query-time.";
                    };
                    readonly lang: {
                        readonly type: "string";
                        readonly format: "language";
                        readonly description: "Filter to posts in the given language. Expected to be based on post language field, though server may override language detection.";
                    };
                    readonly domain: {
                        readonly type: "string";
                        readonly description: "Filter to posts with URLs (facet links or embeds) linking to the given domain (hostname). Server may apply hostname normalization.";
                    };
                    readonly url: {
                        readonly type: "string";
                        readonly format: "uri";
                        readonly description: "Filter to posts with links (facet links or embeds) pointing to this URL. Server may apply URL normalization or fuzzy matching.";
                    };
                    readonly tag: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly maxLength: 640;
                            readonly maxGraphemes: 64;
                        };
                        readonly description: "Filter to posts with the given tag (hashtag), based on rich-text facet or tag field. Do not include the hash (#) prefix. Multiple tags can be specified, with 'AND' matching.";
                    };
                    readonly viewer: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "DID of the account making the request (not included for public/unauthenticated queries). Used for 'from:me' queries.";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 25;
                    };
                    readonly cursor: {
                        readonly type: "string";
                        readonly description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set.";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["posts"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly hitsTotal: {
                            readonly type: "integer";
                            readonly description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.";
                        };
                        readonly posts: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.unspecced.defs#skeletonSearchPost";
                            };
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "BadQueryString";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.unspecced.searchStarterPacksSkeleton";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Backend Starter Pack search, returns only skeleton.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["q"];
                readonly properties: {
                    readonly q: {
                        readonly type: "string";
                        readonly description: "Search query string; syntax, phrase, boolean, and faceting is unspecified, but Lucene query syntax is recommended.";
                    };
                    readonly viewer: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "DID of the account making the request (not included for public/unauthenticated queries).";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 25;
                    };
                    readonly cursor: {
                        readonly type: "string";
                        readonly description: "Optional pagination mechanism; may not necessarily allow scrolling through entire result set.";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["starterPacks"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly hitsTotal: {
                            readonly type: "integer";
                            readonly description: "Count of search hits. Optional, may be rounded/truncated, and may not be possible to paginate through all hits.";
                        };
                        readonly starterPacks: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:app.bsky.unspecced.defs#skeletonSearchStarterPack";
                            };
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "BadQueryString";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.video.defs";
    readonly defs: {
        readonly jobStatus: {
            readonly type: "object";
            readonly required: ["jobId", "did", "state"];
            readonly properties: {
                readonly jobId: {
                    readonly type: "string";
                };
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly state: {
                    readonly type: "string";
                    readonly description: "The state of the video processing job. All values not listed as a known value indicate that the job is in process.";
                    readonly knownValues: ["JOB_STATE_COMPLETED", "JOB_STATE_FAILED"];
                };
                readonly progress: {
                    readonly type: "integer";
                    readonly minimum: 0;
                    readonly maximum: 100;
                    readonly description: "Progress within the current processing state.";
                };
                readonly blob: {
                    readonly type: "blob";
                };
                readonly error: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "string";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.video.getJobStatus";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get status details for a video processing job.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["jobId"];
                readonly properties: {
                    readonly jobId: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["jobStatus"];
                    readonly properties: {
                        readonly jobStatus: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.video.defs#jobStatus";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.video.getUploadLimits";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get video upload limits for the authenticated user.";
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["canUpload"];
                    readonly properties: {
                        readonly canUpload: {
                            readonly type: "boolean";
                        };
                        readonly remainingDailyVideos: {
                            readonly type: "integer";
                        };
                        readonly remainingDailyBytes: {
                            readonly type: "integer";
                        };
                        readonly message: {
                            readonly type: "string";
                        };
                        readonly error: {
                            readonly type: "string";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "app.bsky.video.uploadVideo";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Upload a video to be processed then stored on the PDS.";
            readonly input: {
                readonly encoding: "video/mp4";
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["jobStatus"];
                    readonly properties: {
                        readonly jobStatus: {
                            readonly type: "ref";
                            readonly ref: "lex:app.bsky.video.defs#jobStatus";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "chat.bsky.actor.declaration";
    readonly defs: {
        readonly main: {
            readonly type: "record";
            readonly description: "A declaration of a Bluesky chat account.";
            readonly key: "literal:self";
            readonly record: {
                readonly type: "object";
                readonly required: ["allowIncoming"];
                readonly properties: {
                    readonly allowIncoming: {
                        readonly type: "string";
                        readonly knownValues: ["all", "none", "following"];
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "chat.bsky.actor.defs";
    readonly defs: {
        readonly profileViewBasic: {
            readonly type: "object";
            readonly required: ["did", "handle"];
            readonly properties: {
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly handle: {
                    readonly type: "string";
                    readonly format: "handle";
                };
                readonly displayName: {
                    readonly type: "string";
                    readonly maxGraphemes: 64;
                    readonly maxLength: 640;
                };
                readonly avatar: {
                    readonly type: "string";
                    readonly format: "uri";
                };
                readonly associated: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#profileAssociated";
                };
                readonly viewer: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#viewerState";
                };
                readonly labels: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#label";
                    };
                };
                readonly chatDisabled: {
                    readonly type: "boolean";
                    readonly description: "Set to true when the actor cannot actively participate in converations";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "chat.bsky.actor.deleteAccount";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly properties: {};
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "chat.bsky.actor.exportAccountData";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly output: {
                readonly encoding: "application/jsonl";
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "chat.bsky.convo.defs";
    readonly defs: {
        readonly messageRef: {
            readonly type: "object";
            readonly required: ["did", "messageId", "convoId"];
            readonly properties: {
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly convoId: {
                    readonly type: "string";
                };
                readonly messageId: {
                    readonly type: "string";
                };
            };
        };
        readonly messageInput: {
            readonly type: "object";
            readonly required: ["text"];
            readonly properties: {
                readonly text: {
                    readonly type: "string";
                    readonly maxLength: 10000;
                    readonly maxGraphemes: 1000;
                };
                readonly facets: {
                    readonly type: "array";
                    readonly description: "Annotations of text (mentions, URLs, hashtags, etc)";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.richtext.facet";
                    };
                };
                readonly embed: {
                    readonly type: "union";
                    readonly refs: ["lex:app.bsky.embed.record"];
                };
            };
        };
        readonly messageView: {
            readonly type: "object";
            readonly required: ["id", "rev", "text", "sender", "sentAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly rev: {
                    readonly type: "string";
                };
                readonly text: {
                    readonly type: "string";
                    readonly maxLength: 10000;
                    readonly maxGraphemes: 1000;
                };
                readonly facets: {
                    readonly type: "array";
                    readonly description: "Annotations of text (mentions, URLs, hashtags, etc)";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:app.bsky.richtext.facet";
                    };
                };
                readonly embed: {
                    readonly type: "union";
                    readonly refs: ["lex:app.bsky.embed.record#view"];
                };
                readonly sender: {
                    readonly type: "ref";
                    readonly ref: "lex:chat.bsky.convo.defs#messageViewSender";
                };
                readonly sentAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
        readonly deletedMessageView: {
            readonly type: "object";
            readonly required: ["id", "rev", "sender", "sentAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly rev: {
                    readonly type: "string";
                };
                readonly sender: {
                    readonly type: "ref";
                    readonly ref: "lex:chat.bsky.convo.defs#messageViewSender";
                };
                readonly sentAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
        readonly messageViewSender: {
            readonly type: "object";
            readonly required: ["did"];
            readonly properties: {
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
            };
        };
        readonly convoView: {
            readonly type: "object";
            readonly required: ["id", "rev", "members", "muted", "unreadCount"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly rev: {
                    readonly type: "string";
                };
                readonly members: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:chat.bsky.actor.defs#profileViewBasic";
                    };
                };
                readonly lastMessage: {
                    readonly type: "union";
                    readonly refs: ["lex:chat.bsky.convo.defs#messageView", "lex:chat.bsky.convo.defs#deletedMessageView"];
                };
                readonly muted: {
                    readonly type: "boolean";
                };
                readonly opened: {
                    readonly type: "boolean";
                };
                readonly unreadCount: {
                    readonly type: "integer";
                };
            };
        };
        readonly logBeginConvo: {
            readonly type: "object";
            readonly required: ["rev", "convoId"];
            readonly properties: {
                readonly rev: {
                    readonly type: "string";
                };
                readonly convoId: {
                    readonly type: "string";
                };
            };
        };
        readonly logLeaveConvo: {
            readonly type: "object";
            readonly required: ["rev", "convoId"];
            readonly properties: {
                readonly rev: {
                    readonly type: "string";
                };
                readonly convoId: {
                    readonly type: "string";
                };
            };
        };
        readonly logCreateMessage: {
            readonly type: "object";
            readonly required: ["rev", "convoId", "message"];
            readonly properties: {
                readonly rev: {
                    readonly type: "string";
                };
                readonly convoId: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "union";
                    readonly refs: ["lex:chat.bsky.convo.defs#messageView", "lex:chat.bsky.convo.defs#deletedMessageView"];
                };
            };
        };
        readonly logDeleteMessage: {
            readonly type: "object";
            readonly required: ["rev", "convoId", "message"];
            readonly properties: {
                readonly rev: {
                    readonly type: "string";
                };
                readonly convoId: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "union";
                    readonly refs: ["lex:chat.bsky.convo.defs#messageView", "lex:chat.bsky.convo.defs#deletedMessageView"];
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "chat.bsky.convo.deleteMessageForSelf";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["convoId", "messageId"];
                    readonly properties: {
                        readonly convoId: {
                            readonly type: "string";
                        };
                        readonly messageId: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "ref";
                    readonly ref: "lex:chat.bsky.convo.defs#deletedMessageView";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "chat.bsky.convo.getConvo";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["convoId"];
                readonly properties: {
                    readonly convoId: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["convo"];
                    readonly properties: {
                        readonly convo: {
                            readonly type: "ref";
                            readonly ref: "lex:chat.bsky.convo.defs#convoView";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "chat.bsky.convo.getConvoForMembers";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["members"];
                readonly properties: {
                    readonly members: {
                        readonly type: "array";
                        readonly minLength: 1;
                        readonly maxLength: 10;
                        readonly items: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["convo"];
                    readonly properties: {
                        readonly convo: {
                            readonly type: "ref";
                            readonly ref: "lex:chat.bsky.convo.defs#convoView";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "chat.bsky.convo.getLog";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly parameters: {
                readonly type: "params";
                readonly required: [];
                readonly properties: {
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["logs"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly logs: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "union";
                                readonly refs: ["lex:chat.bsky.convo.defs#logBeginConvo", "lex:chat.bsky.convo.defs#logLeaveConvo", "lex:chat.bsky.convo.defs#logCreateMessage", "lex:chat.bsky.convo.defs#logDeleteMessage"];
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "chat.bsky.convo.getMessages";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["convoId"];
                readonly properties: {
                    readonly convoId: {
                        readonly type: "string";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["messages"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly messages: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "union";
                                readonly refs: ["lex:chat.bsky.convo.defs#messageView", "lex:chat.bsky.convo.defs#deletedMessageView"];
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "chat.bsky.convo.leaveConvo";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["convoId"];
                    readonly properties: {
                        readonly convoId: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["convoId", "rev"];
                    readonly properties: {
                        readonly convoId: {
                            readonly type: "string";
                        };
                        readonly rev: {
                            readonly type: "string";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "chat.bsky.convo.listConvos";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["convos"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly convos: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:chat.bsky.convo.defs#convoView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "chat.bsky.convo.muteConvo";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["convoId"];
                    readonly properties: {
                        readonly convoId: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["convo"];
                    readonly properties: {
                        readonly convo: {
                            readonly type: "ref";
                            readonly ref: "lex:chat.bsky.convo.defs#convoView";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "chat.bsky.convo.sendMessage";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["convoId", "message"];
                    readonly properties: {
                        readonly convoId: {
                            readonly type: "string";
                        };
                        readonly message: {
                            readonly type: "ref";
                            readonly ref: "lex:chat.bsky.convo.defs#messageInput";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "ref";
                    readonly ref: "lex:chat.bsky.convo.defs#messageView";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "chat.bsky.convo.sendMessageBatch";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["items"];
                    readonly properties: {
                        readonly items: {
                            readonly type: "array";
                            readonly maxLength: 100;
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:chat.bsky.convo.sendMessageBatch#batchItem";
                            };
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["items"];
                    readonly properties: {
                        readonly items: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:chat.bsky.convo.defs#messageView";
                            };
                        };
                    };
                };
            };
        };
        readonly batchItem: {
            readonly type: "object";
            readonly required: ["convoId", "message"];
            readonly properties: {
                readonly convoId: {
                    readonly type: "string";
                };
                readonly message: {
                    readonly type: "ref";
                    readonly ref: "lex:chat.bsky.convo.defs#messageInput";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "chat.bsky.convo.unmuteConvo";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["convoId"];
                    readonly properties: {
                        readonly convoId: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["convo"];
                    readonly properties: {
                        readonly convo: {
                            readonly type: "ref";
                            readonly ref: "lex:chat.bsky.convo.defs#convoView";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "chat.bsky.convo.updateRead";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["convoId"];
                    readonly properties: {
                        readonly convoId: {
                            readonly type: "string";
                        };
                        readonly messageId: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["convo"];
                    readonly properties: {
                        readonly convo: {
                            readonly type: "ref";
                            readonly ref: "lex:chat.bsky.convo.defs#convoView";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "chat.bsky.moderation.getActorMetadata";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["actor"];
                readonly properties: {
                    readonly actor: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["day", "month", "all"];
                    readonly properties: {
                        readonly day: {
                            readonly type: "ref";
                            readonly ref: "lex:chat.bsky.moderation.getActorMetadata#metadata";
                        };
                        readonly month: {
                            readonly type: "ref";
                            readonly ref: "lex:chat.bsky.moderation.getActorMetadata#metadata";
                        };
                        readonly all: {
                            readonly type: "ref";
                            readonly ref: "lex:chat.bsky.moderation.getActorMetadata#metadata";
                        };
                    };
                };
            };
        };
        readonly metadata: {
            readonly type: "object";
            readonly required: ["messagesSent", "messagesReceived", "convos", "convosStarted"];
            readonly properties: {
                readonly messagesSent: {
                    readonly type: "integer";
                };
                readonly messagesReceived: {
                    readonly type: "integer";
                };
                readonly convos: {
                    readonly type: "integer";
                };
                readonly convosStarted: {
                    readonly type: "integer";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "chat.bsky.moderation.getMessageContext";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["messageId"];
                readonly properties: {
                    readonly convoId: {
                        readonly type: "string";
                        readonly description: "Conversation that the message is from. NOTE: this field will eventually be required.";
                    };
                    readonly messageId: {
                        readonly type: "string";
                    };
                    readonly before: {
                        readonly type: "integer";
                        readonly default: 5;
                    };
                    readonly after: {
                        readonly type: "integer";
                        readonly default: 5;
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["messages"];
                    readonly properties: {
                        readonly messages: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "union";
                                readonly refs: ["lex:chat.bsky.convo.defs#messageView", "lex:chat.bsky.convo.defs#deletedMessageView"];
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "chat.bsky.moderation.updateActorAccess";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["actor", "allowAccess"];
                    readonly properties: {
                        readonly actor: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly allowAccess: {
                            readonly type: "boolean";
                        };
                        readonly ref: {
                            readonly type: "string";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.communication.createTemplate";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Administrative action to create a new, re-usable communication (email for now) template.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["subject", "contentMarkdown", "name"];
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the template.";
                        };
                        readonly contentMarkdown: {
                            readonly type: "string";
                            readonly description: "Content of the template, markdown supported, can contain variable placeholders.";
                        };
                        readonly subject: {
                            readonly type: "string";
                            readonly description: "Subject of the message, used in emails.";
                        };
                        readonly lang: {
                            readonly type: "string";
                            readonly format: "language";
                            readonly description: "Message language.";
                        };
                        readonly createdBy: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "DID of the user who is creating the template.";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.communication.defs#templateView";
                };
            };
            readonly errors: [{
                readonly name: "DuplicateTemplateName";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.communication.defs";
    readonly defs: {
        readonly templateView: {
            readonly type: "object";
            readonly required: ["id", "name", "contentMarkdown", "disabled", "lastUpdatedBy", "createdAt", "updatedAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "string";
                };
                readonly name: {
                    readonly type: "string";
                    readonly description: "Name of the template.";
                };
                readonly subject: {
                    readonly type: "string";
                    readonly description: "Content of the template, can contain markdown and variable placeholders.";
                };
                readonly contentMarkdown: {
                    readonly type: "string";
                    readonly description: "Subject of the message, used in emails.";
                };
                readonly disabled: {
                    readonly type: "boolean";
                };
                readonly lang: {
                    readonly type: "string";
                    readonly format: "language";
                    readonly description: "Message language.";
                };
                readonly lastUpdatedBy: {
                    readonly type: "string";
                    readonly format: "did";
                    readonly description: "DID of the user who last updated the template.";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.communication.deleteTemplate";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Delete a communication template.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["id"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.communication.listTemplates";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get list of all communication templates.";
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["communicationTemplates"];
                    readonly properties: {
                        readonly communicationTemplates: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:tools.ozone.communication.defs#templateView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.communication.updateTemplate";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Administrative action to update an existing communication template. Allows passing partial fields to patch specific fields only.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["id"];
                    readonly properties: {
                        readonly id: {
                            readonly type: "string";
                            readonly description: "ID of the template to be updated.";
                        };
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the template.";
                        };
                        readonly lang: {
                            readonly type: "string";
                            readonly format: "language";
                            readonly description: "Message language.";
                        };
                        readonly contentMarkdown: {
                            readonly type: "string";
                            readonly description: "Content of the template, markdown supported, can contain variable placeholders.";
                        };
                        readonly subject: {
                            readonly type: "string";
                            readonly description: "Subject of the message, used in emails.";
                        };
                        readonly updatedBy: {
                            readonly type: "string";
                            readonly format: "did";
                            readonly description: "DID of the user who is updating the template.";
                        };
                        readonly disabled: {
                            readonly type: "boolean";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.communication.defs#templateView";
                };
            };
            readonly errors: [{
                readonly name: "DuplicateTemplateName";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.moderation.defs";
    readonly defs: {
        readonly modEventView: {
            readonly type: "object";
            readonly required: ["id", "event", "subject", "subjectBlobCids", "createdBy", "createdAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly event: {
                    readonly type: "union";
                    readonly refs: ["lex:tools.ozone.moderation.defs#modEventTakedown", "lex:tools.ozone.moderation.defs#modEventReverseTakedown", "lex:tools.ozone.moderation.defs#modEventComment", "lex:tools.ozone.moderation.defs#modEventReport", "lex:tools.ozone.moderation.defs#modEventLabel", "lex:tools.ozone.moderation.defs#modEventAcknowledge", "lex:tools.ozone.moderation.defs#modEventEscalate", "lex:tools.ozone.moderation.defs#modEventMute", "lex:tools.ozone.moderation.defs#modEventUnmute", "lex:tools.ozone.moderation.defs#modEventMuteReporter", "lex:tools.ozone.moderation.defs#modEventUnmuteReporter", "lex:tools.ozone.moderation.defs#modEventEmail", "lex:tools.ozone.moderation.defs#modEventResolveAppeal", "lex:tools.ozone.moderation.defs#modEventDivert", "lex:tools.ozone.moderation.defs#modEventTag", "lex:tools.ozone.moderation.defs#accountEvent", "lex:tools.ozone.moderation.defs#identityEvent", "lex:tools.ozone.moderation.defs#recordEvent", "lex:tools.ozone.moderation.defs#modEventPriorityScore"];
                };
                readonly subject: {
                    readonly type: "union";
                    readonly refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef", "lex:chat.bsky.convo.defs#messageRef"];
                };
                readonly subjectBlobCids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly createdBy: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly creatorHandle: {
                    readonly type: "string";
                };
                readonly subjectHandle: {
                    readonly type: "string";
                };
            };
        };
        readonly modEventViewDetail: {
            readonly type: "object";
            readonly required: ["id", "event", "subject", "subjectBlobs", "createdBy", "createdAt"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly event: {
                    readonly type: "union";
                    readonly refs: ["lex:tools.ozone.moderation.defs#modEventTakedown", "lex:tools.ozone.moderation.defs#modEventReverseTakedown", "lex:tools.ozone.moderation.defs#modEventComment", "lex:tools.ozone.moderation.defs#modEventReport", "lex:tools.ozone.moderation.defs#modEventLabel", "lex:tools.ozone.moderation.defs#modEventAcknowledge", "lex:tools.ozone.moderation.defs#modEventEscalate", "lex:tools.ozone.moderation.defs#modEventMute", "lex:tools.ozone.moderation.defs#modEventUnmute", "lex:tools.ozone.moderation.defs#modEventMuteReporter", "lex:tools.ozone.moderation.defs#modEventUnmuteReporter", "lex:tools.ozone.moderation.defs#modEventEmail", "lex:tools.ozone.moderation.defs#modEventResolveAppeal", "lex:tools.ozone.moderation.defs#modEventDivert", "lex:tools.ozone.moderation.defs#modEventTag", "lex:tools.ozone.moderation.defs#accountEvent", "lex:tools.ozone.moderation.defs#identityEvent", "lex:tools.ozone.moderation.defs#recordEvent", "lex:tools.ozone.moderation.defs#modEventPriorityScore"];
                };
                readonly subject: {
                    readonly type: "union";
                    readonly refs: ["lex:tools.ozone.moderation.defs#repoView", "lex:tools.ozone.moderation.defs#repoViewNotFound", "lex:tools.ozone.moderation.defs#recordView", "lex:tools.ozone.moderation.defs#recordViewNotFound"];
                };
                readonly subjectBlobs: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.moderation.defs#blobView";
                    };
                };
                readonly createdBy: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
        readonly subjectStatusView: {
            readonly type: "object";
            readonly required: ["id", "subject", "createdAt", "updatedAt", "reviewState"];
            readonly properties: {
                readonly id: {
                    readonly type: "integer";
                };
                readonly subject: {
                    readonly type: "union";
                    readonly refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef"];
                };
                readonly hosting: {
                    readonly type: "union";
                    readonly refs: ["lex:tools.ozone.moderation.defs#accountHosting", "lex:tools.ozone.moderation.defs#recordHosting"];
                };
                readonly subjectBlobCids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                };
                readonly subjectRepoHandle: {
                    readonly type: "string";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                    readonly description: "Timestamp referencing when the last update was made to the moderation status of the subject";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                    readonly description: "Timestamp referencing the first moderation status impacting event was emitted on the subject";
                };
                readonly reviewState: {
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.moderation.defs#subjectReviewState";
                };
                readonly comment: {
                    readonly type: "string";
                    readonly description: "Sticky comment on the subject.";
                };
                readonly priorityScore: {
                    readonly type: "integer";
                    readonly description: "Numeric value representing the level of priority. Higher score means higher priority.";
                    readonly minimum: 0;
                    readonly maximum: 100;
                };
                readonly muteUntil: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly muteReportingUntil: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly lastReviewedBy: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly lastReviewedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly lastReportedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly lastAppealedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                    readonly description: "Timestamp referencing when the author of the subject appealed a moderation action";
                };
                readonly takendown: {
                    readonly type: "boolean";
                };
                readonly appealed: {
                    readonly type: "boolean";
                    readonly description: "True indicates that the a previously taken moderator action was appealed against, by the author of the content. False indicates last appeal was resolved by moderators.";
                };
                readonly suspendUntil: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly tags: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly accountStats: {
                    readonly description: "Statistics related to the account subject";
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.moderation.defs#accountStats";
                };
                readonly recordsStats: {
                    readonly description: "Statistics related to the record subjects authored by the subject's account";
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.moderation.defs#recordsStats";
                };
            };
        };
        readonly accountStats: {
            readonly description: "Statistics about a particular account subject";
            readonly type: "object";
            readonly properties: {
                readonly reportCount: {
                    readonly description: "Total number of reports on the account";
                    readonly type: "integer";
                };
                readonly appealCount: {
                    readonly description: "Total number of appeals against a moderation action on the account";
                    readonly type: "integer";
                };
                readonly suspendCount: {
                    readonly description: "Number of times the account was suspended";
                    readonly type: "integer";
                };
                readonly escalateCount: {
                    readonly description: "Number of times the account was escalated";
                    readonly type: "integer";
                };
                readonly takedownCount: {
                    readonly description: "Number of times the account was taken down";
                    readonly type: "integer";
                };
            };
        };
        readonly recordsStats: {
            readonly description: "Statistics about a set of record subject items";
            readonly type: "object";
            readonly properties: {
                readonly totalReports: {
                    readonly description: "Cumulative sum of the number of reports on the items in the set";
                    readonly type: "integer";
                };
                readonly reportedCount: {
                    readonly description: "Number of items that were reported at least once";
                    readonly type: "integer";
                };
                readonly escalatedCount: {
                    readonly description: "Number of items that were escalated at least once";
                    readonly type: "integer";
                };
                readonly appealedCount: {
                    readonly description: "Number of items that were appealed at least once";
                    readonly type: "integer";
                };
                readonly subjectCount: {
                    readonly description: "Total number of item in the set";
                    readonly type: "integer";
                };
                readonly pendingCount: {
                    readonly description: "Number of item currently in \"reviewOpen\" or \"reviewEscalated\" state";
                    readonly type: "integer";
                };
                readonly processedCount: {
                    readonly description: "Number of item currently in \"reviewNone\" or \"reviewClosed\" state";
                    readonly type: "integer";
                };
                readonly takendownCount: {
                    readonly description: "Number of item currently taken down";
                    readonly type: "integer";
                };
            };
        };
        readonly subjectReviewState: {
            readonly type: "string";
            readonly knownValues: ["lex:tools.ozone.moderation.defs#reviewOpen", "lex:tools.ozone.moderation.defs#reviewEscalated", "lex:tools.ozone.moderation.defs#reviewClosed", "lex:tools.ozone.moderation.defs#reviewNone"];
        };
        readonly reviewOpen: {
            readonly type: "token";
            readonly description: "Moderator review status of a subject: Open. Indicates that the subject needs to be reviewed by a moderator";
        };
        readonly reviewEscalated: {
            readonly type: "token";
            readonly description: "Moderator review status of a subject: Escalated. Indicates that the subject was escalated for review by a moderator";
        };
        readonly reviewClosed: {
            readonly type: "token";
            readonly description: "Moderator review status of a subject: Closed. Indicates that the subject was already reviewed and resolved by a moderator";
        };
        readonly reviewNone: {
            readonly type: "token";
            readonly description: "Moderator review status of a subject: Unnecessary. Indicates that the subject does not need a review at the moment but there is probably some moderation related metadata available for it";
        };
        readonly modEventTakedown: {
            readonly type: "object";
            readonly description: "Take down a subject permanently or temporarily";
            readonly properties: {
                readonly comment: {
                    readonly type: "string";
                };
                readonly durationInHours: {
                    readonly type: "integer";
                    readonly description: "Indicates how long the takedown should be in effect before automatically expiring.";
                };
                readonly acknowledgeAccountSubjects: {
                    readonly type: "boolean";
                    readonly description: "If true, all other reports on content authored by this account will be resolved (acknowledged).";
                };
                readonly policies: {
                    readonly type: "array";
                    readonly maxLength: 5;
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly description: "Names/Keywords of the policies that drove the decision.";
                };
            };
        };
        readonly modEventReverseTakedown: {
            readonly type: "object";
            readonly description: "Revert take down action on a subject";
            readonly properties: {
                readonly comment: {
                    readonly type: "string";
                    readonly description: "Describe reasoning behind the reversal.";
                };
            };
        };
        readonly modEventResolveAppeal: {
            readonly type: "object";
            readonly description: "Resolve appeal on a subject";
            readonly properties: {
                readonly comment: {
                    readonly type: "string";
                    readonly description: "Describe resolution.";
                };
            };
        };
        readonly modEventComment: {
            readonly type: "object";
            readonly description: "Add a comment to a subject";
            readonly required: ["comment"];
            readonly properties: {
                readonly comment: {
                    readonly type: "string";
                };
                readonly sticky: {
                    readonly type: "boolean";
                    readonly description: "Make the comment persistent on the subject";
                };
            };
        };
        readonly modEventReport: {
            readonly type: "object";
            readonly description: "Report a subject";
            readonly required: ["reportType"];
            readonly properties: {
                readonly comment: {
                    readonly type: "string";
                };
                readonly isReporterMuted: {
                    readonly type: "boolean";
                    readonly description: "Set to true if the reporter was muted from reporting at the time of the event. These reports won't impact the reviewState of the subject.";
                };
                readonly reportType: {
                    readonly type: "ref";
                    readonly ref: "lex:com.atproto.moderation.defs#reasonType";
                };
            };
        };
        readonly modEventLabel: {
            readonly type: "object";
            readonly description: "Apply/Negate labels on a subject";
            readonly required: ["createLabelVals", "negateLabelVals"];
            readonly properties: {
                readonly comment: {
                    readonly type: "string";
                };
                readonly createLabelVals: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly negateLabelVals: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                };
                readonly durationInHours: {
                    readonly type: "integer";
                    readonly description: "Indicates how long the label will remain on the subject. Only applies on labels that are being added.";
                };
            };
        };
        readonly modEventPriorityScore: {
            readonly type: "object";
            readonly description: "Set priority score of the subject. Higher score means higher priority.";
            readonly required: ["score"];
            readonly properties: {
                readonly comment: {
                    readonly type: "string";
                };
                readonly score: {
                    readonly type: "integer";
                    readonly minimum: 0;
                    readonly maximum: 100;
                };
            };
        };
        readonly modEventAcknowledge: {
            readonly type: "object";
            readonly properties: {
                readonly comment: {
                    readonly type: "string";
                };
                readonly acknowledgeAccountSubjects: {
                    readonly type: "boolean";
                    readonly description: "If true, all other reports on content authored by this account will be resolved (acknowledged).";
                };
            };
        };
        readonly modEventEscalate: {
            readonly type: "object";
            readonly properties: {
                readonly comment: {
                    readonly type: "string";
                };
            };
        };
        readonly modEventMute: {
            readonly type: "object";
            readonly description: "Mute incoming reports on a subject";
            readonly required: ["durationInHours"];
            readonly properties: {
                readonly comment: {
                    readonly type: "string";
                };
                readonly durationInHours: {
                    readonly type: "integer";
                    readonly description: "Indicates how long the subject should remain muted.";
                };
            };
        };
        readonly modEventUnmute: {
            readonly type: "object";
            readonly description: "Unmute action on a subject";
            readonly properties: {
                readonly comment: {
                    readonly type: "string";
                    readonly description: "Describe reasoning behind the reversal.";
                };
            };
        };
        readonly modEventMuteReporter: {
            readonly type: "object";
            readonly description: "Mute incoming reports from an account";
            readonly properties: {
                readonly comment: {
                    readonly type: "string";
                };
                readonly durationInHours: {
                    readonly type: "integer";
                    readonly description: "Indicates how long the account should remain muted. Falsy value here means a permanent mute.";
                };
            };
        };
        readonly modEventUnmuteReporter: {
            readonly type: "object";
            readonly description: "Unmute incoming reports from an account";
            readonly properties: {
                readonly comment: {
                    readonly type: "string";
                    readonly description: "Describe reasoning behind the reversal.";
                };
            };
        };
        readonly modEventEmail: {
            readonly type: "object";
            readonly description: "Keep a log of outgoing email to a user";
            readonly required: ["subjectLine"];
            readonly properties: {
                readonly subjectLine: {
                    readonly type: "string";
                    readonly description: "The subject line of the email sent to the user.";
                };
                readonly content: {
                    readonly type: "string";
                    readonly description: "The content of the email sent to the user.";
                };
                readonly comment: {
                    readonly type: "string";
                    readonly description: "Additional comment about the outgoing comm.";
                };
            };
        };
        readonly modEventDivert: {
            readonly type: "object";
            readonly description: "Divert a record's blobs to a 3rd party service for further scanning/tagging";
            readonly properties: {
                readonly comment: {
                    readonly type: "string";
                };
            };
        };
        readonly modEventTag: {
            readonly type: "object";
            readonly description: "Add/Remove a tag on a subject";
            readonly required: ["add", "remove"];
            readonly properties: {
                readonly add: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly description: "Tags to be added to the subject. If already exists, won't be duplicated.";
                };
                readonly remove: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                    };
                    readonly description: "Tags to be removed to the subject. Ignores a tag If it doesn't exist, won't be duplicated.";
                };
                readonly comment: {
                    readonly type: "string";
                    readonly description: "Additional comment about added/removed tags.";
                };
            };
        };
        readonly accountEvent: {
            readonly type: "object";
            readonly description: "Logs account status related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.";
            readonly required: ["timestamp", "active"];
            readonly properties: {
                readonly comment: {
                    readonly type: "string";
                };
                readonly active: {
                    readonly type: "boolean";
                    readonly description: "Indicates that the account has a repository which can be fetched from the host that emitted this event.";
                };
                readonly status: {
                    readonly type: "string";
                    readonly knownValues: ["unknown", "deactivated", "deleted", "takendown", "suspended", "tombstoned"];
                };
                readonly timestamp: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
        readonly identityEvent: {
            readonly type: "object";
            readonly description: "Logs identity related events on a repo subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.";
            readonly required: ["timestamp"];
            readonly properties: {
                readonly comment: {
                    readonly type: "string";
                };
                readonly handle: {
                    readonly type: "string";
                    readonly format: "handle";
                };
                readonly pdsHost: {
                    readonly type: "string";
                    readonly format: "uri";
                };
                readonly tombstone: {
                    readonly type: "boolean";
                };
                readonly timestamp: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
        readonly recordEvent: {
            readonly type: "object";
            readonly description: "Logs lifecycle event on a record subject. Normally captured by automod from the firehose and emitted to ozone for historical tracking.";
            readonly required: ["timestamp", "op"];
            readonly properties: {
                readonly comment: {
                    readonly type: "string";
                };
                readonly op: {
                    readonly type: "string";
                    readonly knownValues: ["create", "update", "delete"];
                };
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly timestamp: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
        readonly repoView: {
            readonly type: "object";
            readonly required: ["did", "handle", "relatedRecords", "indexedAt", "moderation"];
            readonly properties: {
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly handle: {
                    readonly type: "string";
                    readonly format: "handle";
                };
                readonly email: {
                    readonly type: "string";
                };
                readonly relatedRecords: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "unknown";
                    };
                };
                readonly indexedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly moderation: {
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.moderation.defs#moderation";
                };
                readonly invitedBy: {
                    readonly type: "ref";
                    readonly ref: "lex:com.atproto.server.defs#inviteCode";
                };
                readonly invitesDisabled: {
                    readonly type: "boolean";
                };
                readonly inviteNote: {
                    readonly type: "string";
                };
                readonly deactivatedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly threatSignatures: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.admin.defs#threatSignature";
                    };
                };
            };
        };
        readonly repoViewDetail: {
            readonly type: "object";
            readonly required: ["did", "handle", "relatedRecords", "indexedAt", "moderation"];
            readonly properties: {
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly handle: {
                    readonly type: "string";
                    readonly format: "handle";
                };
                readonly email: {
                    readonly type: "string";
                };
                readonly relatedRecords: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "unknown";
                    };
                };
                readonly indexedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly moderation: {
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.moderation.defs#moderationDetail";
                };
                readonly labels: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#label";
                    };
                };
                readonly invitedBy: {
                    readonly type: "ref";
                    readonly ref: "lex:com.atproto.server.defs#inviteCode";
                };
                readonly invites: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.server.defs#inviteCode";
                    };
                };
                readonly invitesDisabled: {
                    readonly type: "boolean";
                };
                readonly inviteNote: {
                    readonly type: "string";
                };
                readonly emailConfirmedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly deactivatedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly threatSignatures: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.admin.defs#threatSignature";
                    };
                };
            };
        };
        readonly repoViewNotFound: {
            readonly type: "object";
            readonly required: ["did"];
            readonly properties: {
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
            };
        };
        readonly recordView: {
            readonly type: "object";
            readonly required: ["uri", "cid", "value", "blobCids", "indexedAt", "moderation", "repo"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly value: {
                    readonly type: "unknown";
                };
                readonly blobCids: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                };
                readonly indexedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly moderation: {
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.moderation.defs#moderation";
                };
                readonly repo: {
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.moderation.defs#repoView";
                };
            };
        };
        readonly recordViewDetail: {
            readonly type: "object";
            readonly required: ["uri", "cid", "value", "blobs", "indexedAt", "moderation", "repo"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly value: {
                    readonly type: "unknown";
                };
                readonly blobs: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.moderation.defs#blobView";
                    };
                };
                readonly labels: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:com.atproto.label.defs#label";
                    };
                };
                readonly indexedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly moderation: {
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.moderation.defs#moderationDetail";
                };
                readonly repo: {
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.moderation.defs#repoView";
                };
            };
        };
        readonly recordViewNotFound: {
            readonly type: "object";
            readonly required: ["uri"];
            readonly properties: {
                readonly uri: {
                    readonly type: "string";
                    readonly format: "at-uri";
                };
            };
        };
        readonly moderation: {
            readonly type: "object";
            readonly properties: {
                readonly subjectStatus: {
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.moderation.defs#subjectStatusView";
                };
            };
        };
        readonly moderationDetail: {
            readonly type: "object";
            readonly properties: {
                readonly subjectStatus: {
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.moderation.defs#subjectStatusView";
                };
            };
        };
        readonly blobView: {
            readonly type: "object";
            readonly required: ["cid", "mimeType", "size", "createdAt"];
            readonly properties: {
                readonly cid: {
                    readonly type: "string";
                    readonly format: "cid";
                };
                readonly mimeType: {
                    readonly type: "string";
                };
                readonly size: {
                    readonly type: "integer";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly details: {
                    readonly type: "union";
                    readonly refs: ["lex:tools.ozone.moderation.defs#imageDetails", "lex:tools.ozone.moderation.defs#videoDetails"];
                };
                readonly moderation: {
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.moderation.defs#moderation";
                };
            };
        };
        readonly imageDetails: {
            readonly type: "object";
            readonly required: ["width", "height"];
            readonly properties: {
                readonly width: {
                    readonly type: "integer";
                };
                readonly height: {
                    readonly type: "integer";
                };
            };
        };
        readonly videoDetails: {
            readonly type: "object";
            readonly required: ["width", "height", "length"];
            readonly properties: {
                readonly width: {
                    readonly type: "integer";
                };
                readonly height: {
                    readonly type: "integer";
                };
                readonly length: {
                    readonly type: "integer";
                };
            };
        };
        readonly accountHosting: {
            readonly type: "object";
            readonly required: ["status"];
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly knownValues: ["takendown", "suspended", "deleted", "deactivated", "unknown"];
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly deletedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly deactivatedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly reactivatedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
        readonly recordHosting: {
            readonly type: "object";
            readonly required: ["status"];
            readonly properties: {
                readonly status: {
                    readonly type: "string";
                    readonly knownValues: ["deleted", "unknown"];
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly deletedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.moderation.emitEvent";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Take a moderation action on an actor.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["event", "subject", "createdBy"];
                    readonly properties: {
                        readonly event: {
                            readonly type: "union";
                            readonly refs: ["lex:tools.ozone.moderation.defs#modEventTakedown", "lex:tools.ozone.moderation.defs#modEventAcknowledge", "lex:tools.ozone.moderation.defs#modEventEscalate", "lex:tools.ozone.moderation.defs#modEventComment", "lex:tools.ozone.moderation.defs#modEventLabel", "lex:tools.ozone.moderation.defs#modEventReport", "lex:tools.ozone.moderation.defs#modEventMute", "lex:tools.ozone.moderation.defs#modEventUnmute", "lex:tools.ozone.moderation.defs#modEventMuteReporter", "lex:tools.ozone.moderation.defs#modEventUnmuteReporter", "lex:tools.ozone.moderation.defs#modEventReverseTakedown", "lex:tools.ozone.moderation.defs#modEventResolveAppeal", "lex:tools.ozone.moderation.defs#modEventEmail", "lex:tools.ozone.moderation.defs#modEventTag", "lex:tools.ozone.moderation.defs#accountEvent", "lex:tools.ozone.moderation.defs#identityEvent", "lex:tools.ozone.moderation.defs#recordEvent", "lex:tools.ozone.moderation.defs#modEventPriorityScore"];
                        };
                        readonly subject: {
                            readonly type: "union";
                            readonly refs: ["lex:com.atproto.admin.defs#repoRef", "lex:com.atproto.repo.strongRef"];
                        };
                        readonly subjectBlobCids: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                                readonly format: "cid";
                            };
                        };
                        readonly createdBy: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.moderation.defs#modEventView";
                };
            };
            readonly errors: [{
                readonly name: "SubjectHasAction";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.moderation.getEvent";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get details about a moderation event.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["id"];
                readonly properties: {
                    readonly id: {
                        readonly type: "integer";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.moderation.defs#modEventViewDetail";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.moderation.getRecord";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get details about a record.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["uri"];
                readonly properties: {
                    readonly uri: {
                        readonly type: "string";
                        readonly format: "at-uri";
                    };
                    readonly cid: {
                        readonly type: "string";
                        readonly format: "cid";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.moderation.defs#recordViewDetail";
                };
            };
            readonly errors: [{
                readonly name: "RecordNotFound";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.moderation.getRecords";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get details about some records.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["uris"];
                readonly properties: {
                    readonly uris: {
                        readonly type: "array";
                        readonly maxLength: 100;
                        readonly items: {
                            readonly type: "string";
                            readonly format: "at-uri";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["records"];
                    readonly properties: {
                        readonly records: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "union";
                                readonly refs: ["lex:tools.ozone.moderation.defs#recordViewDetail", "lex:tools.ozone.moderation.defs#recordViewNotFound"];
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.moderation.getRepo";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get details about a repository.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["did"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.moderation.defs#repoViewDetail";
                };
            };
            readonly errors: [{
                readonly name: "RepoNotFound";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.moderation.getRepos";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get details about some repositories.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["dids"];
                readonly properties: {
                    readonly dids: {
                        readonly type: "array";
                        readonly maxLength: 100;
                        readonly items: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["repos"];
                    readonly properties: {
                        readonly repos: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "union";
                                readonly refs: ["lex:tools.ozone.moderation.defs#repoViewDetail", "lex:tools.ozone.moderation.defs#repoViewNotFound"];
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.moderation.queryEvents";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "List moderation events related to a subject.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly types: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "The types of events (fully qualified string in the format of tools.ozone.moderation.defs#modEvent<name>) to filter by. If not specified, all events are returned.";
                    };
                    readonly createdBy: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly sortDirection: {
                        readonly type: "string";
                        readonly default: "desc";
                        readonly enum: ["asc", "desc"];
                        readonly description: "Sort direction for the events. Defaults to descending order of created at timestamp.";
                    };
                    readonly createdAfter: {
                        readonly type: "string";
                        readonly format: "datetime";
                        readonly description: "Retrieve events created after a given timestamp";
                    };
                    readonly createdBefore: {
                        readonly type: "string";
                        readonly format: "datetime";
                        readonly description: "Retrieve events created before a given timestamp";
                    };
                    readonly subject: {
                        readonly type: "string";
                        readonly format: "uri";
                    };
                    readonly collections: {
                        readonly type: "array";
                        readonly maxLength: 20;
                        readonly description: "If specified, only events where the subject belongs to the given collections will be returned. When subjectType is set to 'account', this will be ignored.";
                        readonly items: {
                            readonly type: "string";
                            readonly format: "nsid";
                        };
                    };
                    readonly subjectType: {
                        readonly type: "string";
                        readonly description: "If specified, only events where the subject is of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.";
                        readonly knownValues: ["account", "record"];
                    };
                    readonly includeAllUserRecords: {
                        readonly type: "boolean";
                        readonly default: false;
                        readonly description: "If true, events on all record types (posts, lists, profile etc.) or records from given 'collections' param, owned by the did are returned.";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly hasComment: {
                        readonly type: "boolean";
                        readonly description: "If true, only events with comments are returned";
                    };
                    readonly comment: {
                        readonly type: "string";
                        readonly description: "If specified, only events with comments containing the keyword are returned. Apply || separator to use multiple keywords and match using OR condition.";
                    };
                    readonly addedLabels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "If specified, only events where all of these labels were added are returned";
                    };
                    readonly removedLabels: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "If specified, only events where all of these labels were removed are returned";
                    };
                    readonly addedTags: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "If specified, only events where all of these tags were added are returned";
                    };
                    readonly removedTags: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "If specified, only events where all of these tags were removed are returned";
                    };
                    readonly reportTypes: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly policies: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly description: "If specified, only events where the action policies match any of the given policies are returned";
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["events"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly events: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:tools.ozone.moderation.defs#modEventView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.moderation.queryStatuses";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "View moderation statuses of subjects (record or repo).";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly queueCount: {
                        readonly type: "integer";
                        readonly description: "Number of queues being used by moderators. Subjects will be split among all queues.";
                    };
                    readonly queueIndex: {
                        readonly type: "integer";
                        readonly description: "Index of the queue to fetch subjects from. Works only when queueCount value is specified.";
                    };
                    readonly queueSeed: {
                        readonly type: "string";
                        readonly description: "A seeder to shuffle/balance the queue items.";
                    };
                    readonly includeAllUserRecords: {
                        readonly type: "boolean";
                        readonly description: "All subjects, or subjects from given 'collections' param, belonging to the account specified in the 'subject' param will be returned.";
                    };
                    readonly subject: {
                        readonly type: "string";
                        readonly format: "uri";
                        readonly description: "The subject to get the status for.";
                    };
                    readonly comment: {
                        readonly type: "string";
                        readonly description: "Search subjects by keyword from comments";
                    };
                    readonly reportedAfter: {
                        readonly type: "string";
                        readonly format: "datetime";
                        readonly description: "Search subjects reported after a given timestamp";
                    };
                    readonly reportedBefore: {
                        readonly type: "string";
                        readonly format: "datetime";
                        readonly description: "Search subjects reported before a given timestamp";
                    };
                    readonly reviewedAfter: {
                        readonly type: "string";
                        readonly format: "datetime";
                        readonly description: "Search subjects reviewed after a given timestamp";
                    };
                    readonly hostingDeletedAfter: {
                        readonly type: "string";
                        readonly format: "datetime";
                        readonly description: "Search subjects where the associated record/account was deleted after a given timestamp";
                    };
                    readonly hostingDeletedBefore: {
                        readonly type: "string";
                        readonly format: "datetime";
                        readonly description: "Search subjects where the associated record/account was deleted before a given timestamp";
                    };
                    readonly hostingUpdatedAfter: {
                        readonly type: "string";
                        readonly format: "datetime";
                        readonly description: "Search subjects where the associated record/account was updated after a given timestamp";
                    };
                    readonly hostingUpdatedBefore: {
                        readonly type: "string";
                        readonly format: "datetime";
                        readonly description: "Search subjects where the associated record/account was updated before a given timestamp";
                    };
                    readonly hostingStatuses: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                        readonly description: "Search subjects by the status of the associated record/account";
                    };
                    readonly reviewedBefore: {
                        readonly type: "string";
                        readonly format: "datetime";
                        readonly description: "Search subjects reviewed before a given timestamp";
                    };
                    readonly includeMuted: {
                        readonly type: "boolean";
                        readonly description: "By default, we don't include muted subjects in the results. Set this to true to include them.";
                    };
                    readonly onlyMuted: {
                        readonly type: "boolean";
                        readonly description: "When set to true, only muted subjects and reporters will be returned.";
                    };
                    readonly reviewState: {
                        readonly type: "string";
                        readonly description: "Specify when fetching subjects in a certain state";
                    };
                    readonly ignoreSubjects: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly format: "uri";
                        };
                    };
                    readonly lastReviewedBy: {
                        readonly type: "string";
                        readonly format: "did";
                        readonly description: "Get all subject statuses that were reviewed by a specific moderator";
                    };
                    readonly sortField: {
                        readonly type: "string";
                        readonly default: "lastReportedAt";
                        readonly enum: ["lastReviewedAt", "lastReportedAt", "reportedRecordsCount", "takendownRecordsCount", "priorityScore"];
                    };
                    readonly sortDirection: {
                        readonly type: "string";
                        readonly default: "desc";
                        readonly enum: ["asc", "desc"];
                    };
                    readonly takendown: {
                        readonly type: "boolean";
                        readonly description: "Get subjects that were taken down";
                    };
                    readonly appealed: {
                        readonly type: "boolean";
                        readonly description: "Get subjects in unresolved appealed status";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly tags: {
                        readonly type: "array";
                        readonly maxLength: 25;
                        readonly items: {
                            readonly type: "string";
                            readonly description: "Items in this array are applied with OR filters. To apply AND filter, put all tags in the same string and separate using && characters";
                        };
                    };
                    readonly excludeTags: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                    readonly collections: {
                        readonly type: "array";
                        readonly maxLength: 20;
                        readonly description: "If specified, subjects belonging to the given collections will be returned. When subjectType is set to 'account', this will be ignored.";
                        readonly items: {
                            readonly type: "string";
                            readonly format: "nsid";
                        };
                    };
                    readonly subjectType: {
                        readonly type: "string";
                        readonly description: "If specified, subjects of the given type (account or record) will be returned. When this is set to 'account' the 'collections' parameter will be ignored. When includeAllUserRecords or subject is set, this will be ignored.";
                        readonly knownValues: ["account", "record"];
                    };
                    readonly minAccountSuspendCount: {
                        readonly type: "integer";
                        readonly description: "If specified, only subjects that belong to an account that has at least this many suspensions will be returned.";
                    };
                    readonly minReportedRecordsCount: {
                        readonly type: "integer";
                        readonly description: "If specified, only subjects that belong to an account that has at least this many reported records will be returned.";
                    };
                    readonly minTakendownRecordsCount: {
                        readonly type: "integer";
                        readonly description: "If specified, only subjects that belong to an account that has at least this many taken down records will be returned.";
                    };
                    readonly minPriorityScore: {
                        readonly minimum: 0;
                        readonly maximum: 100;
                        readonly type: "integer";
                        readonly description: "If specified, only subjects that have priority score value above the given value will be returned.";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["subjectStatuses"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly subjectStatuses: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:tools.ozone.moderation.defs#subjectStatusView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.moderation.searchRepos";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Find repositories based on a search term.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly term: {
                        readonly type: "string";
                        readonly description: "DEPRECATED: use 'q' instead";
                    };
                    readonly q: {
                        readonly type: "string";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["repos"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly repos: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:tools.ozone.moderation.defs#repoView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.server.getConfig";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get details about ozone's server configuration.";
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly properties: {
                        readonly appview: {
                            readonly type: "ref";
                            readonly ref: "lex:tools.ozone.server.getConfig#serviceConfig";
                        };
                        readonly pds: {
                            readonly type: "ref";
                            readonly ref: "lex:tools.ozone.server.getConfig#serviceConfig";
                        };
                        readonly blobDivert: {
                            readonly type: "ref";
                            readonly ref: "lex:tools.ozone.server.getConfig#serviceConfig";
                        };
                        readonly chat: {
                            readonly type: "ref";
                            readonly ref: "lex:tools.ozone.server.getConfig#serviceConfig";
                        };
                        readonly viewer: {
                            readonly type: "ref";
                            readonly ref: "lex:tools.ozone.server.getConfig#viewerConfig";
                        };
                    };
                };
            };
        };
        readonly serviceConfig: {
            readonly type: "object";
            readonly properties: {
                readonly url: {
                    readonly type: "string";
                    readonly format: "uri";
                };
            };
        };
        readonly viewerConfig: {
            readonly type: "object";
            readonly properties: {
                readonly role: {
                    readonly type: "string";
                    readonly knownValues: ["tools.ozone.team.defs#roleAdmin", "tools.ozone.team.defs#roleModerator", "tools.ozone.team.defs#roleTriage"];
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.set.addValues";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Add values to a specific set. Attempting to add values to a set that does not exist will result in an error.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["name", "values"];
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the set to add values to";
                        };
                        readonly values: {
                            readonly type: "array";
                            readonly minLength: 1;
                            readonly maxLength: 1000;
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "Array of string values to add to the set";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.set.defs";
    readonly defs: {
        readonly set: {
            readonly type: "object";
            readonly required: ["name"];
            readonly properties: {
                readonly name: {
                    readonly type: "string";
                    readonly minLength: 3;
                    readonly maxLength: 128;
                };
                readonly description: {
                    readonly type: "string";
                    readonly maxGraphemes: 1024;
                    readonly maxLength: 10240;
                };
            };
        };
        readonly setView: {
            readonly type: "object";
            readonly required: ["name", "setSize", "createdAt", "updatedAt"];
            readonly properties: {
                readonly name: {
                    readonly type: "string";
                    readonly minLength: 3;
                    readonly maxLength: 128;
                };
                readonly description: {
                    readonly type: "string";
                    readonly maxGraphemes: 1024;
                    readonly maxLength: 10240;
                };
                readonly setSize: {
                    readonly type: "integer";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.set.deleteSet";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Delete an entire set. Attempting to delete a set that does not exist will result in an error.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["name"];
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the set to delete";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly properties: {};
                };
            };
            readonly errors: [{
                readonly name: "SetNotFound";
                readonly description: "set with the given name does not exist";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.set.deleteValues";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Delete values from a specific set. Attempting to delete values that are not in the set will not result in an error";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["name", "values"];
                    readonly properties: {
                        readonly name: {
                            readonly type: "string";
                            readonly description: "Name of the set to delete values from";
                        };
                        readonly values: {
                            readonly type: "array";
                            readonly minLength: 1;
                            readonly items: {
                                readonly type: "string";
                            };
                            readonly description: "Array of string values to delete from the set";
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "SetNotFound";
                readonly description: "set with the given name does not exist";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.set.getValues";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get a specific set and its values";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["name"];
                readonly properties: {
                    readonly name: {
                        readonly type: "string";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 1000;
                        readonly default: 100;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["set", "values"];
                    readonly properties: {
                        readonly set: {
                            readonly type: "ref";
                            readonly ref: "lex:tools.ozone.set.defs#setView";
                        };
                        readonly values: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "string";
                            };
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "SetNotFound";
                readonly description: "set with the given name does not exist";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.set.querySets";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Query available sets";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                    readonly namePrefix: {
                        readonly type: "string";
                    };
                    readonly sortBy: {
                        readonly type: "string";
                        readonly enum: ["name", "createdAt", "updatedAt"];
                        readonly default: "name";
                    };
                    readonly sortDirection: {
                        readonly type: "string";
                        readonly default: "asc";
                        readonly enum: ["asc", "desc"];
                        readonly description: "Defaults to ascending order of name field.";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["sets"];
                    readonly properties: {
                        readonly sets: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:tools.ozone.set.defs#setView";
                            };
                        };
                        readonly cursor: {
                            readonly type: "string";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.set.upsertSet";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Create or update set metadata";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.set.defs#set";
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.set.defs#setView";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.setting.defs";
    readonly defs: {
        readonly option: {
            readonly type: "object";
            readonly required: ["key", "value", "did", "scope", "createdBy", "lastUpdatedBy"];
            readonly properties: {
                readonly key: {
                    readonly type: "string";
                    readonly format: "nsid";
                };
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly value: {
                    readonly type: "unknown";
                };
                readonly description: {
                    readonly type: "string";
                    readonly maxGraphemes: 1024;
                    readonly maxLength: 10240;
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly managerRole: {
                    readonly type: "string";
                    readonly knownValues: ["tools.ozone.team.defs#roleModerator", "tools.ozone.team.defs#roleTriage", "tools.ozone.team.defs#roleAdmin"];
                };
                readonly scope: {
                    readonly type: "string";
                    readonly knownValues: ["instance", "personal"];
                };
                readonly createdBy: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly lastUpdatedBy: {
                    readonly type: "string";
                    readonly format: "did";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.setting.listOptions";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "List settings with optional filtering";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                    readonly scope: {
                        readonly type: "string";
                        readonly knownValues: ["instance", "personal"];
                        readonly default: "instance";
                    };
                    readonly prefix: {
                        readonly type: "string";
                        readonly description: "Filter keys by prefix";
                    };
                    readonly keys: {
                        readonly type: "array";
                        readonly maxLength: 100;
                        readonly items: {
                            readonly type: "string";
                            readonly format: "nsid";
                        };
                        readonly description: "Filter for only the specified keys. Ignored if prefix is provided";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["options"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly options: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:tools.ozone.setting.defs#option";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.setting.removeOptions";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Delete settings by key";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["keys", "scope"];
                    readonly properties: {
                        readonly keys: {
                            readonly type: "array";
                            readonly minLength: 1;
                            readonly maxLength: 200;
                            readonly items: {
                                readonly type: "string";
                                readonly format: "nsid";
                            };
                        };
                        readonly scope: {
                            readonly type: "string";
                            readonly knownValues: ["instance", "personal"];
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly properties: {};
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.setting.upsertOption";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Create or update setting option";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["key", "scope", "value"];
                    readonly properties: {
                        readonly key: {
                            readonly type: "string";
                            readonly format: "nsid";
                        };
                        readonly scope: {
                            readonly type: "string";
                            readonly knownValues: ["instance", "personal"];
                        };
                        readonly value: {
                            readonly type: "unknown";
                        };
                        readonly description: {
                            readonly type: "string";
                            readonly maxLength: 2000;
                        };
                        readonly managerRole: {
                            readonly type: "string";
                            readonly knownValues: ["tools.ozone.team.defs#roleModerator", "tools.ozone.team.defs#roleTriage", "tools.ozone.team.defs#roleAdmin"];
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["option"];
                    readonly properties: {
                        readonly option: {
                            readonly type: "ref";
                            readonly ref: "lex:tools.ozone.setting.defs#option";
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.signature.defs";
    readonly defs: {
        readonly sigDetail: {
            readonly type: "object";
            readonly required: ["property", "value"];
            readonly properties: {
                readonly property: {
                    readonly type: "string";
                };
                readonly value: {
                    readonly type: "string";
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.signature.findCorrelation";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Find all correlated threat signatures between 2 or more accounts.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["dids"];
                readonly properties: {
                    readonly dids: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["details"];
                    readonly properties: {
                        readonly details: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:tools.ozone.signature.defs#sigDetail";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.signature.findRelatedAccounts";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Get accounts that share some matching threat signatures with the root account.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["did"];
                readonly properties: {
                    readonly did: {
                        readonly type: "string";
                        readonly format: "did";
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["accounts"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly accounts: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:tools.ozone.signature.findRelatedAccounts#relatedAccount";
                            };
                        };
                    };
                };
            };
        };
        readonly relatedAccount: {
            readonly type: "object";
            readonly required: ["account"];
            readonly properties: {
                readonly account: {
                    readonly type: "ref";
                    readonly ref: "lex:com.atproto.admin.defs#accountView";
                };
                readonly similarities: {
                    readonly type: "array";
                    readonly items: {
                        readonly type: "ref";
                        readonly ref: "lex:tools.ozone.signature.defs#sigDetail";
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.signature.searchAccounts";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "Search for accounts that match one or more threat signature values.";
            readonly parameters: {
                readonly type: "params";
                readonly required: ["values"];
                readonly properties: {
                    readonly values: {
                        readonly type: "array";
                        readonly items: {
                            readonly type: "string";
                        };
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["accounts"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly accounts: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:com.atproto.admin.defs#accountView";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.team.addMember";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Add a member to the ozone team. Requires admin role.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["did", "role"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly role: {
                            readonly type: "string";
                            readonly knownValues: ["tools.ozone.team.defs#roleAdmin", "tools.ozone.team.defs#roleModerator", "tools.ozone.team.defs#roleTriage"];
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.team.defs#member";
                };
            };
            readonly errors: [{
                readonly name: "MemberAlreadyExists";
                readonly description: "Member already exists in the team.";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.team.defs";
    readonly defs: {
        readonly member: {
            readonly type: "object";
            readonly required: ["did", "role"];
            readonly properties: {
                readonly did: {
                    readonly type: "string";
                    readonly format: "did";
                };
                readonly disabled: {
                    readonly type: "boolean";
                };
                readonly profile: {
                    readonly type: "ref";
                    readonly ref: "lex:app.bsky.actor.defs#profileViewDetailed";
                };
                readonly createdAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly updatedAt: {
                    readonly type: "string";
                    readonly format: "datetime";
                };
                readonly lastUpdatedBy: {
                    readonly type: "string";
                };
                readonly role: {
                    readonly type: "string";
                    readonly knownValues: ["lex:tools.ozone.team.defs#roleAdmin", "lex:tools.ozone.team.defs#roleModerator", "lex:tools.ozone.team.defs#roleTriage"];
                };
            };
        };
        readonly roleAdmin: {
            readonly type: "token";
            readonly description: "Admin role. Highest level of access, can perform all actions.";
        };
        readonly roleModerator: {
            readonly type: "token";
            readonly description: "Moderator role. Can perform most actions.";
        };
        readonly roleTriage: {
            readonly type: "token";
            readonly description: "Triage role. Mostly intended for monitoring and escalating issues.";
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.team.deleteMember";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Delete a member from ozone team. Requires admin role.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["did"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                    };
                };
            };
            readonly errors: [{
                readonly name: "MemberNotFound";
                readonly description: "The member being deleted does not exist";
            }, {
                readonly name: "CannotDeleteSelf";
                readonly description: "You can not delete yourself from the team";
            }];
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.team.listMembers";
    readonly defs: {
        readonly main: {
            readonly type: "query";
            readonly description: "List all members with access to the ozone service.";
            readonly parameters: {
                readonly type: "params";
                readonly properties: {
                    readonly limit: {
                        readonly type: "integer";
                        readonly minimum: 1;
                        readonly maximum: 100;
                        readonly default: 50;
                    };
                    readonly cursor: {
                        readonly type: "string";
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["members"];
                    readonly properties: {
                        readonly cursor: {
                            readonly type: "string";
                        };
                        readonly members: {
                            readonly type: "array";
                            readonly items: {
                                readonly type: "ref";
                                readonly ref: "lex:tools.ozone.team.defs#member";
                            };
                        };
                    };
                };
            };
        };
    };
} | {
    readonly lexicon: 1;
    readonly id: "tools.ozone.team.updateMember";
    readonly defs: {
        readonly main: {
            readonly type: "procedure";
            readonly description: "Update a member in the ozone service. Requires admin role.";
            readonly input: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "object";
                    readonly required: ["did"];
                    readonly properties: {
                        readonly did: {
                            readonly type: "string";
                            readonly format: "did";
                        };
                        readonly disabled: {
                            readonly type: "boolean";
                        };
                        readonly role: {
                            readonly type: "string";
                            readonly knownValues: ["tools.ozone.team.defs#roleAdmin", "tools.ozone.team.defs#roleModerator", "tools.ozone.team.defs#roleTriage"];
                        };
                    };
                };
            };
            readonly output: {
                readonly encoding: "application/json";
                readonly schema: {
                    readonly type: "ref";
                    readonly ref: "lex:tools.ozone.team.defs#member";
                };
            };
            readonly errors: [{
                readonly name: "MemberNotFound";
                readonly description: "The member being updated does not exist in the team";
            }];
        };
    };
})[];
export declare const lexicons: Lexicons;
export declare const ids: {
    ComAtprotoAdminDefs: string;
    ComAtprotoAdminDeleteAccount: string;
    ComAtprotoAdminDisableAccountInvites: string;
    ComAtprotoAdminDisableInviteCodes: string;
    ComAtprotoAdminEnableAccountInvites: string;
    ComAtprotoAdminGetAccountInfo: string;
    ComAtprotoAdminGetAccountInfos: string;
    ComAtprotoAdminGetInviteCodes: string;
    ComAtprotoAdminGetSubjectStatus: string;
    ComAtprotoAdminSearchAccounts: string;
    ComAtprotoAdminSendEmail: string;
    ComAtprotoAdminUpdateAccountEmail: string;
    ComAtprotoAdminUpdateAccountHandle: string;
    ComAtprotoAdminUpdateAccountPassword: string;
    ComAtprotoAdminUpdateSubjectStatus: string;
    ComAtprotoIdentityGetRecommendedDidCredentials: string;
    ComAtprotoIdentityRequestPlcOperationSignature: string;
    ComAtprotoIdentityResolveHandle: string;
    ComAtprotoIdentitySignPlcOperation: string;
    ComAtprotoIdentitySubmitPlcOperation: string;
    ComAtprotoIdentityUpdateHandle: string;
    ComAtprotoLabelDefs: string;
    ComAtprotoLabelQueryLabels: string;
    ComAtprotoLabelSubscribeLabels: string;
    ComAtprotoLexiconSchema: string;
    ComAtprotoModerationCreateReport: string;
    ComAtprotoModerationDefs: string;
    ComAtprotoRepoApplyWrites: string;
    ComAtprotoRepoCreateRecord: string;
    ComAtprotoRepoDefs: string;
    ComAtprotoRepoDeleteRecord: string;
    ComAtprotoRepoDescribeRepo: string;
    ComAtprotoRepoGetRecord: string;
    ComAtprotoRepoImportRepo: string;
    ComAtprotoRepoListMissingBlobs: string;
    ComAtprotoRepoListRecords: string;
    ComAtprotoRepoPutRecord: string;
    ComAtprotoRepoStrongRef: string;
    ComAtprotoRepoUploadBlob: string;
    ComAtprotoServerActivateAccount: string;
    ComAtprotoServerCheckAccountStatus: string;
    ComAtprotoServerConfirmEmail: string;
    ComAtprotoServerCreateAccount: string;
    ComAtprotoServerCreateAppPassword: string;
    ComAtprotoServerCreateInviteCode: string;
    ComAtprotoServerCreateInviteCodes: string;
    ComAtprotoServerCreateSession: string;
    ComAtprotoServerDeactivateAccount: string;
    ComAtprotoServerDefs: string;
    ComAtprotoServerDeleteAccount: string;
    ComAtprotoServerDeleteSession: string;
    ComAtprotoServerDescribeServer: string;
    ComAtprotoServerGetAccountInviteCodes: string;
    ComAtprotoServerGetServiceAuth: string;
    ComAtprotoServerGetSession: string;
    ComAtprotoServerListAppPasswords: string;
    ComAtprotoServerRefreshSession: string;
    ComAtprotoServerRequestAccountDelete: string;
    ComAtprotoServerRequestEmailConfirmation: string;
    ComAtprotoServerRequestEmailUpdate: string;
    ComAtprotoServerRequestPasswordReset: string;
    ComAtprotoServerReserveSigningKey: string;
    ComAtprotoServerResetPassword: string;
    ComAtprotoServerRevokeAppPassword: string;
    ComAtprotoServerUpdateEmail: string;
    ComAtprotoSyncGetBlob: string;
    ComAtprotoSyncGetBlocks: string;
    ComAtprotoSyncGetCheckout: string;
    ComAtprotoSyncGetHead: string;
    ComAtprotoSyncGetLatestCommit: string;
    ComAtprotoSyncGetRecord: string;
    ComAtprotoSyncGetRepo: string;
    ComAtprotoSyncGetRepoStatus: string;
    ComAtprotoSyncListBlobs: string;
    ComAtprotoSyncListRepos: string;
    ComAtprotoSyncNotifyOfUpdate: string;
    ComAtprotoSyncRequestCrawl: string;
    ComAtprotoSyncSubscribeRepos: string;
    ComAtprotoTempAddReservedHandle: string;
    ComAtprotoTempCheckSignupQueue: string;
    ComAtprotoTempFetchLabels: string;
    ComAtprotoTempRequestPhoneVerification: string;
    AppBskyActorDefs: string;
    AppBskyActorGetPreferences: string;
    AppBskyActorGetProfile: string;
    AppBskyActorGetProfiles: string;
    AppBskyActorGetSuggestions: string;
    AppBskyActorProfile: string;
    AppBskyActorPutPreferences: string;
    AppBskyActorSearchActors: string;
    AppBskyActorSearchActorsTypeahead: string;
    AppBskyEmbedDefs: string;
    AppBskyEmbedExternal: string;
    AppBskyEmbedImages: string;
    AppBskyEmbedRecord: string;
    AppBskyEmbedRecordWithMedia: string;
    AppBskyEmbedVideo: string;
    AppBskyFeedDefs: string;
    AppBskyFeedDescribeFeedGenerator: string;
    AppBskyFeedGenerator: string;
    AppBskyFeedGetActorFeeds: string;
    AppBskyFeedGetActorLikes: string;
    AppBskyFeedGetAuthorFeed: string;
    AppBskyFeedGetFeed: string;
    AppBskyFeedGetFeedGenerator: string;
    AppBskyFeedGetFeedGenerators: string;
    AppBskyFeedGetFeedSkeleton: string;
    AppBskyFeedGetLikes: string;
    AppBskyFeedGetListFeed: string;
    AppBskyFeedGetPostThread: string;
    AppBskyFeedGetPosts: string;
    AppBskyFeedGetQuotes: string;
    AppBskyFeedGetRepostedBy: string;
    AppBskyFeedGetSuggestedFeeds: string;
    AppBskyFeedGetTimeline: string;
    AppBskyFeedLike: string;
    AppBskyFeedPost: string;
    AppBskyFeedPostgate: string;
    AppBskyFeedRepost: string;
    AppBskyFeedSearchPosts: string;
    AppBskyFeedSendInteractions: string;
    AppBskyFeedThreadgate: string;
    AppBskyGraphBlock: string;
    AppBskyGraphDefs: string;
    AppBskyGraphFollow: string;
    AppBskyGraphGetActorStarterPacks: string;
    AppBskyGraphGetBlocks: string;
    AppBskyGraphGetFollowers: string;
    AppBskyGraphGetFollows: string;
    AppBskyGraphGetKnownFollowers: string;
    AppBskyGraphGetList: string;
    AppBskyGraphGetListBlocks: string;
    AppBskyGraphGetListMutes: string;
    AppBskyGraphGetLists: string;
    AppBskyGraphGetMutes: string;
    AppBskyGraphGetRelationships: string;
    AppBskyGraphGetStarterPack: string;
    AppBskyGraphGetStarterPacks: string;
    AppBskyGraphGetSuggestedFollowsByActor: string;
    AppBskyGraphList: string;
    AppBskyGraphListblock: string;
    AppBskyGraphListitem: string;
    AppBskyGraphMuteActor: string;
    AppBskyGraphMuteActorList: string;
    AppBskyGraphMuteThread: string;
    AppBskyGraphSearchStarterPacks: string;
    AppBskyGraphStarterpack: string;
    AppBskyGraphUnmuteActor: string;
    AppBskyGraphUnmuteActorList: string;
    AppBskyGraphUnmuteThread: string;
    AppBskyLabelerDefs: string;
    AppBskyLabelerGetServices: string;
    AppBskyLabelerService: string;
    AppBskyNotificationGetUnreadCount: string;
    AppBskyNotificationListNotifications: string;
    AppBskyNotificationPutPreferences: string;
    AppBskyNotificationRegisterPush: string;
    AppBskyNotificationUpdateSeen: string;
    AppBskyRichtextFacet: string;
    AppBskyUnspeccedDefs: string;
    AppBskyUnspeccedGetConfig: string;
    AppBskyUnspeccedGetPopularFeedGenerators: string;
    AppBskyUnspeccedGetSuggestionsSkeleton: string;
    AppBskyUnspeccedGetTaggedSuggestions: string;
    AppBskyUnspeccedGetTrendingTopics: string;
    AppBskyUnspeccedSearchActorsSkeleton: string;
    AppBskyUnspeccedSearchPostsSkeleton: string;
    AppBskyUnspeccedSearchStarterPacksSkeleton: string;
    AppBskyVideoDefs: string;
    AppBskyVideoGetJobStatus: string;
    AppBskyVideoGetUploadLimits: string;
    AppBskyVideoUploadVideo: string;
    ChatBskyActorDeclaration: string;
    ChatBskyActorDefs: string;
    ChatBskyActorDeleteAccount: string;
    ChatBskyActorExportAccountData: string;
    ChatBskyConvoDefs: string;
    ChatBskyConvoDeleteMessageForSelf: string;
    ChatBskyConvoGetConvo: string;
    ChatBskyConvoGetConvoForMembers: string;
    ChatBskyConvoGetLog: string;
    ChatBskyConvoGetMessages: string;
    ChatBskyConvoLeaveConvo: string;
    ChatBskyConvoListConvos: string;
    ChatBskyConvoMuteConvo: string;
    ChatBskyConvoSendMessage: string;
    ChatBskyConvoSendMessageBatch: string;
    ChatBskyConvoUnmuteConvo: string;
    ChatBskyConvoUpdateRead: string;
    ChatBskyModerationGetActorMetadata: string;
    ChatBskyModerationGetMessageContext: string;
    ChatBskyModerationUpdateActorAccess: string;
    ToolsOzoneCommunicationCreateTemplate: string;
    ToolsOzoneCommunicationDefs: string;
    ToolsOzoneCommunicationDeleteTemplate: string;
    ToolsOzoneCommunicationListTemplates: string;
    ToolsOzoneCommunicationUpdateTemplate: string;
    ToolsOzoneModerationDefs: string;
    ToolsOzoneModerationEmitEvent: string;
    ToolsOzoneModerationGetEvent: string;
    ToolsOzoneModerationGetRecord: string;
    ToolsOzoneModerationGetRecords: string;
    ToolsOzoneModerationGetRepo: string;
    ToolsOzoneModerationGetRepos: string;
    ToolsOzoneModerationQueryEvents: string;
    ToolsOzoneModerationQueryStatuses: string;
    ToolsOzoneModerationSearchRepos: string;
    ToolsOzoneServerGetConfig: string;
    ToolsOzoneSetAddValues: string;
    ToolsOzoneSetDefs: string;
    ToolsOzoneSetDeleteSet: string;
    ToolsOzoneSetDeleteValues: string;
    ToolsOzoneSetGetValues: string;
    ToolsOzoneSetQuerySets: string;
    ToolsOzoneSetUpsertSet: string;
    ToolsOzoneSettingDefs: string;
    ToolsOzoneSettingListOptions: string;
    ToolsOzoneSettingRemoveOptions: string;
    ToolsOzoneSettingUpsertOption: string;
    ToolsOzoneSignatureDefs: string;
    ToolsOzoneSignatureFindCorrelation: string;
    ToolsOzoneSignatureFindRelatedAccounts: string;
    ToolsOzoneSignatureSearchAccounts: string;
    ToolsOzoneTeamAddMember: string;
    ToolsOzoneTeamDefs: string;
    ToolsOzoneTeamDeleteMember: string;
    ToolsOzoneTeamListMembers: string;
    ToolsOzoneTeamUpdateMember: string;
};
//# sourceMappingURL=lexicons.d.ts.map